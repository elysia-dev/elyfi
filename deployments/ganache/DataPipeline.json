{
  "address": "0x128AF7E290ECCDe0050f33A1b5A4Bc8b2BB4d817",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "moneyPool_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAssetBondStateData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum DataStruct.AssetBondState",
              "name": "assetBondState",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "debtOnMoneyPool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeOnCollateralServiceProvider",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataPipeline.AssetBondStateDataLocalVars",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalLTokenSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "implicitLTokenSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lTokenInterestIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalDTokenSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDTokenSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averageRealAssetBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dTokenLastUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAPY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositAPY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "moneyPooLastUpdateTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataPipeline.ReserveDataLocalVars",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "underlyingAssetBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lTokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "implicitLtokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dTokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalDTokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averageRealAssetBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataPipeline.UserDataLocalVars",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moneyPool",
      "outputs": [
        {
          "internalType": "contract IMoneyPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b69e73f71c36dc53c89e37621516fd8361aa505ec64155e80d3c5d99bdea98f",
  "receipt": {
    "to": null,
    "from": "0x715B006d4723977CcDb1581a62948f6354752e62",
    "contractAddress": "0x128AF7E290ECCDe0050f33A1b5A4Bc8b2BB4d817",
    "transactionIndex": 150,
    "gasUsed": "976039",
    "logsBloom": "0x
    "blockHash": "0xbec34fd260b3d6497d4dbcf9d5b2f3c7f1899bd203f3cf3cbee1f561bb950627",
    "transactionHash": "0x3b69e73f71c36dc53c89e37621516fd8361aa505ec64155e80d3c5d99bdea98f",
    "logs": [],
    "blockNumber": 12830788,
    "cumulativeGasUsed": "13485445",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa93008fD32EB24E488DDAA6C0aA152559fDa9E8c"
  ],
  "solcInputHash": "0c71cd98fa6269b62417fa18d1fc6779",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"moneyPool_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAssetBondStateData\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DataStruct.AssetBondState\",\"name\":\"assetBondState\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtOnMoneyPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeOnCollateralServiceProvider\",\"type\":\"uint256\"}],\"internalType\":\"struct DataPipeline.AssetBondStateDataLocalVars\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalLTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"implicitLTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lTokenInterestIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageRealAssetBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dTokenLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moneyPooLastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DataPipeline.ReserveDataLocalVars\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAssetBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"implicitLtokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageRealAssetBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DataPipeline.UserDataLocalVars\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moneyPool\",\"outputs\":[{\"internalType\":\"contract IMoneyPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ELYSIA\",\"details\":\"The data pipeline contract is to help integrating the data of user and reserve in ELYFI. Each reserve has a seperate data pipeline.\",\"kind\":\"dev\",\"methods\":{\"getReserveData(address)\":{\"details\":\"Returns the reserve's data for asset.\"},\"getUserData(address,address)\":{\"details\":\"Returns the user's data for asset.\"}},\"title\":\"ELYFI Data Pipeline\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DataPipeline.sol\":\"DataPipeline\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/DataPipeline.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './libraries/DataStruct.sol';\\n\\nimport './interfaces/ILToken.sol';\\nimport './interfaces/IDToken.sol';\\nimport './interfaces/IMoneyPool.sol';\\nimport './interfaces/ITokenizer.sol';\\n\\n/**\\n * @title ELYFI Data Pipeline\\n * @author ELYSIA\\n * @dev The data pipeline contract is to help integrating the data of user and reserve in ELYFI.\\n * Each reserve has a seperate data pipeline.\\n */\\ncontract DataPipeline {\\n  IMoneyPool public moneyPool;\\n\\n  constructor(address moneyPool_) {\\n    moneyPool = IMoneyPool(moneyPool_);\\n  }\\n\\n  struct UserDataLocalVars {\\n    uint256 underlyingAssetBalance;\\n    uint256 lTokenBalance;\\n    uint256 implicitLtokenBalance;\\n    uint256 dTokenBalance;\\n    uint256 principalDTokenBalance;\\n    uint256 averageRealAssetBorrowRate;\\n    uint256 lastUpdateTimestamp;\\n  }\\n\\n  /**\\n   * @dev Returns the user's data for asset.\\n   */\\n  function getUserData(address asset, address user)\\n    external\\n    view\\n    returns (UserDataLocalVars memory)\\n  {\\n    UserDataLocalVars memory vars;\\n    DataStruct.ReserveData memory reserve = moneyPool.getReserveData(asset);\\n\\n    vars.underlyingAssetBalance = IERC20(asset).balanceOf(user);\\n    vars.lTokenBalance = ILToken(reserve.lTokenAddress).balanceOf(user);\\n    vars.implicitLtokenBalance = ILToken(reserve.lTokenAddress).implicitBalanceOf(user);\\n    vars.dTokenBalance = IDToken(reserve.dTokenAddress).balanceOf(user);\\n    vars.principalDTokenBalance = IDToken(reserve.dTokenAddress).principalBalanceOf(user);\\n    vars.averageRealAssetBorrowRate = IDToken(reserve.dTokenAddress)\\n    .getUserAverageRealAssetBorrowRate(user);\\n    vars.lastUpdateTimestamp = IDToken(reserve.dTokenAddress).getUserLastUpdateTimestamp(user);\\n\\n    return vars;\\n  }\\n\\n  struct ReserveDataLocalVars {\\n    uint256 totalLTokenSupply;\\n    uint256 implicitLTokenSupply;\\n    uint256 lTokenInterestIndex;\\n    uint256 principalDTokenSupply;\\n    uint256 totalDTokenSupply;\\n    uint256 averageRealAssetBorrowRate;\\n    uint256 dTokenLastUpdateTimestamp;\\n    uint256 borrowAPY;\\n    uint256 depositAPY;\\n    uint256 moneyPooLastUpdateTimestamp;\\n  }\\n\\n  /**\\n   * @dev Returns the reserve's data for asset.\\n   */\\n  function getReserveData(address asset) external view returns (ReserveDataLocalVars memory) {\\n    ReserveDataLocalVars memory vars;\\n    DataStruct.ReserveData memory reserve = moneyPool.getReserveData(asset);\\n\\n    vars.totalLTokenSupply = ILToken(reserve.lTokenAddress).totalSupply();\\n    vars.implicitLTokenSupply = ILToken(reserve.lTokenAddress).implicitTotalSupply();\\n    vars.lTokenInterestIndex = reserve.lTokenInterestIndex;\\n    (\\n      vars.principalDTokenSupply,\\n      vars.totalDTokenSupply,\\n      vars.averageRealAssetBorrowRate,\\n      vars.dTokenLastUpdateTimestamp\\n    ) = IDToken(reserve.dTokenAddress).getDTokenData();\\n    vars.borrowAPY = reserve.borrowAPY;\\n    vars.depositAPY = reserve.depositAPY;\\n    vars.moneyPooLastUpdateTimestamp = reserve.lastUpdateTimestamp;\\n\\n    return vars;\\n  }\\n\\n  struct AssetBondStateDataLocalVars {\\n    DataStruct.AssetBondState assetBondState;\\n    address tokenOwner;\\n    uint256 debtOnMoneyPool;\\n    uint256 feeOnCollateralServiceProvider;\\n  }\\n\\n  function getAssetBondStateData(address asset, uint256 tokenId)\\n    external\\n    view\\n    returns (AssetBondStateDataLocalVars memory)\\n  {\\n    AssetBondStateDataLocalVars memory vars;\\n\\n    DataStruct.ReserveData memory reserve = moneyPool.getReserveData(asset);\\n    DataStruct.AssetBondData memory assetBond = ITokenizer(reserve.tokenizerAddress)\\n    .getAssetBondData(tokenId);\\n\\n    vars.assetBondState = assetBond.state;\\n    vars.tokenOwner = ITokenizer(reserve.tokenizerAddress).ownerOf(tokenId);\\n    (vars.debtOnMoneyPool, vars.feeOnCollateralServiceProvider) = ITokenizer(\\n      reserve.tokenizerAddress\\n    ).getAssetBondDebtData(tokenId);\\n\\n    return vars;\\n  }\\n}\\n\",\"keccak256\":\"0xf6385f29c45df059aa2980c2d976452640bfc1c1a1aee17c98865bbb227d9aee\",\"license\":\"MIT\"},\"contracts/interfaces/IDToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\ninterface IDToken is IERC20Metadata {\\n  /**\\n   * @dev Emitted when new stable debt is minted\\n   * @param account The address of the account who triggered the minting\\n   * @param receiver The recipient of stable debt tokens\\n   * @param amount The amount minted\\n   * @param currentBalance The current balance of the account\\n   * @param balanceIncrease The increase in balance since the last action of the account\\n   * @param newRate The rate of the debt after the minting\\n   * @param avgStableRate The new average stable rate after the minting\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Mint(\\n    address indexed account,\\n    address indexed receiver,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 newRate,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Emitted when new stable debt is burned\\n   * @param account The address of the account\\n   * @param amount The amount being burned\\n   * @param currentBalance The current balance of the account\\n   * @param balanceIncrease The the increase in balance since the last action of the account\\n   * @param avgStableRate The new average stable rate after the burning\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Burn(\\n    address indexed account,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Mints debt token to the `receiver` address.\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param account The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `receiver` otherwise\\n   * @param receiver The address receiving the debt tokens\\n   * @param amount The amount of debt tokens to mint\\n   * @param rate The rate of the debt being minted\\n   **/\\n  function mint(\\n    address account,\\n    address receiver,\\n    uint256 amount,\\n    uint256 rate\\n  ) external;\\n\\n  /**\\n   * @dev Burns debt of `account`\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param account The address of the account getting his debt burned\\n   * @param amount The amount of debt tokens getting burned\\n   **/\\n  function burn(address account, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the average rate of all the stable rate loans.\\n   * @return The average stable rate\\n   **/\\n  function getTotalAverageRealAssetBorrowRate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the stable rate of the account debt\\n   * @return The stable rate of the account\\n   **/\\n  function getUserAverageRealAssetBorrowRate(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the account\\n   * @return The timestamp\\n   **/\\n  function getUserLastUpdateTimestamp(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the principal, the total supply and the average stable rate\\n   **/\\n  function getDTokenData()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the total supply\\n   * @return The timestamp\\n   **/\\n  function getTotalSupplyLastUpdated() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total supply and the average stable rate\\n   **/\\n  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the principal debt balance of the account\\n   * @return The debt balance of the account since the last burn/mint action\\n   **/\\n  function principalBalanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcf44ee2e3e9072e961ccd212e104e70c71ce16b8338e392ca0c265d7ca85e0eb\",\"license\":\"MIT\"},\"contracts/interfaces/ILToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ILToken is IERC20 {\\n  /**\\n   * @dev Emitted after lTokens are minted\\n   * @param account The receiver of minted lToken\\n   * @param amount The amount being minted\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed account, uint256 amount, uint256 index);\\n\\n  /**\\n   * @dev Emitted after lTokens are burned\\n   * @param account The owner of the lTokens, getting them burned\\n   * @param underlyingAssetReceiver The address that will receive the underlying asset\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(\\n    address indexed account,\\n    address indexed underlyingAssetReceiver,\\n    uint256 amount,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param account The account whose tokens are being transferred\\n   * @param to The recipient\\n   * @param amount The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed account, address indexed to, uint256 amount, uint256 index);\\n\\n  function mint(\\n    address account,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Burns lTokens account `account` and sends the equivalent amount of underlying to `receiver`\\n   * @param account The owner of the lTokens, getting them burned\\n   * @param receiver The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address account,\\n    address receiver,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this LTokens (E.g. WETH for aWETH)\\n   **/\\n  function getUnderlyingAsset() external view returns (address);\\n\\n  function implicitBalanceOf(address account) external view returns (uint256);\\n\\n  function implicitTotalSupply() external view returns (uint256);\\n\\n  function transferUnderlyingTo(address underlyingAssetReceiver, uint256 amount) external;\\n\\n  function updateIncentivePool(address newIncentivePool) external;\\n}\\n\",\"keccak256\":\"0xd1c7fbacda21b3f118c9c380b6294fba5a812f8af2605dab957da0296e6bf8e6\",\"license\":\"MIT\"},\"contracts/interfaces/IMoneyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface IMoneyPool {\\n  event NewReserve(\\n    address indexed asset,\\n    address lToken,\\n    address dToken,\\n    address interestModel,\\n    address tokenizer,\\n    address incentivePool,\\n    uint256 moneyPoolFactor\\n  );\\n\\n  event Deposit(address indexed asset, address indexed account, uint256 amount);\\n\\n  event Withdraw(\\n    address indexed asset,\\n    address indexed account,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  event Borrow(\\n    address indexed asset,\\n    address indexed collateralServiceProvider,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 borrowAPY,\\n    uint256 borrowAmount\\n  );\\n\\n  event Repay(\\n    address indexed asset,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 userDTokenBalance,\\n    uint256 feeOnCollateralServiceProvider\\n  );\\n\\n  event Liquidation(\\n    address indexed asset,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 userDTokenBalance,\\n    uint256 feeOnCollateralServiceProvider\\n  );\\n\\n  function deposit(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external;\\n\\n  function withdraw(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external;\\n\\n  function borrow(address asset, uint256 tokenID) external;\\n\\n  function repay(address asset, uint256 tokenId) external;\\n\\n  function liquidate(address asset, uint256 tokenId) external;\\n\\n  function getLTokenInterestIndex(address asset) external view returns (uint256);\\n\\n  function getReserveData(address asset) external view returns (DataStruct.ReserveData memory);\\n\\n  function addNewReserve(\\n    address asset,\\n    address lToken,\\n    address dToken,\\n    address interestModel,\\n    address tokenizer,\\n    address incentivePool,\\n    uint256 moneyPoolFactor_\\n  ) external;\\n}\\n\",\"keccak256\":\"0x36ca1cfa806be7e8f1b1681faeda0f1dc4a26462728aa403b73e4eef12567ef1\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/DataStruct.sol';\\n\\ninterface ITokenizer is IERC721 {\\n  /**\\n   * @notice Emitted when a collateral service provider mints an empty asset bond token.\\n   * @param account The address of collateral service provider who minted\\n   * @param tokenId The id of minted token\\n   **/\\n  event EmptyAssetBondMinted(address indexed account, uint256 tokenId);\\n\\n  /**\\n   * @notice Emitted when a collateral service provider mints an empty asset bond token.\\n   **/\\n  event AssetBondSettled(\\n    address indexed borrower,\\n    address indexed signer,\\n    uint256 tokenId,\\n    uint256 principal,\\n    uint256 couponRate,\\n    uint256 delinquencyRate,\\n    uint256 debtCeiling,\\n    uint256 maturityTimestamp,\\n    uint256 liquidationTimestamp,\\n    uint256 loanStartTimestamp,\\n    string ifpsHash\\n  );\\n\\n  event AssetBondSigned(address indexed signer, uint256 tokenId, string signerOpinionHash);\\n\\n  event AssetBondCollateralized(\\n    address indexed account,\\n    uint256 tokenId,\\n    uint256 borrowAmount,\\n    uint256 interestRate\\n  );\\n\\n  event AssetBondReleased(address indexed borrower, uint256 tokenId);\\n\\n  event AssetBondLiquidated(address indexed liquidator, uint256 tokenId);\\n\\n  function mintAssetBond(address account, uint256 id) external;\\n\\n  function collateralizeAssetBond(\\n    address collateralServiceProvider,\\n    uint256 tokenId,\\n    uint256 borrowAmount,\\n    uint256 borrowAPY\\n  ) external;\\n\\n  function releaseAssetBond(address account, uint256 tokenId) external;\\n\\n  function liquidateAssetBond(address account, uint256 tokenId) external;\\n\\n  function getAssetBondIdData(uint256 tokenId)\\n    external\\n    view\\n    returns (DataStruct.AssetBondIdData memory);\\n\\n  function getAssetBondData(uint256 tokenId)\\n    external\\n    view\\n    returns (DataStruct.AssetBondData memory);\\n\\n  function getAssetBondDebtData(uint256 tokenId) external view returns (uint256, uint256);\\n\\n  function getMinter(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xbf93496db22cbfc22baf0f49fe78bc97807d9139a9589191d8bef4fcb739d727\",\"license\":\"MIT\"},\"contracts/libraries/DataStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nlibrary DataStruct {\\n  /**\\n    @notice The main reserve data struct.\\n   */\\n  struct ReserveData {\\n    uint256 moneyPoolFactor;\\n    uint256 lTokenInterestIndex;\\n    uint256 borrowAPY;\\n    uint256 depositAPY;\\n    uint256 lastUpdateTimestamp;\\n    address lTokenAddress;\\n    address dTokenAddress;\\n    address interestModelAddress;\\n    address tokenizerAddress;\\n    uint8 id;\\n    bool isPaused;\\n    bool isActivated;\\n  }\\n\\n  /**\\n   * @notice The asset bond data struct.\\n   * @param ipfsHash The IPFS hash that contains the informations and contracts\\n   * between Collateral Service Provider and lender.\\n   * @param maturityTimestamp The amount of time measured in seconds that can elapse\\n   * before the NPL company liquidate the loan and seize the asset bond collateral.\\n   * @param borrower The address of the borrower.\\n   */\\n  struct AssetBondData {\\n    AssetBondState state;\\n    address borrower;\\n    address signer;\\n    address collateralServiceProvider;\\n    uint256 principal;\\n    uint256 debtCeiling;\\n    uint256 couponRate;\\n    uint256 interestRate;\\n    uint256 delinquencyRate;\\n    uint256 loanStartTimestamp;\\n    uint256 collateralizeTimestamp;\\n    uint256 maturityTimestamp;\\n    uint256 liquidationTimestamp;\\n    string ipfsHash; // refactor : gas\\n    string signerOpinionHash;\\n  }\\n\\n  struct AssetBondIdData {\\n    uint256 nonce;\\n    uint256 countryCode;\\n    uint256 collateralServiceProviderIdentificationNumber;\\n    uint256 collateralLatitude;\\n    uint256 collateralLatitudeSign;\\n    uint256 collateralLongitude;\\n    uint256 collateralLongitudeSign;\\n    uint256 collateralDetail;\\n    uint256 collateralCategory;\\n    uint256 productNumber;\\n  }\\n\\n  /**\\n    @notice The states of asset bond\\n    * EMPTY: After\\n    * SETTLED:\\n    * CONFIRMED:\\n    * COLLATERALIZED:\\n    * DELINQUENT:\\n    * REDEEMED:\\n    * LIQUIDATED:\\n   */\\n  enum AssetBondState {\\n    EMPTY,\\n    SETTLED,\\n    CONFIRMED,\\n    COLLATERALIZED,\\n    DELINQUENT,\\n    REDEEMED,\\n    LIQUIDATED\\n  }\\n}\\n\",\"keccak256\":\"0xfef0408a202a6814e92f396333b81c78b4fff0bb1a9411b64afe849ced4ea3b1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516110d23803806110d283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b611041806100916000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063342354431461005157806335ea6a751461007a57806371d1014d14610106578063f4eeefe914610126575b600080fd5b600054610064906001600160a01b031681565b6040516100719190610f44565b60405180910390f35b61008d610088366004610c2c565b61018f565b6040516100719190600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b610119610114366004610ca3565b6103e2565b6040516100719190610f58565b610139610134366004610c6b565b610661565b6040516100719190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b610197610aa8565b61019f610aa8565b600080546040516335ea6a7560e01b81526001600160a01b03909116906335ea6a75906101d0908790600401610f44565b6101806040518083038186803b1580156101e957600080fd5b505afa1580156101fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102219190610e08565b90508060a001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561026057600080fd5b505afa158015610274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102989190610ed4565b8260000181815250508060a001516001600160a01b031663d1f2b4d96040518163ffffffff1660e01b815260040160206040518083038186803b1580156102de57600080fd5b505afa1580156102f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103169190610ed4565b82602001818152505080602001518260400181815250508060c001516001600160a01b031663723f319e6040518163ffffffff1660e01b815260040160806040518083038186803b15801561036a57600080fd5b505afa15801561037e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a29190610f0f565b60c086015260a0850152608080850191909152606080850192909252604083015160e085015290820151610100840152015161012082015290505b919050565b6103ea610afb565b6103f2610afb565b600080546040516335ea6a7560e01b81526001600160a01b03909116906335ea6a7590610423908890600401610f44565b6101806040518083038186803b15801561043c57600080fd5b505afa158015610450573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104749190610e08565b905060008161010001516001600160a01b0316638268b24e866040518263ffffffff1660e01b81526004016104ab91815260200190565b60006040518083038186803b1580156104c357600080fd5b505afa1580156104d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104ff9190810190610cce565b80519091508390600681111561052557634e487b7160e01b600052602160045260246000fd5b9081600681111561054657634e487b7160e01b600052602160045260246000fd5b9052506101008201516040516331a9108f60e11b8152600481018790526001600160a01b0390911690636352211e9060240160206040518083038186803b15801561059057600080fd5b505afa1580156105a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c89190610c4f565b6001600160a01b039081166020850152610100830151604051630349b75f60e31b815260048101889052911690631a4dbaf890602401604080518083038186803b15801561061557600080fd5b505afa158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d9190610eec565b606085015260408401525090949350505050565b610669610b2d565b610671610b2d565b600080546040516335ea6a7560e01b81526001600160a01b03909116906335ea6a75906106a2908890600401610f44565b6101806040518083038186803b1580156106bb57600080fd5b505afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f39190610e08565b6040516370a0823160e01b81529091506001600160a01b038616906370a0823190610722908790600401610f44565b60206040518083038186803b15801561073a57600080fd5b505afa15801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190610ed4565b825260a08101516040516370a0823160e01b81526001600160a01b03909116906370a08231906107a6908790600401610f44565b60206040518083038186803b1580156107be57600080fd5b505afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190610ed4565b602083015260a0810151604051630103f1a160e71b81526001600160a01b03909116906381f8d0809061082d908790600401610f44565b60206040518083038186803b15801561084557600080fd5b505afa158015610859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087d9190610ed4565b8260400181815250508060c001516001600160a01b03166370a08231856040518263ffffffff1660e01b81526004016108b69190610f44565b60206040518083038186803b1580156108ce57600080fd5b505afa1580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190610ed4565b606083015260c081015160405163631a6fd560e11b81526001600160a01b039091169063c634dfaa9061093d908790600401610f44565b60206040518083038186803b15801561095557600080fd5b505afa158015610969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098d9190610ed4565b608083015260c08101516040516319b7dc3360e21b81526001600160a01b03909116906366df70cc906109c4908790600401610f44565b60206040518083038186803b1580156109dc57600080fd5b505afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190610ed4565b60a083015260c0810151604051630ad7bcdf60e41b81526001600160a01b039091169063ad7bcdf090610a4b908790600401610f44565b60206040518083038186803b158015610a6357600080fd5b505afa158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9b9190610ed4565b60c0830152509392505050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160808101909152806000815260200160006001600160a01b0316815260200160008152602001600081525090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80516103dd81610ff3565b805180151581146103dd57600080fd5b8051600781106103dd57600080fd5b600082601f830112610ba4578081fd5b81516001600160401b03811115610bbd57610bbd610fdd565b6020610bd1601f8301601f19168201610fad565b8281528582848701011115610be4578384fd5b835b83811015610c01578581018301518282018401528201610be6565b83811115610c1157848385840101525b5095945050505050565b805160ff811681146103dd57600080fd5b600060208284031215610c3d578081fd5b8135610c4881610ff3565b9392505050565b600060208284031215610c60578081fd5b8151610c4881610ff3565b60008060408385031215610c7d578081fd5b8235610c8881610ff3565b91506020830135610c9881610ff3565b809150509250929050565b60008060408385031215610cb5578182fd5b8235610cc081610ff3565b946020939093013593505050565b600060208284031215610cdf578081fd5b81516001600160401b0380821115610cf5578283fd5b81840191506101e0808387031215610d0b578384fd5b610d1481610fad565b9050610d1f83610b85565b8152610d2d60208401610b6a565b6020820152610d3e60408401610b6a565b6040820152610d4f60608401610b6a565b60608201526080838101519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a08084015183811115610dc6578586fd5b610dd288828701610b94565b8284015250506101c08084015183811115610deb578586fd5b610df788828701610b94565b918301919091525095945050505050565b6000610180808385031215610e1b578182fd5b610e2481610fad565b90508251815260208301516020820152604083015160408201526060830151606082015260808301516080820152610e5e60a08401610b6a565b60a0820152610e6f60c08401610b6a565b60c0820152610e8060e08401610b6a565b60e0820152610100610e93818501610b6a565b90820152610120610ea5848201610c1b565b90820152610140610eb7848201610b75565b90820152610160610ec9848201610b75565b908201529392505050565b600060208284031215610ee5578081fd5b5051919050565b60008060408385031215610efe578182fd5b505080516020909101519092909150565b60008060008060808587031215610f24578182fd5b505082516020840151604085015160609095015191969095509092509050565b6001600160a01b0391909116815260200190565b8151608082019060078110610f7d57634e487b7160e01b600052602160045260246000fd5b82526020838101516001600160a01b03169083015260408084015190830152606092830151929091019190915290565b604051601f8201601f191681016001600160401b0381118282101715610fd557610fd5610fdd565b604052919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461100857600080fd5b5056fea26469706673582212209d541451185980f1d6d9a8bb0b390ce0aca7641e7881d6192e60b377a6fe985564736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063342354431461005157806335ea6a751461007a57806371d1014d14610106578063f4eeefe914610126575b600080fd5b600054610064906001600160a01b031681565b6040516100719190610f44565b60405180910390f35b61008d610088366004610c2c565b61018f565b6040516100719190600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b610119610114366004610ca3565b6103e2565b6040516100719190610f58565b610139610134366004610c6b565b610661565b6040516100719190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b610197610aa8565b61019f610aa8565b600080546040516335ea6a7560e01b81526001600160a01b03909116906335ea6a75906101d0908790600401610f44565b6101806040518083038186803b1580156101e957600080fd5b505afa1580156101fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102219190610e08565b90508060a001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561026057600080fd5b505afa158015610274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102989190610ed4565b8260000181815250508060a001516001600160a01b031663d1f2b4d96040518163ffffffff1660e01b815260040160206040518083038186803b1580156102de57600080fd5b505afa1580156102f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103169190610ed4565b82602001818152505080602001518260400181815250508060c001516001600160a01b031663723f319e6040518163ffffffff1660e01b815260040160806040518083038186803b15801561036a57600080fd5b505afa15801561037e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a29190610f0f565b60c086015260a0850152608080850191909152606080850192909252604083015160e085015290820151610100840152015161012082015290505b919050565b6103ea610afb565b6103f2610afb565b600080546040516335ea6a7560e01b81526001600160a01b03909116906335ea6a7590610423908890600401610f44565b6101806040518083038186803b15801561043c57600080fd5b505afa158015610450573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104749190610e08565b905060008161010001516001600160a01b0316638268b24e866040518263ffffffff1660e01b81526004016104ab91815260200190565b60006040518083038186803b1580156104c357600080fd5b505afa1580156104d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104ff9190810190610cce565b80519091508390600681111561052557634e487b7160e01b600052602160045260246000fd5b9081600681111561054657634e487b7160e01b600052602160045260246000fd5b9052506101008201516040516331a9108f60e11b8152600481018790526001600160a01b0390911690636352211e9060240160206040518083038186803b15801561059057600080fd5b505afa1580156105a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c89190610c4f565b6001600160a01b039081166020850152610100830151604051630349b75f60e31b815260048101889052911690631a4dbaf890602401604080518083038186803b15801561061557600080fd5b505afa158015610629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064d9190610eec565b606085015260408401525090949350505050565b610669610b2d565b610671610b2d565b600080546040516335ea6a7560e01b81526001600160a01b03909116906335ea6a75906106a2908890600401610f44565b6101806040518083038186803b1580156106bb57600080fd5b505afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f39190610e08565b6040516370a0823160e01b81529091506001600160a01b038616906370a0823190610722908790600401610f44565b60206040518083038186803b15801561073a57600080fd5b505afa15801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190610ed4565b825260a08101516040516370a0823160e01b81526001600160a01b03909116906370a08231906107a6908790600401610f44565b60206040518083038186803b1580156107be57600080fd5b505afa1580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190610ed4565b602083015260a0810151604051630103f1a160e71b81526001600160a01b03909116906381f8d0809061082d908790600401610f44565b60206040518083038186803b15801561084557600080fd5b505afa158015610859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087d9190610ed4565b8260400181815250508060c001516001600160a01b03166370a08231856040518263ffffffff1660e01b81526004016108b69190610f44565b60206040518083038186803b1580156108ce57600080fd5b505afa1580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190610ed4565b606083015260c081015160405163631a6fd560e11b81526001600160a01b039091169063c634dfaa9061093d908790600401610f44565b60206040518083038186803b15801561095557600080fd5b505afa158015610969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098d9190610ed4565b608083015260c08101516040516319b7dc3360e21b81526001600160a01b03909116906366df70cc906109c4908790600401610f44565b60206040518083038186803b1580156109dc57600080fd5b505afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190610ed4565b60a083015260c0810151604051630ad7bcdf60e41b81526001600160a01b039091169063ad7bcdf090610a4b908790600401610f44565b60206040518083038186803b158015610a6357600080fd5b505afa158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9b9190610ed4565b60c0830152509392505050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160808101909152806000815260200160006001600160a01b0316815260200160008152602001600081525090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80516103dd81610ff3565b805180151581146103dd57600080fd5b8051600781106103dd57600080fd5b600082601f830112610ba4578081fd5b81516001600160401b03811115610bbd57610bbd610fdd565b6020610bd1601f8301601f19168201610fad565b8281528582848701011115610be4578384fd5b835b83811015610c01578581018301518282018401528201610be6565b83811115610c1157848385840101525b5095945050505050565b805160ff811681146103dd57600080fd5b600060208284031215610c3d578081fd5b8135610c4881610ff3565b9392505050565b600060208284031215610c60578081fd5b8151610c4881610ff3565b60008060408385031215610c7d578081fd5b8235610c8881610ff3565b91506020830135610c9881610ff3565b809150509250929050565b60008060408385031215610cb5578182fd5b8235610cc081610ff3565b946020939093013593505050565b600060208284031215610cdf578081fd5b81516001600160401b0380821115610cf5578283fd5b81840191506101e0808387031215610d0b578384fd5b610d1481610fad565b9050610d1f83610b85565b8152610d2d60208401610b6a565b6020820152610d3e60408401610b6a565b6040820152610d4f60608401610b6a565b60608201526080838101519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a08084015183811115610dc6578586fd5b610dd288828701610b94565b8284015250506101c08084015183811115610deb578586fd5b610df788828701610b94565b918301919091525095945050505050565b6000610180808385031215610e1b578182fd5b610e2481610fad565b90508251815260208301516020820152604083015160408201526060830151606082015260808301516080820152610e5e60a08401610b6a565b60a0820152610e6f60c08401610b6a565b60c0820152610e8060e08401610b6a565b60e0820152610100610e93818501610b6a565b90820152610120610ea5848201610c1b565b90820152610140610eb7848201610b75565b90820152610160610ec9848201610b75565b908201529392505050565b600060208284031215610ee5578081fd5b5051919050565b60008060408385031215610efe578182fd5b505080516020909101519092909150565b60008060008060808587031215610f24578182fd5b505082516020840151604085015160609095015191969095509092509050565b6001600160a01b0391909116815260200190565b8151608082019060078110610f7d57634e487b7160e01b600052602160045260246000fd5b82526020838101516001600160a01b03169083015260408084015190830152606092830151929091019190915290565b604051601f8201601f191681016001600160401b0381118282101715610fd557610fd5610fdd565b604052919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461100857600080fd5b5056fea26469706673582212209d541451185980f1d6d9a8bb0b390ce0aca7641e7881d6192e60b377a6fe985564736f6c63430008030033",
  "devdoc": {
    "author": "ELYSIA",
    "details": "The data pipeline contract is to help integrating the data of user and reserve in ELYFI. Each reserve has a seperate data pipeline.",
    "kind": "dev",
    "methods": {
      "getReserveData(address)": {
        "details": "Returns the reserve's data for asset."
      },
      "getUserData(address,address)": {
        "details": "Returns the user's data for asset."
      }
    },
    "title": "ELYFI Data Pipeline",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3565,
        "contract": "contracts/DataPipeline.sol:DataPipeline",
        "label": "moneyPool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IMoneyPool)6934"
      }
    ],
    "types": {
      "t_contract(IMoneyPool)6934": {
        "encoding": "inplace",
        "label": "contract IMoneyPool",
        "numberOfBytes": "20"
      }
    }
  }
}