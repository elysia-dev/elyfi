{
  "address": "0x08f7e687A90bbA01e8613827FD0D67e41949F9CC",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum DataStruct.AssetBondState",
              "name": "state",
              "type": "DataStruct.AssetBondState"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralServiceProvider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtCeiling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "couponRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delinquencyRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loanStartTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralizeTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "signerOpinionHash",
              "type": "string"
            }
          ],
          "internalType": "struct DataStruct.AssetBondData",
          "name": "assetBond",
          "type": "tuple"
        }
      ],
      "name": "validateSettleAssetBond",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7121e346b69e58556364f531f7f5bfc2d36fb718cec9c61f0388d64bda19406f",
  "receipt": {
    "to": null,
    "from": "0x715B006d4723977CcDb1581a62948f6354752e62",
    "contractAddress": "0x08f7e687A90bbA01e8613827FD0D67e41949F9CC",
    "transactionIndex": 86,
    "gasUsed": "755748",
    "logsBloom": "0x
    "blockHash": "0xeecb74b4d6ec004aac541c2d9a253c054ab4b71f3e49ff6a91d1a65e0b6d8ec8",
    "transactionHash": "0x7121e346b69e58556364f531f7f5bfc2d36fb718cec9c61f0388d64bda19406f",
    "logs": [],
    "blockNumber": 12830703,
    "cumulativeGasUsed": "10221912",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0c71cd98fa6269b62417fa18d1fc6779",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"enum DataStruct.AssetBondState\",\"name\":\"state\",\"type\":\"DataStruct.AssetBondState\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralServiceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delinquencyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralizeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signerOpinionHash\",\"type\":\"string\"}],\"internalType\":\"struct DataStruct.AssetBondData\",\"name\":\"assetBond\",\"type\":\"tuple\"}],\"name\":\"validateSettleAssetBond\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"validateDeposit(DataStruct.ReserveData storage,uint256)\":{\"details\":\"Validate Deposit Check reserve state\",\"params\":{\"amount\":\"Deposit amount*\",\"reserve\":\"The reserve object\"}},\"validateWithdraw(DataStruct.ReserveData storage,address,uint256,uint256)\":{\"details\":\"Validate Withdraw Check reserve state Check user amount Check user total debt(later)\",\"params\":{\"amount\":\"Withdraw amount*\",\"reserve\":\"The reserve object\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/logic/Validation.sol\":\"Validation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/interfaces/ILToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ILToken is IERC20 {\\n  /**\\n   * @dev Emitted after lTokens are minted\\n   * @param account The receiver of minted lToken\\n   * @param amount The amount being minted\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed account, uint256 amount, uint256 index);\\n\\n  /**\\n   * @dev Emitted after lTokens are burned\\n   * @param account The owner of the lTokens, getting them burned\\n   * @param underlyingAssetReceiver The address that will receive the underlying asset\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(\\n    address indexed account,\\n    address indexed underlyingAssetReceiver,\\n    uint256 amount,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param account The account whose tokens are being transferred\\n   * @param to The recipient\\n   * @param amount The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed account, address indexed to, uint256 amount, uint256 index);\\n\\n  function mint(\\n    address account,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Burns lTokens account `account` and sends the equivalent amount of underlying to `receiver`\\n   * @param account The owner of the lTokens, getting them burned\\n   * @param receiver The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address account,\\n    address receiver,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this LTokens (E.g. WETH for aWETH)\\n   **/\\n  function getUnderlyingAsset() external view returns (address);\\n\\n  function implicitBalanceOf(address account) external view returns (uint256);\\n\\n  function implicitTotalSupply() external view returns (uint256);\\n\\n  function transferUnderlyingTo(address underlyingAssetReceiver, uint256 amount) external;\\n\\n  function updateIncentivePool(address newIncentivePool) external;\\n}\\n\",\"keccak256\":\"0xd1c7fbacda21b3f118c9c380b6294fba5a812f8af2605dab957da0296e6bf8e6\",\"license\":\"MIT\"},\"contracts/libraries/DataStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nlibrary DataStruct {\\n  /**\\n    @notice The main reserve data struct.\\n   */\\n  struct ReserveData {\\n    uint256 moneyPoolFactor;\\n    uint256 lTokenInterestIndex;\\n    uint256 borrowAPY;\\n    uint256 depositAPY;\\n    uint256 lastUpdateTimestamp;\\n    address lTokenAddress;\\n    address dTokenAddress;\\n    address interestModelAddress;\\n    address tokenizerAddress;\\n    uint8 id;\\n    bool isPaused;\\n    bool isActivated;\\n  }\\n\\n  /**\\n   * @notice The asset bond data struct.\\n   * @param ipfsHash The IPFS hash that contains the informations and contracts\\n   * between Collateral Service Provider and lender.\\n   * @param maturityTimestamp The amount of time measured in seconds that can elapse\\n   * before the NPL company liquidate the loan and seize the asset bond collateral.\\n   * @param borrower The address of the borrower.\\n   */\\n  struct AssetBondData {\\n    AssetBondState state;\\n    address borrower;\\n    address signer;\\n    address collateralServiceProvider;\\n    uint256 principal;\\n    uint256 debtCeiling;\\n    uint256 couponRate;\\n    uint256 interestRate;\\n    uint256 delinquencyRate;\\n    uint256 loanStartTimestamp;\\n    uint256 collateralizeTimestamp;\\n    uint256 maturityTimestamp;\\n    uint256 liquidationTimestamp;\\n    string ipfsHash; // refactor : gas\\n    string signerOpinionHash;\\n  }\\n\\n  struct AssetBondIdData {\\n    uint256 nonce;\\n    uint256 countryCode;\\n    uint256 collateralServiceProviderIdentificationNumber;\\n    uint256 collateralLatitude;\\n    uint256 collateralLatitudeSign;\\n    uint256 collateralLongitude;\\n    uint256 collateralLongitudeSign;\\n    uint256 collateralDetail;\\n    uint256 collateralCategory;\\n    uint256 productNumber;\\n  }\\n\\n  /**\\n    @notice The states of asset bond\\n    * EMPTY: After\\n    * SETTLED:\\n    * CONFIRMED:\\n    * COLLATERALIZED:\\n    * DELINQUENT:\\n    * REDEEMED:\\n    * LIQUIDATED:\\n   */\\n  enum AssetBondState {\\n    EMPTY,\\n    SETTLED,\\n    CONFIRMED,\\n    COLLATERALIZED,\\n    DELINQUENT,\\n    REDEEMED,\\n    LIQUIDATED\\n  }\\n}\\n\",\"keccak256\":\"0xfef0408a202a6814e92f396333b81c78b4fff0bb1a9411b64afe849ced4ea3b1\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport './WadRayMath.sol';\\n\\nlibrary Math {\\n  using WadRayMath for uint256;\\n\\n  uint256 internal constant SECONDSPERYEAR = 365 days;\\n\\n  function calculateLinearInterest(\\n    uint256 rate,\\n    uint256 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    uint256 timeDelta = currentTimestamp - uint256(lastUpdateTimestamp);\\n\\n    return ((rate * timeDelta) / SECONDSPERYEAR) + WadRayMath.ray();\\n  }\\n\\n  /**\\n   * @notice Author : AAVE\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n   *\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n   *\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate compounded during the timeDelta, in ray\\n   **/\\n  function calculateCompoundedInterest(\\n    uint256 rate,\\n    uint256 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 exp = currentTimestamp - lastUpdateTimestamp;\\n\\n    if (exp == 0) {\\n      return WadRayMath.ray();\\n    }\\n\\n    uint256 expMinusOne = exp - 1;\\n\\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n    // loss of precision is endurable\\n    // slither-disable-next-line divide-before-multiply\\n    uint256 ratePerSecond = rate / SECONDSPERYEAR;\\n\\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n    uint256 secondTerm = (exp * expMinusOne * basePowerTwo) / 2;\\n    uint256 thirdTerm = (exp * expMinusOne * expMinusTwo * basePowerThree) / 6;\\n\\n    return WadRayMath.ray() + (ratePerSecond * exp) + secondTerm + thirdTerm;\\n  }\\n\\n  function calculateRateInIncreasingBalance(\\n    uint256 averageRate,\\n    uint256 totalBalance,\\n    uint256 amountIn,\\n    uint256 rate\\n  ) internal pure returns (uint256, uint256) {\\n    uint256 weightedAverageRate = totalBalance.wadToRay().rayMul(averageRate);\\n    uint256 weightedAmountRate = amountIn.wadToRay().rayMul(rate);\\n\\n    uint256 newTotalBalance = totalBalance + amountIn;\\n    uint256 newAverageRate = (weightedAverageRate + weightedAmountRate).rayDiv(\\n      newTotalBalance.wadToRay()\\n    );\\n\\n    return (newTotalBalance, newAverageRate);\\n  }\\n\\n  function calculateRateInDecreasingBalance(\\n    uint256 averageRate,\\n    uint256 totalBalance,\\n    uint256 amountOut,\\n    uint256 rate\\n  ) internal pure returns (uint256, uint256) {\\n    // if decreasing amount exceeds totalBalance,\\n    // overall rate and balacne would be set 0\\n    if (totalBalance <= amountOut) {\\n      return (0, 0);\\n    }\\n\\n    uint256 weightedAverageRate = totalBalance.wadToRay().rayMul(averageRate);\\n    uint256 weightedAmountRate = amountOut.wadToRay().rayMul(rate);\\n\\n    if (weightedAverageRate <= weightedAmountRate) {\\n      return (0, 0);\\n    }\\n\\n    uint256 newTotalBalance = totalBalance - amountOut;\\n\\n    uint256 newAverageRate = (weightedAverageRate - weightedAmountRate).rayDiv(\\n      newTotalBalance.wadToRay()\\n    );\\n\\n    return (newTotalBalance, newAverageRate);\\n  }\\n}\\n\",\"keccak256\":\"0x8b72d69b39c8f545155657e365f56dc019a35cd65aecc49f039a99a27329e3d5\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Division by Zero');\\n    uint256 halfB = b / 2;\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Division by Zero');\\n    uint256 halfB = b / 2;\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x219da6a5d0c7c597faad6e638a2f0174b75d2ae50ee97314fb4afbc244abf01f\",\"license\":\"MIT\"},\"contracts/logic/Validation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\nimport '../libraries/Math.sol';\\n\\nimport '../interfaces/ILToken.sol';\\n\\nlibrary Validation {\\n  using WadRayMath for uint256;\\n  using Validation for DataStruct.ReserveData;\\n\\n  /**\\n   * @dev Validate Deposit\\n   * Check reserve state\\n   * @param reserve The reserve object\\n   * @param amount Deposit amount\\n   **/\\n  function validateDeposit(DataStruct.ReserveData storage reserve, uint256 amount) public view {\\n    require(amount != 0, 'InvalidAmount');\\n    require(!reserve.isPaused, 'ReservePaused');\\n    require(reserve.isActivated, 'ReserveInactivated');\\n  }\\n\\n  /**\\n   * @dev Validate Withdraw\\n   * Check reserve state\\n   * Check user amount\\n   * Check user total debt(later)\\n   * @param reserve The reserve object\\n   * @param amount Withdraw amount\\n   **/\\n  function validateWithdraw(\\n    DataStruct.ReserveData storage reserve,\\n    address asset,\\n    uint256 amount,\\n    uint256 userLTokenBalance\\n  ) public view {\\n    require(amount != 0, 'InvalidAmount');\\n    require(!reserve.isPaused, 'ReservePaused');\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(amount <= userLTokenBalance, 'InsufficientBalance');\\n    uint256 availableLiquidity = IERC20(asset).balanceOf(reserve.lTokenAddress);\\n    require(availableLiquidity >= amount, 'NotEnoughLiquidity');\\n  }\\n\\n  function validateBorrow(\\n    DataStruct.ReserveData storage reserve,\\n    DataStruct.AssetBondData memory assetBond,\\n    address asset,\\n    uint256 borrowAmount\\n  ) public view {\\n    require(!reserve.isPaused, 'ReservePaused');\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(assetBond.state == DataStruct.AssetBondState.CONFIRMED, 'OnlySignedTokenBorrowAllowed');\\n    require(msg.sender == assetBond.collateralServiceProvider, 'OnlyOwnerBorrowAllowed');\\n    uint256 availableLiquidity = IERC20(asset).balanceOf(reserve.lTokenAddress);\\n    require(availableLiquidity >= borrowAmount, 'NotEnoughLiquidity');\\n    require(block.timestamp >= assetBond.loanStartTimestamp, 'NotTimeForLoanStart');\\n    require(assetBond.loanStartTimestamp + 18 hours >= block.timestamp, 'TimeOutForCollateralize');\\n  }\\n\\n  function validateLTokenTrasfer() internal pure {}\\n\\n  function validateRepay(\\n    DataStruct.ReserveData storage reserve,\\n    DataStruct.AssetBondData memory assetBond\\n  ) public view {\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(block.timestamp < assetBond.liquidationTimestamp, 'LoanExpired');\\n    require(\\n      (assetBond.state == DataStruct.AssetBondState.COLLATERALIZED ||\\n        assetBond.state == DataStruct.AssetBondState.DELINQUENT),\\n      'NotRepayableState'\\n    );\\n  }\\n\\n  function validateLiquidation(\\n    DataStruct.ReserveData storage reserve,\\n    DataStruct.AssetBondData memory assetBond\\n  ) public view {\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(assetBond.state == DataStruct.AssetBondState.LIQUIDATED, 'NotLiquidatbleState');\\n  }\\n\\n  function validateSignAssetBond(DataStruct.AssetBondData storage assetBond) public view {\\n    require(assetBond.state == DataStruct.AssetBondState.SETTLED, 'OnlySettledTokenSignAllowed');\\n    require(assetBond.signer == msg.sender, 'NotAllowedSigner');\\n  }\\n\\n  function validateSettleAssetBond(DataStruct.AssetBondData memory assetBond) public view {\\n    require(block.timestamp < assetBond.loanStartTimestamp, 'OnlySettledSigned');\\n    require(assetBond.loanStartTimestamp != assetBond.maturityTimestamp, 'LoanDurationInvalid');\\n  }\\n\\n  function validateTokenId(DataStruct.AssetBondIdData memory idData) internal pure {\\n    require(idData.collateralLatitude < 9000000, 'InvaildLatitude');\\n    require(idData.collateralLongitude < 18000000, 'InvaildLongitude');\\n  }\\n}\\n\",\"keccak256\":\"0x3786ce94f42a5af20df962cfe40a2c2d198e23db6f67b05a46aed8a45275abef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610cb361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100775760003560e01c80630cf0b0e91461007c57806313a74d6e146100915780631b93853c146100a45780632536dc16146100b75780637559466d146100ca57806396774c94146100dd578063c0265b0c146100f0575b600080fd5b61008f61008a366004610ac4565b610103565b005b61008f61009f366004610a2e565b610385565b61008f6100b2366004610a80565b610448565b61008f6100c53660046109f4565b6104dd565b61008f6100d8366004610a80565b610575565b61008f6100eb366004610b20565b610671565b61008f6100fe366004610a46565b6106e5565b6008840154600160a81b900460ff16156101385760405162461bcd60e51b815260040161012f90610b6d565b60405180910390fd5b6008840154600160b01b900460ff166101635760405162461bcd60e51b815260040161012f90610bbb565b60028351600681111561018657634e487b7160e01b600052602160045260246000fd5b146101d25760405162461bcd60e51b815260206004820152601c60248201527b13db9b1e54da59db9959151bdad95b909bdc9c9bddd05b1b1bddd95960221b604482015260640161012f565b82606001516001600160a01b0316336001600160a01b0316146102305760405162461bcd60e51b815260206004820152601660248201527513db9b1e53dddb995c909bdc9c9bddd05b1b1bddd95960521b604482015260640161012f565b60058401546040516370a0823160e01b81526000916001600160a01b03808616926370a0823192610265921690600401610b59565b60206040518083038186803b15801561027d57600080fd5b505afa158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b59190610b41565b9050818110156102d75760405162461bcd60e51b815260040161012f90610be7565b8361012001514210156103225760405162461bcd60e51b8152602060048201526013602482015272139bdd151a5b59519bdc931bd85b94dd185c9d606a1b604482015260640161012f565b4284610120015161fd206103369190610c43565b101561037e5760405162461bcd60e51b815260206004820152601760248201527654696d654f7574466f72436f6c6c61746572616c697a6560481b604482015260640161012f565b5050505050565b6001815460ff1660068111156103ab57634e487b7160e01b600052602160045260246000fd5b146103f65760405162461bcd60e51b815260206004820152601b60248201527a13db9b1e54d95d1d1b1959151bdad95b94da59db905b1b1bddd959602a1b604482015260640161012f565b60018101546001600160a01b031633146104455760405162461bcd60e51b815260206004820152601060248201526f2737ba20b63637bbb2b229b4b3b732b960811b604482015260640161012f565b50565b6008820154600160b01b900460ff166104735760405162461bcd60e51b815260040161012f90610bbb565b60068151600681111561049657634e487b7160e01b600052602160045260246000fd5b146104d95760405162461bcd60e51b81526020600482015260136024820152724e6f744c69717569646174626c65537461746560681b604482015260640161012f565b5050565b80610120015142106105255760405162461bcd60e51b815260206004820152601160248201527013db9b1e54d95d1d1b195914da59db9959607a1b604482015260640161012f565b80610160015181610120015114156104455760405162461bcd60e51b8152602060048201526013602482015272131bd85b911d5c985d1a5bdb925b9d985b1a59606a1b604482015260640161012f565b6008820154600160b01b900460ff166105a05760405162461bcd60e51b815260040161012f90610bbb565b80610180015142106105e25760405162461bcd60e51b815260206004820152600b60248201526a131bd85b915e1c1a5c995960aa1b604482015260640161012f565b60038151600681111561060557634e487b7160e01b600052602160045260246000fd5b1480610631575060048151600681111561062f57634e487b7160e01b600052602160045260246000fd5b145b6104d95760405162461bcd60e51b81526020600482015260116024820152704e6f74526570617961626c65537461746560781b604482015260640161012f565b8061068e5760405162461bcd60e51b815260040161012f90610b94565b6008820154600160a81b900460ff16156106ba5760405162461bcd60e51b815260040161012f90610b6d565b6008820154600160b01b900460ff166104d95760405162461bcd60e51b815260040161012f90610bbb565b816107025760405162461bcd60e51b815260040161012f90610b94565b6008840154600160a81b900460ff161561072e5760405162461bcd60e51b815260040161012f90610b6d565b6008840154600160b01b900460ff166107595760405162461bcd60e51b815260040161012f90610bbb565b8082111561079f5760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e7442616c616e636560681b604482015260640161012f565b60058401546040516370a0823160e01b81526000916001600160a01b03808716926370a08231926107d4921690600401610b59565b60206040518083038186803b1580156107ec57600080fd5b505afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190610b41565b90508281101561037e5760405162461bcd60e51b815260040161012f90610be7565b80356001600160a01b038116811461085d57600080fd5b919050565b80356007811061085d57600080fd5b600082601f830112610881578081fd5b81356001600160401b0381111561089a5761089a610c67565b6108ad601f8201601f1916602001610c13565b8181528460208386010111156108c1578283fd5b816020850160208301379081016020019190915292915050565b60006101e08083850312156108ee578182fd5b6108f781610c13565b91505061090382610862565b815261091160208301610846565b602082015261092260408301610846565b604082015261093360608301610846565b60608201526080828101359082015260a0808301359082015260c0808301359082015260e08083013590820152610100808301359082015261012080830135908201526101408083013590820152610160808301359082015261018080830135908201526101a0808301356001600160401b03808211156109b357600080fd5b6109bf86838701610871565b838501526101c09250828501359150808211156109db57600080fd5b506109e885828601610871565b82840152505092915050565b600060208284031215610a05578081fd5b81356001600160401b03811115610a1a578182fd5b610a26848285016108db565b949350505050565b600060208284031215610a3f578081fd5b5035919050565b60008060008060808587031215610a5b578283fd5b84359350610a6b60208601610846565b93969395505050506040820135916060013590565b60008060408385031215610a92578182fd5b8235915060208301356001600160401b03811115610aae578182fd5b610aba858286016108db565b9150509250929050565b60008060008060808587031215610ad9578384fd5b8435935060208501356001600160401b03811115610af5578384fd5b610b01878288016108db565b935050610b1060408601610846565b9396929550929360600135925050565b60008060408385031215610b32578182fd5b50508035926020909101359150565b600060208284031215610b52578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6020808252600d908201526c14995cd95c9d9954185d5cd959609a1b604082015260600190565b6020808252600d908201526c125b9d985b1a59105b5bdd5b9d609a1b604082015260600190565b60208082526012908201527114995cd95c9d99525b9858dd1a5d985d195960721b604082015260600190565b6020808252601290820152714e6f74456e6f7567684c697175696469747960701b604082015260600190565b604051601f8201601f191681016001600160401b0381118282101715610c3b57610c3b610c67565b604052919050565b60008219821115610c6257634e487b7160e01b81526011600452602481fd5b500190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212203836e66e72120e48d3f73f841cb4bd25a7aeed2af99fedb6229508b4aabd793364736f6c63430008030033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100775760003560e01c80630cf0b0e91461007c57806313a74d6e146100915780631b93853c146100a45780632536dc16146100b75780637559466d146100ca57806396774c94146100dd578063c0265b0c146100f0575b600080fd5b61008f61008a366004610ac4565b610103565b005b61008f61009f366004610a2e565b610385565b61008f6100b2366004610a80565b610448565b61008f6100c53660046109f4565b6104dd565b61008f6100d8366004610a80565b610575565b61008f6100eb366004610b20565b610671565b61008f6100fe366004610a46565b6106e5565b6008840154600160a81b900460ff16156101385760405162461bcd60e51b815260040161012f90610b6d565b60405180910390fd5b6008840154600160b01b900460ff166101635760405162461bcd60e51b815260040161012f90610bbb565b60028351600681111561018657634e487b7160e01b600052602160045260246000fd5b146101d25760405162461bcd60e51b815260206004820152601c60248201527b13db9b1e54da59db9959151bdad95b909bdc9c9bddd05b1b1bddd95960221b604482015260640161012f565b82606001516001600160a01b0316336001600160a01b0316146102305760405162461bcd60e51b815260206004820152601660248201527513db9b1e53dddb995c909bdc9c9bddd05b1b1bddd95960521b604482015260640161012f565b60058401546040516370a0823160e01b81526000916001600160a01b03808616926370a0823192610265921690600401610b59565b60206040518083038186803b15801561027d57600080fd5b505afa158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b59190610b41565b9050818110156102d75760405162461bcd60e51b815260040161012f90610be7565b8361012001514210156103225760405162461bcd60e51b8152602060048201526013602482015272139bdd151a5b59519bdc931bd85b94dd185c9d606a1b604482015260640161012f565b4284610120015161fd206103369190610c43565b101561037e5760405162461bcd60e51b815260206004820152601760248201527654696d654f7574466f72436f6c6c61746572616c697a6560481b604482015260640161012f565b5050505050565b6001815460ff1660068111156103ab57634e487b7160e01b600052602160045260246000fd5b146103f65760405162461bcd60e51b815260206004820152601b60248201527a13db9b1e54d95d1d1b1959151bdad95b94da59db905b1b1bddd959602a1b604482015260640161012f565b60018101546001600160a01b031633146104455760405162461bcd60e51b815260206004820152601060248201526f2737ba20b63637bbb2b229b4b3b732b960811b604482015260640161012f565b50565b6008820154600160b01b900460ff166104735760405162461bcd60e51b815260040161012f90610bbb565b60068151600681111561049657634e487b7160e01b600052602160045260246000fd5b146104d95760405162461bcd60e51b81526020600482015260136024820152724e6f744c69717569646174626c65537461746560681b604482015260640161012f565b5050565b80610120015142106105255760405162461bcd60e51b815260206004820152601160248201527013db9b1e54d95d1d1b195914da59db9959607a1b604482015260640161012f565b80610160015181610120015114156104455760405162461bcd60e51b8152602060048201526013602482015272131bd85b911d5c985d1a5bdb925b9d985b1a59606a1b604482015260640161012f565b6008820154600160b01b900460ff166105a05760405162461bcd60e51b815260040161012f90610bbb565b80610180015142106105e25760405162461bcd60e51b815260206004820152600b60248201526a131bd85b915e1c1a5c995960aa1b604482015260640161012f565b60038151600681111561060557634e487b7160e01b600052602160045260246000fd5b1480610631575060048151600681111561062f57634e487b7160e01b600052602160045260246000fd5b145b6104d95760405162461bcd60e51b81526020600482015260116024820152704e6f74526570617961626c65537461746560781b604482015260640161012f565b8061068e5760405162461bcd60e51b815260040161012f90610b94565b6008820154600160a81b900460ff16156106ba5760405162461bcd60e51b815260040161012f90610b6d565b6008820154600160b01b900460ff166104d95760405162461bcd60e51b815260040161012f90610bbb565b816107025760405162461bcd60e51b815260040161012f90610b94565b6008840154600160a81b900460ff161561072e5760405162461bcd60e51b815260040161012f90610b6d565b6008840154600160b01b900460ff166107595760405162461bcd60e51b815260040161012f90610bbb565b8082111561079f5760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e7442616c616e636560681b604482015260640161012f565b60058401546040516370a0823160e01b81526000916001600160a01b03808716926370a08231926107d4921690600401610b59565b60206040518083038186803b1580156107ec57600080fd5b505afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190610b41565b90508281101561037e5760405162461bcd60e51b815260040161012f90610be7565b80356001600160a01b038116811461085d57600080fd5b919050565b80356007811061085d57600080fd5b600082601f830112610881578081fd5b81356001600160401b0381111561089a5761089a610c67565b6108ad601f8201601f1916602001610c13565b8181528460208386010111156108c1578283fd5b816020850160208301379081016020019190915292915050565b60006101e08083850312156108ee578182fd5b6108f781610c13565b91505061090382610862565b815261091160208301610846565b602082015261092260408301610846565b604082015261093360608301610846565b60608201526080828101359082015260a0808301359082015260c0808301359082015260e08083013590820152610100808301359082015261012080830135908201526101408083013590820152610160808301359082015261018080830135908201526101a0808301356001600160401b03808211156109b357600080fd5b6109bf86838701610871565b838501526101c09250828501359150808211156109db57600080fd5b506109e885828601610871565b82840152505092915050565b600060208284031215610a05578081fd5b81356001600160401b03811115610a1a578182fd5b610a26848285016108db565b949350505050565b600060208284031215610a3f578081fd5b5035919050565b60008060008060808587031215610a5b578283fd5b84359350610a6b60208601610846565b93969395505050506040820135916060013590565b60008060408385031215610a92578182fd5b8235915060208301356001600160401b03811115610aae578182fd5b610aba858286016108db565b9150509250929050565b60008060008060808587031215610ad9578384fd5b8435935060208501356001600160401b03811115610af5578384fd5b610b01878288016108db565b935050610b1060408601610846565b9396929550929360600135925050565b60008060408385031215610b32578182fd5b50508035926020909101359150565b600060208284031215610b52578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6020808252600d908201526c14995cd95c9d9954185d5cd959609a1b604082015260600190565b6020808252600d908201526c125b9d985b1a59105b5bdd5b9d609a1b604082015260600190565b60208082526012908201527114995cd95c9d99525b9858dd1a5d985d195960721b604082015260600190565b6020808252601290820152714e6f74456e6f7567684c697175696469747960701b604082015260600190565b604051601f8201601f191681016001600160401b0381118282101715610c3b57610c3b610c67565b604052919050565b60008219821115610c6257634e487b7160e01b81526011600452602481fd5b500190565b634e487b7160e01b600052604160045260246000fdfea26469706673582212203836e66e72120e48d3f73f841cb4bd25a7aeed2af99fedb6229508b4aabd793364736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "validateDeposit(DataStruct.ReserveData storage,uint256)": {
        "details": "Validate Deposit Check reserve state",
        "params": {
          "amount": "Deposit amount*",
          "reserve": "The reserve object"
        }
      },
      "validateWithdraw(DataStruct.ReserveData storage,address,uint256,uint256)": {
        "details": "Validate Withdraw Check reserve state Check user amount Check user total debt(later)",
        "params": {
          "amount": "Withdraw amount*",
          "reserve": "The reserve object"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}