{
  "address": "0xa93008fD32EB24E488DDAA6C0aA152559fDa9E8c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxReserveCount_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "connector",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralServiceProvider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAPY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userDTokenBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeOnCollateralServiceProvider",
          "type": "uint256"
        }
      ],
      "name": "Liquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "interestModel",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenizer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "incentivePool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "moneyPoolFactor",
          "type": "uint256"
        }
      ],
      "name": "NewReserve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userDTokenBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeOnCollateralServiceProvider",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "activateMoneyPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "interestModel",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "incentivePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "moneyPoolFactor_",
          "type": "uint256"
        }
      ],
      "name": "addNewReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "deactivateMoneyPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getLTokenInterestIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "moneyPoolFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lTokenInterestIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAPY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositAPY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "interestModelAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenizerAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "id",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isPaused",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isActivated",
              "type": "bool"
            }
          ],
          "internalType": "struct DataStruct.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "pauseMoneyPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "unPauseMoneyPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newIncentivePool",
          "type": "address"
        }
      ],
      "name": "updateIncentivePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4e7d6c7cce2a5dae6b87215965bc12fa5c120ceaa925c4096791a50daffa0fd3",
  "receipt": {
    "to": null,
    "from": "0x715B006d4723977CcDb1581a62948f6354752e62",
    "contractAddress": "0xa93008fD32EB24E488DDAA6C0aA152559fDa9E8c",
    "transactionIndex": 102,
    "gasUsed": "2572026",
    "logsBloom": "0x
    "blockHash": "0x63975cc5e5c490ee771d6338540efbeffdbb8302db80ad715e849abce659fa8e",
    "transactionHash": "0x4e7d6c7cce2a5dae6b87215965bc12fa5c120ceaa925c4096791a50daffa0fd3",
    "logs": [],
    "blockNumber": 12830715,
    "cumulativeGasUsed": "14673388",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "16",
    "0x5c2cE44fF70eF0bD898E2bf37e7da7605D0ae607"
  ],
  "solcInputHash": "0c71cd98fa6269b62417fa18d1fc6779",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxReserveCount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"connector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralServiceProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAPY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userDTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeOnCollateralServiceProvider\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"interestModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"incentivePool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moneyPoolFactor\",\"type\":\"uint256\"}],\"name\":\"NewReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userDTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeOnCollateralServiceProvider\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"activateMoneyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestModel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"moneyPoolFactor_\",\"type\":\"uint256\"}],\"name\":\"addNewReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"deactivateMoneyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getLTokenInterestIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"moneyPoolFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lTokenInterestIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestModelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenizerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActivated\",\"type\":\"bool\"}],\"internalType\":\"struct DataStruct.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"pauseMoneyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"unPauseMoneyPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newIncentivePool\",\"type\":\"address\"}],\"name\":\"updateIncentivePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ELYSIA\",\"details\":\"Only admin can modify the variables and state of the moneypool*\",\"kind\":\"dev\",\"methods\":{\"borrow(address,uint256)\":{\"details\":\"Transfer asset bond from the collateral service provider to the moneypool and mint dTokens  corresponding to principal. After that, transfer the underlying asset\",\"params\":{\"asset\":\"The address of the underlying asset to withdraw\",\"tokenId\":\"The id of the token to collateralize*\"}},\"deposit(address,address,uint256)\":{\"details\":\"Deposits an amount of underlying asset and receive corresponding LTokens.\",\"params\":{\"account\":\"The address that will receive the LToken\",\"amount\":\"Deposit amount*\",\"asset\":\"The address of the underlying asset to deposit\"}},\"getLTokenInterestIndex(address)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The LToken interest index of reserve\"}},\"getReserveData(address)\":{\"details\":\"Returns the reserveData struct of underlying asset\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"},\"returns\":{\"_0\":\"The state of the reserve*\"}},\"repay(address,uint256)\":{\"details\":\"Transfer total repayment of the underlying asset from msg.sender to the moneypool and burn the corresponding amount of dTokens. Then release the asset bond token which is locked in the moneypool and transfer it to the borrower. The total amount of transferred underlying asset is the sum of the fee on the collateral service provider and debt on the moneypool\",\"params\":{\"asset\":\"The address of the underlying asset to repay\",\"tokenId\":\"The id of the token to retrieve*\"}},\"withdraw(address,address,uint256)\":{\"details\":\"Withdraws an amount of underlying asset from the reserve and burns the corresponding lTokens.\",\"params\":{\"account\":\"The address that will receive the underlying asset\",\"amount\":\"Withdrawl amount*\",\"asset\":\"The address of the underlying asset to withdraw\"}}},\"title\":\"Main contract for ELYFI version 1.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(address,uint256)\":{\"notice\":\"The collateral service provider can take out a loan of value equivalent to the principal recorded in the asset bond data. As asset bonds are deposited as collateral in the Money Pool and loans are made, financial services that link real assets and cryptoassets can be achieved.\"},\"deposit(address,address,uint256)\":{\"notice\":\"By depositing virtual assets in the MoneyPool and supply liquidity, depositors can receive interest accruing from the MoneyPool.The return on the deposit arises from the interest on real asset backed loans. MoneyPool depositors who deposit certain cryptoassets receives LTokens equivalent to the deposit amount. LTokens are backed by cryptoassets deposited in the MoneyPool in a 1:1 ratio.\"},\"getLTokenInterestIndex(address)\":{\"notice\":\"LToken Index is an indicator of interest occurring and accrued to liquidity providers who have provided liquidity to the Money Pool. LToken Index is calculated every time user activities occur in the Money Pool, such as loans and repayments by Money Pool participants.\"},\"repay(address,uint256)\":{\"notice\":\"repays an amount of underlying asset from the reserve and burns the corresponding lTokens.\"},\"withdraw(address,address,uint256)\":{\"notice\":\"The depositors can seize their virtual assets deposited in the MoneyPool whenever they wish.\"}},\"notice\":\"This is the first version of ELYFI. ELYFI has various contract interactions centered on the Money Pool Contract. Several tokens are issued or destroyed to indicate the status of participants, and all issuance and burn processes are carried out through the Money Pool Contract. The depositor and borrower should approve the ELYFI moneypool contract to move their AssetBond token or ERC20 tokens on their behalf.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MoneyPool.sol\":\"MoneyPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/MoneyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './libraries/DataStruct.sol';\\n\\nimport './logic/Index.sol';\\nimport './logic/Rate.sol';\\nimport './logic/Validation.sol';\\nimport './logic/AssetBond.sol';\\n\\nimport './interfaces/ILToken.sol';\\nimport './interfaces/IDToken.sol';\\nimport './interfaces/IMoneyPool.sol';\\nimport './interfaces/IIncentivePool.sol';\\nimport './interfaces/ITokenizer.sol';\\n\\nimport './MoneyPoolStorage.sol';\\n\\n/**\\n * @title Main contract for ELYFI version 1.\\n * @author ELYSIA\\n * @notice This is the first version of ELYFI. ELYFI has various contract interactions centered\\n * on the Money Pool Contract. Several tokens are issued or destroyed to indicate the status of\\n * participants, and all issuance and burn processes are carried out through the Money Pool Contract.\\n * The depositor and borrower should approve the ELYFI moneypool contract to move their AssetBond token\\n * or ERC20 tokens on their behalf.\\n * @dev Only admin can modify the variables and state of the moneypool\\n **/\\ncontract MoneyPool is IMoneyPool, MoneyPoolStorage {\\n  using SafeERC20 for IERC20;\\n  using Index for DataStruct.ReserveData;\\n  using Validation for DataStruct.ReserveData;\\n  using Rate for DataStruct.ReserveData;\\n  using AssetBond for DataStruct.AssetBondData;\\n\\n  constructor(uint256 maxReserveCount_, address connector) {\\n    _connector = IConnector(connector);\\n    _maxReserveCount = maxReserveCount_;\\n    _reserveCount += 1;\\n  }\\n\\n  /************ MoneyPool Deposit Functions ************/\\n\\n  /**\\n   * @notice By depositing virtual assets in the MoneyPool and supply liquidity, depositors can receive\\n   * interest accruing from the MoneyPool.The return on the deposit arises from the interest on real asset\\n   * backed loans. MoneyPool depositors who deposit certain cryptoassets receives LTokens equivalent to\\n   * the deposit amount. LTokens are backed by cryptoassets deposited in the MoneyPool in a 1:1 ratio.\\n   * @dev Deposits an amount of underlying asset and receive corresponding LTokens.\\n   * @param asset The address of the underlying asset to deposit\\n   * @param account The address that will receive the LToken\\n   * @param amount Deposit amount\\n   **/\\n  function deposit(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external override {\\n    DataStruct.ReserveData storage reserve = _reserves[asset];\\n\\n    Validation.validateDeposit(reserve, amount);\\n\\n    reserve.updateState(asset);\\n\\n    reserve.updateRates(asset, amount, 0);\\n\\n    IERC20(asset).safeTransferFrom(msg.sender, reserve.lTokenAddress, amount);\\n\\n    ILToken(reserve.lTokenAddress).mint(account, amount, reserve.lTokenInterestIndex);\\n\\n    emit Deposit(asset, account, amount);\\n  }\\n\\n  /**\\n   * @notice The depositors can seize their virtual assets deposited in the MoneyPool whenever they wish.\\n   * @dev Withdraws an amount of underlying asset from the reserve and burns the corresponding lTokens.\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param account The address that will receive the underlying asset\\n   * @param amount Withdrawl amount\\n   **/\\n  function withdraw(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external override {\\n    DataStruct.ReserveData storage reserve = _reserves[asset];\\n\\n    uint256 userLTokenBalance = ILToken(reserve.lTokenAddress).balanceOf(msg.sender);\\n\\n    uint256 amountToWithdraw = amount;\\n\\n    if (amount == type(uint256).max) {\\n      amountToWithdraw = userLTokenBalance;\\n    }\\n\\n    Validation.validateWithdraw(reserve, asset, amountToWithdraw, userLTokenBalance);\\n\\n    reserve.updateState(asset);\\n\\n    reserve.updateRates(asset, 0, amountToWithdraw);\\n\\n    ILToken(reserve.lTokenAddress).burn(\\n      msg.sender,\\n      account,\\n      amountToWithdraw,\\n      reserve.lTokenInterestIndex\\n    );\\n\\n    emit Withdraw(asset, msg.sender, account, amountToWithdraw);\\n  }\\n\\n  /************ AssetBond Formation Functions ************/\\n\\n  /**\\n   * @notice The collateral service provider can take out a loan of value equivalent to the principal\\n   * recorded in the asset bond data. As asset bonds are deposited as collateral in the Money Pool\\n   * and loans are made, financial services that link real assets and cryptoassets can be achieved.\\n   * @dev Transfer asset bond from the collateral service provider to the moneypool and mint dTokens\\n   *  corresponding to principal. After that, transfer the underlying asset\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param tokenId The id of the token to collateralize\\n   **/\\n  function borrow(address asset, uint256 tokenId) external override {\\n    require(_connector.isCollateralServiceProvider(msg.sender), 'OnlyCollateralServiceProvider');\\n    DataStruct.ReserveData storage reserve = _reserves[asset];\\n    DataStruct.AssetBondData memory assetBond = ITokenizer(reserve.tokenizerAddress)\\n    .getAssetBondData(tokenId);\\n\\n    uint256 borrowAmount = assetBond.principal;\\n    address receiver = assetBond.borrower;\\n\\n    Validation.validateBorrow(reserve, assetBond, asset, borrowAmount);\\n\\n    reserve.updateState(asset);\\n\\n    ITokenizer(reserve.tokenizerAddress).collateralizeAssetBond(\\n      msg.sender,\\n      tokenId,\\n      borrowAmount,\\n      reserve.borrowAPY\\n    );\\n\\n    IDToken(reserve.dTokenAddress).mint(msg.sender, receiver, borrowAmount, reserve.borrowAPY);\\n\\n    reserve.updateRates(asset, 0, borrowAmount);\\n\\n    ILToken(reserve.lTokenAddress).transferUnderlyingTo(receiver, borrowAmount);\\n\\n    emit Borrow(asset, msg.sender, receiver, tokenId, reserve.borrowAPY, borrowAmount);\\n  }\\n\\n  /**\\n   * @notice repays an amount of underlying asset from the reserve and burns the corresponding lTokens.\\n   * @dev Transfer total repayment of the underlying asset from msg.sender to the moneypool and\\n   * burn the corresponding amount of dTokens. Then release the asset bond token which is locked\\n   * in the moneypool and transfer it to the borrower. The total amount of transferred underlying asset\\n   * is the sum of the fee on the collateral service provider and debt on the moneypool\\n   * @param asset The address of the underlying asset to repay\\n   * @param tokenId The id of the token to retrieve\\n   **/\\n  function repay(address asset, uint256 tokenId) external override {\\n    DataStruct.ReserveData storage reserve = _reserves[asset];\\n    DataStruct.AssetBondData memory assetBond = ITokenizer(reserve.tokenizerAddress)\\n    .getAssetBondData(tokenId);\\n\\n    Validation.validateRepay(reserve, assetBond);\\n\\n    (uint256 accruedDebtOnMoneyPool, uint256 feeOnCollateralServiceProvider) = assetBond\\n    .getAssetBondDebtData();\\n\\n    uint256 totalRetrieveAmount = accruedDebtOnMoneyPool + feeOnCollateralServiceProvider;\\n\\n    reserve.updateState(asset);\\n\\n    IERC20(asset).safeTransferFrom(msg.sender, reserve.lTokenAddress, totalRetrieveAmount);\\n\\n    IDToken(reserve.dTokenAddress).burn(assetBond.borrower, accruedDebtOnMoneyPool);\\n\\n    reserve.updateRates(asset, totalRetrieveAmount, 0);\\n\\n    ITokenizer(reserve.tokenizerAddress).releaseAssetBond(assetBond.borrower, tokenId);\\n\\n    ILToken(reserve.lTokenAddress).mint(\\n      assetBond.collateralServiceProvider,\\n      feeOnCollateralServiceProvider,\\n      reserve.lTokenInterestIndex\\n    );\\n\\n    emit Repay(\\n      asset,\\n      assetBond.borrower,\\n      tokenId,\\n      accruedDebtOnMoneyPool,\\n      feeOnCollateralServiceProvider\\n    );\\n  }\\n\\n  function liquidate(address asset, uint256 tokenId) external override {\\n    require(_connector.isCollateralServiceProvider(msg.sender), 'OnlyCollateralServiceProvider');\\n    DataStruct.ReserveData storage reserve = _reserves[asset];\\n    DataStruct.AssetBondData memory assetBond = ITokenizer(reserve.tokenizerAddress)\\n    .getAssetBondData(tokenId);\\n\\n    Validation.validateLiquidation(reserve, assetBond);\\n\\n    (uint256 accruedDebtOnMoneyPool, uint256 feeOnCollateralServiceProvider) = assetBond\\n    .getAssetBondLiquidationData();\\n\\n    uint256 totalLiquidationAmount = accruedDebtOnMoneyPool + feeOnCollateralServiceProvider;\\n\\n    reserve.updateState(asset);\\n\\n    IDToken(reserve.dTokenAddress).burn(assetBond.borrower, accruedDebtOnMoneyPool);\\n\\n    reserve.updateRates(asset, totalLiquidationAmount, 0);\\n\\n    IERC20(asset).safeTransferFrom(msg.sender, reserve.lTokenAddress, totalLiquidationAmount);\\n\\n    ITokenizer(reserve.tokenizerAddress).liquidateAssetBond(msg.sender, tokenId);\\n\\n    ILToken(reserve.lTokenAddress).mint(\\n      assetBond.collateralServiceProvider,\\n      feeOnCollateralServiceProvider,\\n      reserve.lTokenInterestIndex\\n    );\\n\\n    emit Liquidation(\\n      asset,\\n      assetBond.borrower,\\n      tokenId,\\n      accruedDebtOnMoneyPool,\\n      feeOnCollateralServiceProvider\\n    );\\n  }\\n\\n  /************ View Functions ************/\\n\\n  /**\\n   * @notice LToken Index is an indicator of interest occurring and accrued to liquidity providers\\n   * who have provided liquidity to the Money Pool. LToken Index is calculated every time user activities\\n   * occur in the Money Pool, such as loans and repayments by Money Pool participants.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The LToken interest index of reserve\\n   */\\n  function getLTokenInterestIndex(address asset) external view override returns (uint256) {\\n    return _reserves[asset].getLTokenInterestIndex();\\n  }\\n\\n  /**\\n   * @dev Returns the reserveData struct of underlying asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset)\\n    external\\n    view\\n    override\\n    returns (DataStruct.ReserveData memory)\\n  {\\n    return _reserves[asset];\\n  }\\n\\n  /************ Configuration Functions ************/\\n\\n  function addNewReserve(\\n    address asset,\\n    address lToken,\\n    address dToken,\\n    address interestModel,\\n    address tokenizer,\\n    address incentivePool,\\n    uint256 moneyPoolFactor_\\n  ) external override onlyMoneyPoolAdmin {\\n    DataStruct.ReserveData memory newReserveData = DataStruct.ReserveData({\\n      moneyPoolFactor: moneyPoolFactor_,\\n      lTokenInterestIndex: WadRayMath.ray(),\\n      borrowAPY: 0,\\n      depositAPY: 0,\\n      lastUpdateTimestamp: block.timestamp,\\n      lTokenAddress: lToken,\\n      dTokenAddress: dToken,\\n      interestModelAddress: interestModel,\\n      tokenizerAddress: tokenizer,\\n      id: 0,\\n      isPaused: false,\\n      isActivated: true\\n    });\\n\\n    _reserves[asset] = newReserveData;\\n    _addNewReserveToList(asset);\\n\\n    IIncentivePool(incentivePool).initializeIncentivePool(lToken);\\n\\n    emit NewReserve(\\n      asset,\\n      lToken,\\n      dToken,\\n      interestModel,\\n      tokenizer,\\n      incentivePool,\\n      moneyPoolFactor_\\n    );\\n  }\\n\\n  function _addNewReserveToList(address asset) internal {\\n    uint256 reserveCount = _reserveCount;\\n\\n    require(reserveCount < _maxReserveCount, 'MaxReserveCountExceeded');\\n\\n    require(_reserves[asset].id == 0, 'DigitalAssetAlreadyAdded');\\n\\n    _reserves[asset].id = uint8(reserveCount);\\n    _reservesList[reserveCount] = asset;\\n\\n    _reserveCount = reserveCount + 1;\\n  }\\n\\n  function deactivateMoneyPool(address asset) external onlyMoneyPoolAdmin {\\n    _reserves[asset].isActivated = false;\\n  }\\n\\n  function activateMoneyPool(address asset) external onlyMoneyPoolAdmin {\\n    _reserves[asset].isActivated = true;\\n  }\\n\\n  function pauseMoneyPool(address asset) external onlyMoneyPoolAdmin {\\n    _reserves[asset].isPaused = true;\\n  }\\n\\n  function unPauseMoneyPool(address asset) external onlyMoneyPoolAdmin {\\n    _reserves[asset].isPaused = false;\\n  }\\n\\n  function updateIncentivePool(address asset, address newIncentivePool)\\n    external\\n    onlyMoneyPoolAdmin\\n  {\\n    DataStruct.ReserveData storage reserve = _reserves[asset];\\n    ILToken(reserve.lTokenAddress).updateIncentivePool(newIncentivePool);\\n  }\\n\\n  modifier onlyMoneyPoolAdmin {\\n    require(_connector.isMoneyPoolAdmin(msg.sender), 'OnlyMoneyPoolAdmin');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xd83161179102c4e6724fa6a0e32e7dc6739f750fea1b1af0cfca0ecc50abfdb6\",\"license\":\"MIT\"},\"contracts/MoneyPoolStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport './libraries/DataStruct.sol';\\n\\nimport './logic/Index.sol';\\n\\nimport './interfaces/IConnector.sol';\\n\\ncontract MoneyPoolStorage {\\n  using Index for DataStruct.ReserveData;\\n\\n  mapping(address => DataStruct.ReserveData) internal _reserves;\\n\\n  mapping(uint256 => address) internal _reservesList;\\n\\n  uint256 internal _reserveCount;\\n\\n  uint256 internal _maxReserveCount;\\n\\n  IConnector internal _connector;\\n}\\n\",\"keccak256\":\"0x46a2578ac4eeedc6806ef3fca7808e73ecd8142b947e23d3369949e1da46b110\",\"license\":\"MIT\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface IConnector {\\n  /**\\n   * @notice Emitted when an admin adds a council role\\n   **/\\n  event NewCouncilAdded(address indexed account);\\n\\n  /**\\n   * @notice Emitted when an admin adds a collateral service provider role\\n   **/\\n  event NewCollateralServiceProviderAdded(address indexed account);\\n\\n  /**\\n   * @notice Emitted when a council role is revoked by admin\\n   **/\\n  event CouncilRevoked(address indexed account);\\n\\n  /**\\n   * @notice Emitted when a collateral service provider role is revoked by admin\\n   **/\\n  event CollateralServiceProviderRevoked(address indexed account);\\n\\n  function isCollateralServiceProvider(address account) external view returns (bool);\\n\\n  function isCouncil(address account) external view returns (bool);\\n\\n  function isMoneyPoolAdmin(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8d00f13d4b3f1d2b43209c0e6921321c976376f93bed9db3e2a285a0881da9de\",\"license\":\"MIT\"},\"contracts/interfaces/IDToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\ninterface IDToken is IERC20Metadata {\\n  /**\\n   * @dev Emitted when new stable debt is minted\\n   * @param account The address of the account who triggered the minting\\n   * @param receiver The recipient of stable debt tokens\\n   * @param amount The amount minted\\n   * @param currentBalance The current balance of the account\\n   * @param balanceIncrease The increase in balance since the last action of the account\\n   * @param newRate The rate of the debt after the minting\\n   * @param avgStableRate The new average stable rate after the minting\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Mint(\\n    address indexed account,\\n    address indexed receiver,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 newRate,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Emitted when new stable debt is burned\\n   * @param account The address of the account\\n   * @param amount The amount being burned\\n   * @param currentBalance The current balance of the account\\n   * @param balanceIncrease The the increase in balance since the last action of the account\\n   * @param avgStableRate The new average stable rate after the burning\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Burn(\\n    address indexed account,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Mints debt token to the `receiver` address.\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param account The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `receiver` otherwise\\n   * @param receiver The address receiving the debt tokens\\n   * @param amount The amount of debt tokens to mint\\n   * @param rate The rate of the debt being minted\\n   **/\\n  function mint(\\n    address account,\\n    address receiver,\\n    uint256 amount,\\n    uint256 rate\\n  ) external;\\n\\n  /**\\n   * @dev Burns debt of `account`\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param account The address of the account getting his debt burned\\n   * @param amount The amount of debt tokens getting burned\\n   **/\\n  function burn(address account, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the average rate of all the stable rate loans.\\n   * @return The average stable rate\\n   **/\\n  function getTotalAverageRealAssetBorrowRate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the stable rate of the account debt\\n   * @return The stable rate of the account\\n   **/\\n  function getUserAverageRealAssetBorrowRate(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the account\\n   * @return The timestamp\\n   **/\\n  function getUserLastUpdateTimestamp(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the principal, the total supply and the average stable rate\\n   **/\\n  function getDTokenData()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the total supply\\n   * @return The timestamp\\n   **/\\n  function getTotalSupplyLastUpdated() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total supply and the average stable rate\\n   **/\\n  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the principal debt balance of the account\\n   * @return The debt balance of the account since the last burn/mint action\\n   **/\\n  function principalBalanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcf44ee2e3e9072e961ccd212e104e70c71ce16b8338e392ca0c265d7ca85e0eb\",\"license\":\"MIT\"},\"contracts/interfaces/IIncentivePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface IIncentivePool {\\n  event ClaimIncentive(address indexed user, uint256 claimedIncentive, uint256 userIncentiveIndex);\\n\\n  event UpdateIncentivePool(address indexed user, uint256 accruedIncentive, uint256 incentiveIndex);\\n\\n  event IncentivePoolEnded();\\n\\n  function initializeIncentivePool(address lToken) external;\\n\\n  function updateIncentivePool(address user) external;\\n\\n  function beforeTokenTransfer(address from, address to) external;\\n\\n  function claimIncentive() external;\\n\\n  function withdrawResidue() external;\\n}\\n\",\"keccak256\":\"0x46602ac32876ca0a58c7b972f1b63f572ac1db4fee243fa9723e0af3ce303607\",\"license\":\"MIT\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface IInterestRateModel {\\n  function calculateRates(\\n    uint256 lTokenAssetBalance,\\n    uint256 totalDTokenBalance,\\n    uint256 depositAmount,\\n    uint256 borrowAmount,\\n    uint256 moneyPoolFactor\\n  ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x98e3452a0d0d50c9bb581353c5a897c7714ae8ab9b3bac80b9373dc28d163138\",\"license\":\"MIT\"},\"contracts/interfaces/ILToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ILToken is IERC20 {\\n  /**\\n   * @dev Emitted after lTokens are minted\\n   * @param account The receiver of minted lToken\\n   * @param amount The amount being minted\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed account, uint256 amount, uint256 index);\\n\\n  /**\\n   * @dev Emitted after lTokens are burned\\n   * @param account The owner of the lTokens, getting them burned\\n   * @param underlyingAssetReceiver The address that will receive the underlying asset\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(\\n    address indexed account,\\n    address indexed underlyingAssetReceiver,\\n    uint256 amount,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param account The account whose tokens are being transferred\\n   * @param to The recipient\\n   * @param amount The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed account, address indexed to, uint256 amount, uint256 index);\\n\\n  function mint(\\n    address account,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Burns lTokens account `account` and sends the equivalent amount of underlying to `receiver`\\n   * @param account The owner of the lTokens, getting them burned\\n   * @param receiver The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address account,\\n    address receiver,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this LTokens (E.g. WETH for aWETH)\\n   **/\\n  function getUnderlyingAsset() external view returns (address);\\n\\n  function implicitBalanceOf(address account) external view returns (uint256);\\n\\n  function implicitTotalSupply() external view returns (uint256);\\n\\n  function transferUnderlyingTo(address underlyingAssetReceiver, uint256 amount) external;\\n\\n  function updateIncentivePool(address newIncentivePool) external;\\n}\\n\",\"keccak256\":\"0xd1c7fbacda21b3f118c9c380b6294fba5a812f8af2605dab957da0296e6bf8e6\",\"license\":\"MIT\"},\"contracts/interfaces/IMoneyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface IMoneyPool {\\n  event NewReserve(\\n    address indexed asset,\\n    address lToken,\\n    address dToken,\\n    address interestModel,\\n    address tokenizer,\\n    address incentivePool,\\n    uint256 moneyPoolFactor\\n  );\\n\\n  event Deposit(address indexed asset, address indexed account, uint256 amount);\\n\\n  event Withdraw(\\n    address indexed asset,\\n    address indexed account,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  event Borrow(\\n    address indexed asset,\\n    address indexed collateralServiceProvider,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 borrowAPY,\\n    uint256 borrowAmount\\n  );\\n\\n  event Repay(\\n    address indexed asset,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 userDTokenBalance,\\n    uint256 feeOnCollateralServiceProvider\\n  );\\n\\n  event Liquidation(\\n    address indexed asset,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 userDTokenBalance,\\n    uint256 feeOnCollateralServiceProvider\\n  );\\n\\n  function deposit(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external;\\n\\n  function withdraw(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external;\\n\\n  function borrow(address asset, uint256 tokenID) external;\\n\\n  function repay(address asset, uint256 tokenId) external;\\n\\n  function liquidate(address asset, uint256 tokenId) external;\\n\\n  function getLTokenInterestIndex(address asset) external view returns (uint256);\\n\\n  function getReserveData(address asset) external view returns (DataStruct.ReserveData memory);\\n\\n  function addNewReserve(\\n    address asset,\\n    address lToken,\\n    address dToken,\\n    address interestModel,\\n    address tokenizer,\\n    address incentivePool,\\n    uint256 moneyPoolFactor_\\n  ) external;\\n}\\n\",\"keccak256\":\"0x36ca1cfa806be7e8f1b1681faeda0f1dc4a26462728aa403b73e4eef12567ef1\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/DataStruct.sol';\\n\\ninterface ITokenizer is IERC721 {\\n  /**\\n   * @notice Emitted when a collateral service provider mints an empty asset bond token.\\n   * @param account The address of collateral service provider who minted\\n   * @param tokenId The id of minted token\\n   **/\\n  event EmptyAssetBondMinted(address indexed account, uint256 tokenId);\\n\\n  /**\\n   * @notice Emitted when a collateral service provider mints an empty asset bond token.\\n   **/\\n  event AssetBondSettled(\\n    address indexed borrower,\\n    address indexed signer,\\n    uint256 tokenId,\\n    uint256 principal,\\n    uint256 couponRate,\\n    uint256 delinquencyRate,\\n    uint256 debtCeiling,\\n    uint256 maturityTimestamp,\\n    uint256 liquidationTimestamp,\\n    uint256 loanStartTimestamp,\\n    string ifpsHash\\n  );\\n\\n  event AssetBondSigned(address indexed signer, uint256 tokenId, string signerOpinionHash);\\n\\n  event AssetBondCollateralized(\\n    address indexed account,\\n    uint256 tokenId,\\n    uint256 borrowAmount,\\n    uint256 interestRate\\n  );\\n\\n  event AssetBondReleased(address indexed borrower, uint256 tokenId);\\n\\n  event AssetBondLiquidated(address indexed liquidator, uint256 tokenId);\\n\\n  function mintAssetBond(address account, uint256 id) external;\\n\\n  function collateralizeAssetBond(\\n    address collateralServiceProvider,\\n    uint256 tokenId,\\n    uint256 borrowAmount,\\n    uint256 borrowAPY\\n  ) external;\\n\\n  function releaseAssetBond(address account, uint256 tokenId) external;\\n\\n  function liquidateAssetBond(address account, uint256 tokenId) external;\\n\\n  function getAssetBondIdData(uint256 tokenId)\\n    external\\n    view\\n    returns (DataStruct.AssetBondIdData memory);\\n\\n  function getAssetBondData(uint256 tokenId)\\n    external\\n    view\\n    returns (DataStruct.AssetBondData memory);\\n\\n  function getAssetBondDebtData(uint256 tokenId) external view returns (uint256, uint256);\\n\\n  function getMinter(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xbf93496db22cbfc22baf0f49fe78bc97807d9139a9589191d8bef4fcb739d727\",\"license\":\"MIT\"},\"contracts/libraries/DataStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nlibrary DataStruct {\\n  /**\\n    @notice The main reserve data struct.\\n   */\\n  struct ReserveData {\\n    uint256 moneyPoolFactor;\\n    uint256 lTokenInterestIndex;\\n    uint256 borrowAPY;\\n    uint256 depositAPY;\\n    uint256 lastUpdateTimestamp;\\n    address lTokenAddress;\\n    address dTokenAddress;\\n    address interestModelAddress;\\n    address tokenizerAddress;\\n    uint8 id;\\n    bool isPaused;\\n    bool isActivated;\\n  }\\n\\n  /**\\n   * @notice The asset bond data struct.\\n   * @param ipfsHash The IPFS hash that contains the informations and contracts\\n   * between Collateral Service Provider and lender.\\n   * @param maturityTimestamp The amount of time measured in seconds that can elapse\\n   * before the NPL company liquidate the loan and seize the asset bond collateral.\\n   * @param borrower The address of the borrower.\\n   */\\n  struct AssetBondData {\\n    AssetBondState state;\\n    address borrower;\\n    address signer;\\n    address collateralServiceProvider;\\n    uint256 principal;\\n    uint256 debtCeiling;\\n    uint256 couponRate;\\n    uint256 interestRate;\\n    uint256 delinquencyRate;\\n    uint256 loanStartTimestamp;\\n    uint256 collateralizeTimestamp;\\n    uint256 maturityTimestamp;\\n    uint256 liquidationTimestamp;\\n    string ipfsHash; // refactor : gas\\n    string signerOpinionHash;\\n  }\\n\\n  struct AssetBondIdData {\\n    uint256 nonce;\\n    uint256 countryCode;\\n    uint256 collateralServiceProviderIdentificationNumber;\\n    uint256 collateralLatitude;\\n    uint256 collateralLatitudeSign;\\n    uint256 collateralLongitude;\\n    uint256 collateralLongitudeSign;\\n    uint256 collateralDetail;\\n    uint256 collateralCategory;\\n    uint256 productNumber;\\n  }\\n\\n  /**\\n    @notice The states of asset bond\\n    * EMPTY: After\\n    * SETTLED:\\n    * CONFIRMED:\\n    * COLLATERALIZED:\\n    * DELINQUENT:\\n    * REDEEMED:\\n    * LIQUIDATED:\\n   */\\n  enum AssetBondState {\\n    EMPTY,\\n    SETTLED,\\n    CONFIRMED,\\n    COLLATERALIZED,\\n    DELINQUENT,\\n    REDEEMED,\\n    LIQUIDATED\\n  }\\n}\\n\",\"keccak256\":\"0xfef0408a202a6814e92f396333b81c78b4fff0bb1a9411b64afe849ced4ea3b1\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport './WadRayMath.sol';\\n\\nlibrary Math {\\n  using WadRayMath for uint256;\\n\\n  uint256 internal constant SECONDSPERYEAR = 365 days;\\n\\n  function calculateLinearInterest(\\n    uint256 rate,\\n    uint256 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    uint256 timeDelta = currentTimestamp - uint256(lastUpdateTimestamp);\\n\\n    return ((rate * timeDelta) / SECONDSPERYEAR) + WadRayMath.ray();\\n  }\\n\\n  /**\\n   * @notice Author : AAVE\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n   *\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n   *\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate compounded during the timeDelta, in ray\\n   **/\\n  function calculateCompoundedInterest(\\n    uint256 rate,\\n    uint256 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 exp = currentTimestamp - lastUpdateTimestamp;\\n\\n    if (exp == 0) {\\n      return WadRayMath.ray();\\n    }\\n\\n    uint256 expMinusOne = exp - 1;\\n\\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n    // loss of precision is endurable\\n    // slither-disable-next-line divide-before-multiply\\n    uint256 ratePerSecond = rate / SECONDSPERYEAR;\\n\\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n    uint256 secondTerm = (exp * expMinusOne * basePowerTwo) / 2;\\n    uint256 thirdTerm = (exp * expMinusOne * expMinusTwo * basePowerThree) / 6;\\n\\n    return WadRayMath.ray() + (ratePerSecond * exp) + secondTerm + thirdTerm;\\n  }\\n\\n  function calculateRateInIncreasingBalance(\\n    uint256 averageRate,\\n    uint256 totalBalance,\\n    uint256 amountIn,\\n    uint256 rate\\n  ) internal pure returns (uint256, uint256) {\\n    uint256 weightedAverageRate = totalBalance.wadToRay().rayMul(averageRate);\\n    uint256 weightedAmountRate = amountIn.wadToRay().rayMul(rate);\\n\\n    uint256 newTotalBalance = totalBalance + amountIn;\\n    uint256 newAverageRate = (weightedAverageRate + weightedAmountRate).rayDiv(\\n      newTotalBalance.wadToRay()\\n    );\\n\\n    return (newTotalBalance, newAverageRate);\\n  }\\n\\n  function calculateRateInDecreasingBalance(\\n    uint256 averageRate,\\n    uint256 totalBalance,\\n    uint256 amountOut,\\n    uint256 rate\\n  ) internal pure returns (uint256, uint256) {\\n    // if decreasing amount exceeds totalBalance,\\n    // overall rate and balacne would be set 0\\n    if (totalBalance <= amountOut) {\\n      return (0, 0);\\n    }\\n\\n    uint256 weightedAverageRate = totalBalance.wadToRay().rayMul(averageRate);\\n    uint256 weightedAmountRate = amountOut.wadToRay().rayMul(rate);\\n\\n    if (weightedAverageRate <= weightedAmountRate) {\\n      return (0, 0);\\n    }\\n\\n    uint256 newTotalBalance = totalBalance - amountOut;\\n\\n    uint256 newAverageRate = (weightedAverageRate - weightedAmountRate).rayDiv(\\n      newTotalBalance.wadToRay()\\n    );\\n\\n    return (newTotalBalance, newAverageRate);\\n  }\\n}\\n\",\"keccak256\":\"0x8b72d69b39c8f545155657e365f56dc019a35cd65aecc49f039a99a27329e3d5\",\"license\":\"MIT\"},\"contracts/libraries/TimeConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @title Ethereum timestamp conversion library\\n * @author ethereum-datatime\\n */\\nlibrary TimeConverter {\\n  struct DateTime {\\n    uint16 year;\\n    uint8 month;\\n    uint8 day;\\n    uint8 hour;\\n    uint8 minute;\\n    uint8 second;\\n    uint8 weekday;\\n  }\\n\\n  uint256 constant DAY_IN_SECONDS = 86400;\\n  uint256 constant YEAR_IN_SECONDS = 31536000;\\n  uint256 constant LEAP_YEAR_IN_SECONDS = 31622400;\\n\\n  uint256 constant HOUR_IN_SECONDS = 3600;\\n  uint256 constant MINUTE_IN_SECONDS = 60;\\n\\n  uint16 constant ORIGIN_YEAR = 1970;\\n\\n  function isLeapYear(uint16 year) internal pure returns (bool) {\\n    if (year % 4 != 0) {\\n      return false;\\n    }\\n    if (year % 100 != 0) {\\n      return true;\\n    }\\n    if (year % 400 != 0) {\\n      return false;\\n    }\\n    return true;\\n  }\\n\\n  function leapYearsBefore(uint256 year) internal pure returns (uint256) {\\n    year -= 1;\\n    return year / 4 - year / 100 + year / 400;\\n  }\\n\\n  function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\\n    if (\\n      month == 1 ||\\n      month == 3 ||\\n      month == 5 ||\\n      month == 7 ||\\n      month == 8 ||\\n      month == 10 ||\\n      month == 12\\n    ) {\\n      return 31;\\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\\n      return 30;\\n    } else if (isLeapYear(year)) {\\n      return 29;\\n    } else {\\n      return 28;\\n    }\\n  }\\n\\n  function parseTimestamp(uint256 timestamp) public pure returns (DateTime memory dateTime) {\\n    uint256 secondsAccountedFor = 0;\\n    uint256 buf;\\n    uint8 i;\\n\\n    // Year\\n    dateTime.year = getYear(timestamp);\\n    buf = leapYearsBefore(dateTime.year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (dateTime.year - ORIGIN_YEAR - buf);\\n\\n    // Month\\n    uint256 secondsInMonth;\\n    for (i = 1; i <= 12; i++) {\\n      secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dateTime.year);\\n      if (secondsInMonth + secondsAccountedFor > timestamp) {\\n        dateTime.month = i;\\n        break;\\n      }\\n      secondsAccountedFor += secondsInMonth;\\n    }\\n\\n    // Day\\n    for (i = 1; i <= getDaysInMonth(dateTime.month, dateTime.year); i++) {\\n      if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\\n        dateTime.day = i;\\n        break;\\n      }\\n      secondsAccountedFor += DAY_IN_SECONDS;\\n    }\\n\\n    // Hour\\n    dateTime.hour = getHour(timestamp);\\n    // Minute\\n    dateTime.minute = getMinute(timestamp);\\n    // Second\\n    dateTime.second = getSecond(timestamp);\\n    // Day of week.\\n    dateTime.weekday = getWeekday(timestamp);\\n  }\\n\\n  function getYear(uint256 timestamp) internal pure returns (uint16) {\\n    uint256 secondsAccountedFor = 0;\\n    uint16 year;\\n    uint256 numLeapYears;\\n\\n    // Year\\n    year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\n    numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\\n\\n    while (secondsAccountedFor > timestamp) {\\n      if (isLeapYear(uint16(year - 1))) {\\n        secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        secondsAccountedFor -= YEAR_IN_SECONDS;\\n      }\\n      year -= 1;\\n    }\\n    return year;\\n  }\\n\\n  function getMonth(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).month;\\n  }\\n\\n  function getDay(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).day;\\n  }\\n\\n  function getHour(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60 / 60) % 24);\\n  }\\n\\n  function getMinute(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60) % 60);\\n  }\\n\\n  function getSecond(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8(timestamp % 60);\\n  }\\n\\n  function getWeekday(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day\\n  ) public pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, 0, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour\\n  ) public pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, hour, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour,\\n    uint8 minute,\\n    uint8 second\\n  ) public pure returns (uint256 timestamp) {\\n    uint16 i;\\n\\n    // Year\\n    for (i = ORIGIN_YEAR; i < year; i++) {\\n      if (isLeapYear(i)) {\\n        timestamp += LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        timestamp += YEAR_IN_SECONDS;\\n      }\\n    }\\n\\n    // Month\\n    uint8[12] memory monthDayCounts;\\n    monthDayCounts[0] = 31;\\n    if (isLeapYear(year)) {\\n      monthDayCounts[1] = 29;\\n    } else {\\n      monthDayCounts[1] = 28;\\n    }\\n    monthDayCounts[2] = 31;\\n    monthDayCounts[3] = 30;\\n    monthDayCounts[4] = 31;\\n    monthDayCounts[5] = 30;\\n    monthDayCounts[6] = 31;\\n    monthDayCounts[7] = 31;\\n    monthDayCounts[8] = 30;\\n    monthDayCounts[9] = 31;\\n    monthDayCounts[10] = 30;\\n    monthDayCounts[11] = 31;\\n\\n    for (i = 1; i < month; i++) {\\n      timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\n    }\\n\\n    // Day\\n    timestamp += DAY_IN_SECONDS * (day - 1);\\n    // Hour\\n    timestamp += HOUR_IN_SECONDS * (hour);\\n    // Minute\\n    timestamp += MINUTE_IN_SECONDS * (minute);\\n    // Second\\n    timestamp += second;\\n\\n    return timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x8e132343eeabd7d6423ba797a8fbbcce898a201c69b63201662dbb4e1e734cf0\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Division by Zero');\\n    uint256 halfB = b / 2;\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Division by Zero');\\n    uint256 halfB = b / 2;\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x219da6a5d0c7c597faad6e638a2f0174b75d2ae50ee97314fb4afbc244abf01f\",\"license\":\"MIT\"},\"contracts/logic/AssetBond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\nimport '../libraries/Math.sol';\\nimport '../libraries/WadRayMath.sol';\\nimport '../libraries/TimeConverter.sol';\\n\\nlibrary AssetBond {\\n  using WadRayMath for uint256;\\n  using AssetBond for DataStruct.AssetBondData;\\n\\n  uint256 constant NONCE = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00;\\n  uint256 constant COUNTRY_CODE =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC003FF;\\n  uint256 constant COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000003FFFFF;\\n  uint256 constant COLLATERAL_LATITUDE =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000FFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_LATITUDE_SIGNS =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_LONGITUDE =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000001FFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_LONGITUDE_SIGNS =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_DETAILS =\\n    0xFFFFFFFFFFFFFFFFFFFFFC0000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_CATEGORY =\\n    0xFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant PRODUCT_NUMBER =\\n    0xFFFFFFFFFFFFFFFFC00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  uint256 constant NONCE_START = 0;\\n  uint256 constant COUNTRY_CODE_START = 10;\\n  uint256 constant COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER_START = 22;\\n  uint256 constant COLLATERAL_LATITUDE_START = 72;\\n  uint256 constant COLLATERAL_LATITUDE_SIGNS_START = 100;\\n  uint256 constant COLLATERAL_LONGITUDE_START = 101;\\n  uint256 constant COLLATERAL_LONGITUDE_SIGNS_START = 129;\\n  uint256 constant COLLATERAL_DETAILS_START = 130;\\n  uint256 constant COLLATERAL_CATEGORY_START = 170;\\n  uint256 constant PRODUCT_NUMBER_START = 180;\\n\\n  function parseAssetBondId(uint256 tokenId)\\n    public\\n    pure\\n    returns (DataStruct.AssetBondIdData memory)\\n  {\\n    DataStruct.AssetBondIdData memory vars;\\n    vars.nonce = tokenId & ~NONCE;\\n    vars.countryCode = (tokenId & ~COUNTRY_CODE) >> COUNTRY_CODE_START;\\n    vars.collateralServiceProviderIdentificationNumber =\\n      (tokenId & ~COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER) >>\\n      COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER_START;\\n    vars.collateralLatitude = (tokenId & ~COLLATERAL_LATITUDE) >> COLLATERAL_LATITUDE_START;\\n    vars.collateralLatitudeSign =\\n      (tokenId & ~COLLATERAL_LATITUDE_SIGNS) >>\\n      COLLATERAL_LATITUDE_SIGNS_START;\\n    vars.collateralLongitude = (tokenId & ~COLLATERAL_LONGITUDE) >> COLLATERAL_LONGITUDE_START;\\n    vars.collateralLongitudeSign =\\n      (tokenId & ~COLLATERAL_LONGITUDE_SIGNS) >>\\n      COLLATERAL_LONGITUDE_SIGNS_START;\\n    vars.collateralDetail = (tokenId & ~COLLATERAL_DETAILS) >> COLLATERAL_DETAILS_START;\\n    vars.collateralCategory = (tokenId & ~COLLATERAL_CATEGORY) >> COLLATERAL_CATEGORY_START;\\n    vars.productNumber = (tokenId & ~PRODUCT_NUMBER) >> PRODUCT_NUMBER_START;\\n\\n    return vars;\\n  }\\n\\n  function getAssetBondDebtData(DataStruct.AssetBondData memory assetBondData)\\n    public\\n    view\\n    returns (uint256, uint256)\\n  {\\n    if (assetBondData.state != DataStruct.AssetBondState.COLLATERALIZED) {\\n      return (0, 0);\\n    }\\n\\n    uint256 accruedDebtOnMoneyPool = Math\\n    .calculateCompoundedInterest(\\n      assetBondData.interestRate,\\n      assetBondData.collateralizeTimestamp,\\n      block.timestamp\\n    ).rayMul(assetBondData.principal);\\n\\n    uint256 feeOnCollateralServiceProvider = calculateFeeOnRepayment(\\n      assetBondData,\\n      block.timestamp\\n    );\\n\\n    return (accruedDebtOnMoneyPool, feeOnCollateralServiceProvider);\\n  }\\n\\n  struct CalculateFeeOnRepaymentLocalVars {\\n    TimeConverter.DateTime paymentDateTimeStruct;\\n    uint256 paymentDate;\\n    uint256 firstTermRate;\\n    uint256 secondTermRate;\\n    uint256 secondTermOverdueRate;\\n    uint256 thirdTermRate;\\n    uint256 totalRate;\\n  }\\n\\n  function calculateFeeOnRepayment(\\n    DataStruct.AssetBondData memory assetBondData,\\n    uint256 paymentTimestamp\\n  ) internal pure returns (uint256) {\\n    CalculateFeeOnRepaymentLocalVars memory vars;\\n\\n    vars.firstTermRate = Math.calculateCompoundedInterest(\\n      assetBondData.couponRate,\\n      assetBondData.loanStartTimestamp,\\n      assetBondData.collateralizeTimestamp\\n    );\\n\\n    vars.paymentDateTimeStruct = TimeConverter.parseTimestamp(paymentTimestamp);\\n    vars.paymentDate = TimeConverter.toTimestamp(\\n      vars.paymentDateTimeStruct.year,\\n      vars.paymentDateTimeStruct.month,\\n      vars.paymentDateTimeStruct.day + 1\\n    );\\n\\n    if (paymentTimestamp <= assetBondData.liquidationTimestamp) {\\n      vars.secondTermRate =\\n        Math.calculateCompoundedInterest(\\n          assetBondData.couponRate - assetBondData.interestRate,\\n          assetBondData.collateralizeTimestamp,\\n          paymentTimestamp\\n        ) -\\n        WadRayMath.ray();\\n      vars.thirdTermRate =\\n        Math.calculateCompoundedInterest(\\n          assetBondData.couponRate,\\n          paymentTimestamp,\\n          vars.paymentDate\\n        ) -\\n        WadRayMath.ray();\\n\\n      vars.totalRate = vars.firstTermRate + vars.secondTermRate + vars.thirdTermRate;\\n\\n      return assetBondData.principal.rayMul(vars.totalRate) - assetBondData.principal;\\n    }\\n\\n    vars.secondTermRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate - assetBondData.interestRate,\\n        assetBondData.collateralizeTimestamp,\\n        assetBondData.maturityTimestamp\\n      ) -\\n      WadRayMath.ray();\\n    vars.secondTermOverdueRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate + assetBondData.delinquencyRate - assetBondData.interestRate,\\n        assetBondData.maturityTimestamp,\\n        paymentTimestamp\\n      ) -\\n      WadRayMath.ray();\\n    vars.thirdTermRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate + assetBondData.delinquencyRate,\\n        paymentTimestamp,\\n        vars.paymentDate\\n      ) -\\n      WadRayMath.ray();\\n\\n    vars.totalRate =\\n      vars.firstTermRate +\\n      vars.secondTermRate +\\n      vars.secondTermOverdueRate +\\n      vars.thirdTermRate;\\n\\n    return assetBondData.principal.rayMul(vars.totalRate) - assetBondData.principal;\\n  }\\n\\n  function getAssetBondLiquidationData(DataStruct.AssetBondData memory assetBondData)\\n    internal\\n    view\\n    returns (uint256, uint256)\\n  {\\n    uint256 accruedDebtOnMoneyPool = Math\\n    .calculateCompoundedInterest(\\n      assetBondData.interestRate,\\n      assetBondData.collateralizeTimestamp,\\n      block.timestamp\\n    ).rayMul(assetBondData.principal);\\n\\n    uint256 feeOnCollateralServiceProvider = calculateDebtAmountToLiquidation(\\n      assetBondData,\\n      block.timestamp\\n    );\\n\\n    return (accruedDebtOnMoneyPool, feeOnCollateralServiceProvider);\\n  }\\n\\n  struct CalculateDebtAmountToLiquidationLocalVars {\\n    TimeConverter.DateTime paymentDateTimeStruct;\\n    uint256 paymentDate;\\n    uint256 firstTermRate;\\n    uint256 secondTermRate;\\n    uint256 totalRate;\\n  }\\n\\n  function calculateDebtAmountToLiquidation(\\n    DataStruct.AssetBondData memory assetBondData,\\n    uint256 paymentTimestamp\\n  ) internal pure returns (uint256) {\\n    CalculateDebtAmountToLiquidationLocalVars memory vars;\\n    vars.firstTermRate = Math.calculateCompoundedInterest(\\n      assetBondData.couponRate,\\n      assetBondData.loanStartTimestamp,\\n      assetBondData.maturityTimestamp\\n    );\\n\\n    vars.paymentDateTimeStruct = TimeConverter.parseTimestamp(paymentTimestamp);\\n    vars.paymentDate = TimeConverter.toTimestamp(\\n      vars.paymentDateTimeStruct.year,\\n      vars.paymentDateTimeStruct.month,\\n      vars.paymentDateTimeStruct.day + 1\\n    );\\n\\n    vars.secondTermRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate + assetBondData.delinquencyRate,\\n        assetBondData.maturityTimestamp,\\n        vars.paymentDate\\n      ) -\\n      WadRayMath.ray();\\n    vars.totalRate = vars.firstTermRate + vars.secondTermRate;\\n\\n    return assetBondData.principal.rayMul(vars.totalRate) - assetBondData.principal;\\n  }\\n}\\n\",\"keccak256\":\"0xc38a82b90691ff0157320fa3524660e4580639cc6fb9a193228f756cd973c074\",\"license\":\"MIT\"},\"contracts/logic/Index.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\nimport '../libraries/Math.sol';\\n\\nlibrary Index {\\n  using WadRayMath for uint256;\\n  using Index for DataStruct.ReserveData;\\n\\n  event LTokenIndexUpdated(address indexed asset, uint256 lTokenIndex, uint256 lastUpdateTimestamp);\\n\\n  /**\\n   * @dev Returns the ongoing normalized income for the reserve\\n   * A value of 1e27 means there is no income. As time passes, the income is accrued\\n   * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n   * @param reserve The reserve object\\n   * @return the normalized income. expressed in ray\\n   **/\\n  function getLTokenInterestIndex(DataStruct.ReserveData storage reserve)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    uint256 lastUpdateTimestamp = reserve.lastUpdateTimestamp;\\n\\n    // strict equality is not dangerous here\\n    // divide-before-multiply dangerous-strict-equalities\\n    if (lastUpdateTimestamp == block.timestamp) {\\n      return reserve.lTokenInterestIndex;\\n    }\\n\\n    uint256 newIndex = Math\\n    .calculateLinearInterest(reserve.depositAPY, lastUpdateTimestamp, block.timestamp)\\n    .rayMul(reserve.lTokenInterestIndex);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the reserve indexes and the timestamp\\n   * @param reserve The reserve to be updated\\n   **/\\n  function updateState(DataStruct.ReserveData storage reserve, address asset) internal {\\n    if (reserve.depositAPY == 0) {\\n      reserve.lastUpdateTimestamp = block.timestamp;\\n      return;\\n    }\\n\\n    reserve.lTokenInterestIndex = getLTokenInterestIndex(reserve);\\n    reserve.lastUpdateTimestamp = block.timestamp;\\n\\n    emit LTokenIndexUpdated(asset, reserve.lTokenInterestIndex, reserve.lastUpdateTimestamp);\\n  }\\n}\\n\",\"keccak256\":\"0x5d04bd1c3136ea9dab619fb8dc964f8ee8da7dcc049e1c7b702f70d98fd40a7c\",\"license\":\"MIT\"},\"contracts/logic/Rate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\nimport '../libraries/Math.sol';\\n\\nimport '../interfaces/ILToken.sol';\\nimport '../interfaces/IDToken.sol';\\nimport '../interfaces/ITokenizer.sol';\\nimport '../interfaces/IInterestRateModel.sol';\\n\\nlibrary Rate {\\n  using WadRayMath for uint256;\\n  using Rate for DataStruct.ReserveData;\\n\\n  event RatesUpdated(\\n    address indexed underlyingAssetAddress,\\n    uint256 lTokenIndex,\\n    uint256 borrowAPY,\\n    uint256 depositAPY,\\n    uint256 totalBorrow,\\n    uint256 totalDeposit\\n  );\\n\\n  struct UpdateRatesLocalVars {\\n    uint256 totalDToken;\\n    uint256 newBorrowAPY;\\n    uint256 newDepositAPY;\\n    uint256 averageBorrowAPY;\\n    uint256 totalVariableDebt;\\n  }\\n\\n  function updateRates(\\n    DataStruct.ReserveData storage reserve,\\n    address underlyingAssetAddress,\\n    uint256 depositAmount,\\n    uint256 borrowAmount\\n  ) public {\\n    UpdateRatesLocalVars memory vars;\\n\\n    vars.totalDToken = IDToken(reserve.dTokenAddress).totalSupply();\\n\\n    vars.averageBorrowAPY = IDToken(reserve.dTokenAddress).getTotalAverageRealAssetBorrowRate();\\n\\n    uint256 lTokenAssetBalance = IERC20(underlyingAssetAddress).balanceOf(reserve.lTokenAddress);\\n    (vars.newBorrowAPY, vars.newDepositAPY) = IInterestRateModel(reserve.interestModelAddress)\\n    .calculateRates(\\n      lTokenAssetBalance,\\n      vars.totalDToken,\\n      depositAmount,\\n      borrowAmount,\\n      reserve.moneyPoolFactor\\n    );\\n\\n    reserve.borrowAPY = vars.newBorrowAPY;\\n    reserve.depositAPY = vars.newDepositAPY;\\n\\n    emit RatesUpdated(\\n      underlyingAssetAddress,\\n      reserve.lTokenInterestIndex,\\n      vars.newBorrowAPY,\\n      vars.newDepositAPY,\\n      vars.totalDToken,\\n      lTokenAssetBalance + depositAmount - borrowAmount + vars.totalDToken\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xb7d57ec79d0d75e8e2ddd5433b0817cfc69576dc7770e0931320697d87835d83\",\"license\":\"MIT\"},\"contracts/logic/Validation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\nimport '../libraries/Math.sol';\\n\\nimport '../interfaces/ILToken.sol';\\n\\nlibrary Validation {\\n  using WadRayMath for uint256;\\n  using Validation for DataStruct.ReserveData;\\n\\n  /**\\n   * @dev Validate Deposit\\n   * Check reserve state\\n   * @param reserve The reserve object\\n   * @param amount Deposit amount\\n   **/\\n  function validateDeposit(DataStruct.ReserveData storage reserve, uint256 amount) public view {\\n    require(amount != 0, 'InvalidAmount');\\n    require(!reserve.isPaused, 'ReservePaused');\\n    require(reserve.isActivated, 'ReserveInactivated');\\n  }\\n\\n  /**\\n   * @dev Validate Withdraw\\n   * Check reserve state\\n   * Check user amount\\n   * Check user total debt(later)\\n   * @param reserve The reserve object\\n   * @param amount Withdraw amount\\n   **/\\n  function validateWithdraw(\\n    DataStruct.ReserveData storage reserve,\\n    address asset,\\n    uint256 amount,\\n    uint256 userLTokenBalance\\n  ) public view {\\n    require(amount != 0, 'InvalidAmount');\\n    require(!reserve.isPaused, 'ReservePaused');\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(amount <= userLTokenBalance, 'InsufficientBalance');\\n    uint256 availableLiquidity = IERC20(asset).balanceOf(reserve.lTokenAddress);\\n    require(availableLiquidity >= amount, 'NotEnoughLiquidity');\\n  }\\n\\n  function validateBorrow(\\n    DataStruct.ReserveData storage reserve,\\n    DataStruct.AssetBondData memory assetBond,\\n    address asset,\\n    uint256 borrowAmount\\n  ) public view {\\n    require(!reserve.isPaused, 'ReservePaused');\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(assetBond.state == DataStruct.AssetBondState.CONFIRMED, 'OnlySignedTokenBorrowAllowed');\\n    require(msg.sender == assetBond.collateralServiceProvider, 'OnlyOwnerBorrowAllowed');\\n    uint256 availableLiquidity = IERC20(asset).balanceOf(reserve.lTokenAddress);\\n    require(availableLiquidity >= borrowAmount, 'NotEnoughLiquidity');\\n    require(block.timestamp >= assetBond.loanStartTimestamp, 'NotTimeForLoanStart');\\n    require(assetBond.loanStartTimestamp + 18 hours >= block.timestamp, 'TimeOutForCollateralize');\\n  }\\n\\n  function validateLTokenTrasfer() internal pure {}\\n\\n  function validateRepay(\\n    DataStruct.ReserveData storage reserve,\\n    DataStruct.AssetBondData memory assetBond\\n  ) public view {\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(block.timestamp < assetBond.liquidationTimestamp, 'LoanExpired');\\n    require(\\n      (assetBond.state == DataStruct.AssetBondState.COLLATERALIZED ||\\n        assetBond.state == DataStruct.AssetBondState.DELINQUENT),\\n      'NotRepayableState'\\n    );\\n  }\\n\\n  function validateLiquidation(\\n    DataStruct.ReserveData storage reserve,\\n    DataStruct.AssetBondData memory assetBond\\n  ) public view {\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(assetBond.state == DataStruct.AssetBondState.LIQUIDATED, 'NotLiquidatbleState');\\n  }\\n\\n  function validateSignAssetBond(DataStruct.AssetBondData storage assetBond) public view {\\n    require(assetBond.state == DataStruct.AssetBondState.SETTLED, 'OnlySettledTokenSignAllowed');\\n    require(assetBond.signer == msg.sender, 'NotAllowedSigner');\\n  }\\n\\n  function validateSettleAssetBond(DataStruct.AssetBondData memory assetBond) public view {\\n    require(block.timestamp < assetBond.loanStartTimestamp, 'OnlySettledSigned');\\n    require(assetBond.loanStartTimestamp != assetBond.maturityTimestamp, 'LoanDurationInvalid');\\n  }\\n\\n  function validateTokenId(DataStruct.AssetBondIdData memory idData) internal pure {\\n    require(idData.collateralLatitude < 9000000, 'InvaildLatitude');\\n    require(idData.collateralLongitude < 18000000, 'InvaildLongitude');\\n  }\\n}\\n\",\"keccak256\":\"0x3786ce94f42a5af20df962cfe40a2c2d198e23db6f67b05a46aed8a45275abef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002d3a38038062002d3a83398101604081905262000034916200007a565b600480546001600160a01b0319166001600160a01b038316179055600382905560028054600191906000906200006c908490620000b7565b90915550620000dc92505050565b600080604083850312156200008d578182fd5b825160208401519092506001600160a01b0381168114620000ac578182fd5b809150509250929050565b60008219821115620000d757634e487b7160e01b81526011600452602481fd5b500190565b612c4e80620000ec6000396000f3fe608060405234801561001057600080fd5b50600436106100af5760003560e01c8063134cc9ea146100b457806322867d78146100c95780632e44cffd146100dc5780632e7c79d4146100ef57806335ea6a75146101025780634830b50a1461012b5780634b8a35291461013e5780634e34ca67146101515780638340f54914610164578063af5be73d14610177578063bcbaf4871461018a578063cee439231461019d578063d9caed12146101be575b600080fd5b6100c76100c23660046123ce565b6101d1565b005b6100c76100d73660046124ee565b6102a2565b6100c76100ea366004612422565b610675565b6100c76100fd3660046123ea565b6109e8565b6101156101103660046123ce565b610b01565b60405161012291906129ab565b60405180910390f35b6100c76101393660046123ce565b610c25565b6100c761014c3660046124ee565b610ce7565b6100c761015f3660046123ce565b6110c7565b6100c76101723660046124ae565b61118f565b6100c76101853660046123ce565b61136f565b6100c76101983660046124ee565b611431565b6101b06101ab3660046123ce565b61180c565b604051908152602001610122565b6100c76101cc3660046124ae565b6118ae565b60048054604051630f2770bf60e41b81526001600160a01b039091169163f2770bf091610200913391016128ab565b60206040518083038186803b15801561021857600080fd5b505afa15801561022c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102509190612519565b6102755760405162461bcd60e51b815260040161026c9061296c565b60405180910390fd5b6001600160a01b03166000908152602081905260409020600801805460ff60b01b1916600160b01b179055565b6001600160a01b0382811660009081526020819052604080822060088101549151634134592760e11b81526004810186905290939190911690638268b24e9060240160006040518083038186803b1580156102fc57600080fd5b505afa158015610310573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103389190810190612539565b604051637559466d60e01b81529091507308f7e687A90bbA01e8613827FD0D67e41949F9CC90637559466d906103749085908590600401612a81565b60006040518083038186803b15801561038c57600080fd5b505af41580156103a0573d6000803e3d6000fd5b50506040516367f0d33960e01b81526000925082915073A139841E0D43BAb85DDD00469EeD93a5a000cA9e906367f0d339906103e0908690600401612998565b604080518083038186803b1580156103f757600080fd5b505af415801561040b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042f9190612726565b909250905060006104408284612b15565b905061044c8588611afe565b600585015461046a906001600160a01b038981169133911684611b79565b60068501546020850151604051632770a7eb60e21b81526001600160a01b0390921691639dc29fac916104a19187906004016128e8565b600060405180830381600087803b1580156104bb57600080fd5b505af11580156104cf573d6000803e3d6000fd5b5050604051636f6f4e0f60e01b815273625B4AFCF08A5f4F85fc45E56387376fF4beD6Bf9250636f6f4e0f91506105119088908b908690600090600401612a5d565b60006040518083038186803b15801561052957600080fd5b505af415801561053d573d6000803e3d6000fd5b5050505060088501546020850151604051636e59367360e01b81526001600160a01b0390921691636e59367391610578918a906004016128e8565b600060405180830381600087803b15801561059257600080fd5b505af11580156105a6573d6000803e3d6000fd5b505050600586015460608601516001880154604051630ab714fb60e11b81526001600160a01b03909316935063156e29f6926105e792918791600401612901565b600060405180830381600087803b15801561060157600080fd5b505af1158015610615573d6000803e3d6000fd5b5050505083602001516001600160a01b0316876001600160a01b03167fd6a068ae75f1025380f00b7a1476f705bae3c3644640cf62b857f8d02ace826e88868660405161066493929190612acf565b60405180910390a350505050505050565b60048054604051630f2770bf60e41b81526001600160a01b039091169163f2770bf0916106a4913391016128ab565b60206040518083038186803b1580156106bc57600080fd5b505afa1580156106d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f49190612519565b6107105760405162461bcd60e51b815260040161026c9061296c565b600060405180610180016040528083815260200161072c611bd9565b81526020016000815260200160008152602001428152602001886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152602001600060ff168152602001600015158152602001600115158152509050806000808a6001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160080160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101208201518160080160146101000a81548160ff021916908360ff1602179055506101408201518160080160156101000a81548160ff0219169083151502179055506101608201518160080160166101000a81548160ff02191690831515021790555090505061091988611be8565b604051635b6f394f60e11b81526001600160a01b0384169063b6de729e90610945908a906004016128ab565b600060405180830381600087803b15801561095f57600080fd5b505af1158015610973573d6000803e3d6000fd5b5050604080516001600160a01b038b811682528a81166020830152898116828401528881166060830152878116608083015260a082018790529151918c1693507f030d2f64fa28afda22bc2449a466bc0ea2105b886ec225f9a4e82a16afadede0925081900360c00190a25050505050505050565b60048054604051630f2770bf60e41b81526001600160a01b039091169163f2770bf091610a17913391016128ab565b60206040518083038186803b158015610a2f57600080fd5b505afa158015610a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a679190612519565b610a835760405162461bcd60e51b815260040161026c9061296c565b6001600160a01b0380831660009081526020819052604090819020600581015491516311123cdd60e31b815290929190911690638891e6e890610aca9085906004016128ab565b600060405180830381600087803b158015610ae457600080fd5b505af1158015610af8573d6000803e3d6000fd5b50505050505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152506001600160a01b03808216600090815260208181526040918290208251610180810184528154815260018201549281019290925260028101549282019290925260038201546060820152600482015460808201526005820154831660a08201526006820154831660c08201526007820154831660e082015260089091015491821661010082015260ff600160a01b83048116610120830152600160a81b830481161515610140830152600160b01b90920490911615156101608201525b919050565b60048054604051630f2770bf60e41b81526001600160a01b039091169163f2770bf091610c54913391016128ab565b60206040518083038186803b158015610c6c57600080fd5b505afa158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca49190612519565b610cc05760405162461bcd60e51b815260040161026c9061296c565b6001600160a01b03166000908152602081905260409020600801805460ff60b01b19169055565b60048054604051631fc6b2f960e11b81526001600160a01b0390911691633f8d65f291610d16913391016128ab565b60206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190612519565b610d825760405162461bcd60e51b815260040161026c90612935565b6001600160a01b0382811660009081526020819052604080822060088101549151634134592760e11b81526004810186905290939190911690638268b24e9060240160006040518083038186803b158015610ddc57600080fd5b505afa158015610df0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e189190810190612539565b60808101516020820151604051630cf0b0e960e01b815292935090917308f7e687A90bbA01e8613827FD0D67e41949F9CC90630cf0b0e990610e6490879087908b908890600401612a9a565b60006040518083038186803b158015610e7c57600080fd5b505af4158015610e90573d6000803e3d6000fd5b50505050610ea78685611afe90919063ffffffff16565b6008840154600285015460405163344c988d60e11b8152336004820152602481018890526044810185905260648101919091526001600160a01b0390911690636899311a90608401600060405180830381600087803b158015610f0957600080fd5b505af1158015610f1d573d6000803e3d6000fd5b5050506006850154600286015460405163b3f1c93d60e01b81526001600160a01b03909216925063b3f1c93d91610f5c913391869188916004016128bf565b600060405180830381600087803b158015610f7657600080fd5b505af1158015610f8a573d6000803e3d6000fd5b5050604051636f6f4e0f60e01b815273625B4AFCF08A5f4F85fc45E56387376fF4beD6Bf9250636f6f4e0f9150610fcc9087908a906000908890600401612a5d565b60006040518083038186803b158015610fe457600080fd5b505af4158015610ff8573d6000803e3d6000fd5b5050506005850154604051634efecaa560e01b81526001600160a01b039091169150634efecaa59061103090849086906004016128e8565b600060405180830381600087803b15801561104a57600080fd5b505af115801561105e573d6000803e3d6000fd5b50505050806001600160a01b0316336001600160a01b0316876001600160a01b03167f4bc4b08d677fc59195d56e346dcb5cc5dc3b78b90d59f5d36740ae1b3d225db8888860020154876040516110b793929190612acf565b60405180910390a4505050505050565b60048054604051630f2770bf60e41b81526001600160a01b039091169163f2770bf0916110f6913391016128ab565b60206040518083038186803b15801561110e57600080fd5b505afa158015611122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111469190612519565b6111625760405162461bcd60e51b815260040161026c9061296c565b6001600160a01b03166000908152602081905260409020600801805460ff60a81b1916600160a81b179055565b6001600160a01b03831660009081526020819052604090819020905163259dd32560e21b815260048101829052602481018390527308f7e687A90bbA01e8613827FD0D67e41949F9CC906396774c949060440160006040518083038186803b1580156111fa57600080fd5b505af415801561120e573d6000803e3d6000fd5b505050506112258482611afe90919063ffffffff16565b604051636f6f4e0f60e01b815273625B4AFCF08A5f4F85fc45E56387376fF4beD6Bf90636f6f4e0f9061126390849088908790600090600401612a5d565b60006040518083038186803b15801561127b57600080fd5b505af415801561128f573d6000803e3d6000fd5b50505060058201546112b191506001600160a01b038681169133911685611b79565b60058101546001820154604051630ab714fb60e11b81526001600160a01b039092169163156e29f6916112ea9187918791600401612901565b600060405180830381600087803b15801561130457600080fd5b505af1158015611318573d6000803e3d6000fd5b50505050826001600160a01b0316846001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f628460405161136191815260200190565b60405180910390a350505050565b60048054604051630f2770bf60e41b81526001600160a01b039091169163f2770bf09161139e913391016128ab565b60206040518083038186803b1580156113b657600080fd5b505afa1580156113ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ee9190612519565b61140a5760405162461bcd60e51b815260040161026c9061296c565b6001600160a01b03166000908152602081905260409020600801805460ff60a81b19169055565b60048054604051631fc6b2f960e11b81526001600160a01b0390911691633f8d65f291611460913391016128ab565b60206040518083038186803b15801561147857600080fd5b505afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190612519565b6114cc5760405162461bcd60e51b815260040161026c90612935565b6001600160a01b0382811660009081526020819052604080822060088101549151634134592760e11b81526004810186905290939190911690638268b24e9060240160006040518083038186803b15801561152657600080fd5b505afa15801561153a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115629190810190612539565b6040516306e4e14f60e21b81529091507308f7e687A90bbA01e8613827FD0D67e41949F9CC90631b93853c9061159e9085908590600401612a81565b60006040518083038186803b1580156115b657600080fd5b505af41580156115ca573d6000803e3d6000fd5b505050506000806115da83611d06565b909250905060006115eb8284612b15565b90506115f78588611afe565b60068501546020850151604051632770a7eb60e21b81526001600160a01b0390921691639dc29fac9161162e9187906004016128e8565b600060405180830381600087803b15801561164857600080fd5b505af115801561165c573d6000803e3d6000fd5b5050604051636f6f4e0f60e01b815273625B4AFCF08A5f4F85fc45E56387376fF4beD6Bf9250636f6f4e0f915061169e9088908b908690600090600401612a5d565b60006040518083038186803b1580156116b657600080fd5b505af41580156116ca573d6000803e3d6000fd5b50505060058601546116ec91506001600160a01b038981169133911684611b79565b60088501546040516354b0e57f60e01b81526001600160a01b03909116906354b0e57f906117209033908a906004016128e8565b600060405180830381600087803b15801561173a57600080fd5b505af115801561174e573d6000803e3d6000fd5b505050600586015460608601516001880154604051630ab714fb60e11b81526001600160a01b03909316935063156e29f69261178f92918791600401612901565b600060405180830381600087803b1580156117a957600080fd5b505af11580156117bd573d6000803e3d6000fd5b5050505083602001516001600160a01b0316876001600160a01b03167f5a821a618ddb1a1fd304234a69c9d7f20c129d122fcf35593d13a0719266430788868660405161066493929190612acf565b6001600160a01b0381166000908152602081905260408082209051635ed8914160e01b81526004810191909152739Eb704b380E6caE794af479796866A264F87Aa7990635ed891419060240160206040518083038186803b15801561187057600080fd5b505af4158015611884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a8919061270e565b92915050565b6001600160a01b03808416600090815260208190526040808220600581015491516370a0823160e01b8152909391909116906370a08231906118f49033906004016128ab565b60206040518083038186803b15801561190c57600080fd5b505afa158015611920573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611944919061270e565b9050826000198114156119545750805b60405163300996c360e21b81527308f7e687A90bbA01e8613827FD0D67e41949F9CC9063c0265b0c906119919086908a9086908890600401612a5d565b60006040518083038186803b1580156119a957600080fd5b505af41580156119bd573d6000803e3d6000fd5b505050506119d48684611afe90919063ffffffff16565b604051636f6f4e0f60e01b815273625B4AFCF08A5f4F85fc45E56387376fF4beD6Bf90636f6f4e0f90611a129086908a906000908790600401612a5d565b60006040518083038186803b158015611a2a57600080fd5b505af4158015611a3e573d6000803e3d6000fd5b50505060058401546001850154604051636b81068560e11b81526001600160a01b03909216925063d7020d0a91611a7d9133918a9187916004016128bf565b600060405180830381600087803b158015611a9757600080fd5b505af1158015611aab573d6000803e3d6000fd5b50505050846001600160a01b0316336001600160a01b0316876001600160a01b03167f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f7846040516110b791815260200190565b6003820154611b1257426004830155611b75565b611b1b82611d47565b6001830181905542600484018190556040516001600160a01b038416927f9a1b7c42fa344b6eab391c9dce3f027cd74830d4e906c023ad432a8cb06e4f8792611b6c92918252602082015260400190565b60405180910390a25b5050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611bd3908590611d84565b50505050565b676765c793fa10079d601b1b90565b6002546003548110611c365760405162461bcd60e51b815260206004820152601760248201527613585e14995cd95c9d9950dbdd5b9d115e18d959591959604a1b604482015260640161026c565b6001600160a01b038216600090815260208190526040902060080154600160a01b900460ff1615611ca45760405162461bcd60e51b8152602060048201526018602482015277111a59da5d185b105cdcd95d105b1c9958591e505919195960421b604482015260640161026c565b6001600160a01b038216600081815260208181526040808320600801805460ff60a01b1916600160a01b60ff88160217905584835260019182905290912080546001600160a01b031916909217909155611cff908290612b15565b6002555050565b6000806000611d2d8460800151611d278660e0015187610140015142611e5b565b90611f73565b90506000611d3b8542611fc2565b91935090915050915091565b600481015460009042811415611d635750506001810154610c20565b6000611d7c8460010154611d27866003015485426121f4565b949350505050565b6000611dd9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122379092919063ffffffff16565b805190915015611e565780806020019051810190611df79190612519565b611e565760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161026c565b505050565b600080611e688484612b91565b905080611e7f57611e77611bd9565b915050611f6c565b6000611e8c600183612b91565b9050600060028311611e9f576000611eaa565b611eaa600284612b91565b90506000611ebc6301e1338089612b52565b90506000611eca8280611f73565b90506000611ed88284611f73565b90506000600283611ee9888a612b72565b611ef39190612b72565b611efd9190612b52565b9050600060068387611f0f8a8c612b72565b611f199190612b72565b611f239190612b72565b611f2d9190612b52565b90508082611f3b8a88612b72565b611f43611bd9565b611f4d9190612b15565b611f579190612b15565b611f619190612b15565b985050505050505050505b9392505050565b6000821580611f80575081155b15611f8d575060006118a8565b676765c793fa10079d601b1b611fa4600282612b52565b611fae8486612b72565b611fb89190612b15565b611f6c9190612b52565b6040805161018081018252600060a0820181815260c0830182905260e083018290526101008301829052610120830182905261014083018290526101608301829052825260208201819052918101829052606081018290526080810182905261203a8460c00151856101200151866101600151611e5b565b6040828101919091525163f97d059160e01b8152600481018490527301d07C9FD2e3fbC493e0A2dE588CE1c1EaD137e49063f97d05919060240160e06040518083038186803b15801561208c57600080fd5b505af41580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190612673565b808252805160208201516040909201517301d07C9FD2e3fbC493e0A2dE588CE1c1EaD137e492638c8d98a092916120fc906001612b2d565b6040516001600160e01b031960e086901b16815261ffff909316600484015260ff918216602484015216604482015260640160206040518083038186803b15801561214657600080fd5b505af415801561215a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217e919061270e565b602082015261218b611bd9565b6121b38561010001518660c001516121a39190612b15565b8661016001518460200151611e5b565b6121bd9190612b91565b6060820181905260408201516121d39190612b15565b6080808301829052850151906121ea908290611f73565b611d7c9190612b91565b6000806122018484612b91565b905061220b611bd9565b6301e1338061221a8388612b72565b6122249190612b52565b61222e9190612b15565b95945050505050565b6060611d7c848460008585843b6122905760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161026c565b600080866001600160a01b031685876040516122ac919061288f565b60006040518083038185875af1925050503d80600081146122e9576040519150601f19603f3d011682016040523d82523d6000602084013e6122ee565b606091505b50915091506122fe828286612309565b979650505050505050565b60608315612318575081611f6c565b8251156123285782518084602001fd5b8160405162461bcd60e51b815260040161026c9190612922565b8051610c2081612c00565b805160078110610c2057600080fd5b600082601f83011261236c578081fd5b81516001600160401b0381111561238557612385612bea565b612398601f8201601f1916602001612ae5565b8181528460208386010111156123ac578283fd5b611d7c826020830160208701612ba8565b805160ff81168114610c2057600080fd5b6000602082840312156123df578081fd5b8135611f6c81612c00565b600080604083850312156123fc578081fd5b823561240781612c00565b9150602083013561241781612c00565b809150509250929050565b600080600080600080600060e0888a03121561243c578283fd5b873561244781612c00565b9650602088013561245781612c00565b9550604088013561246781612c00565b9450606088013561247781612c00565b9350608088013561248781612c00565b925060a088013561249781612c00565b8092505060c0880135905092959891949750929550565b6000806000606084860312156124c2578283fd5b83356124cd81612c00565b925060208401356124dd81612c00565b929592945050506040919091013590565b60008060408385031215612500578182fd5b823561250b81612c00565b946020939093013593505050565b60006020828403121561252a578081fd5b81518015158114611f6c578182fd5b60006020828403121561254a578081fd5b81516001600160401b0380821115612560578283fd5b81840191506101e0808387031215612576578384fd5b61257f81612ae5565b905061258a8361234d565b815261259860208401612342565b60208201526125a960408401612342565b60408201526125ba60608401612342565b60608201526080838101519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a08084015183811115612631578586fd5b61263d8882870161235c565b8284015250506101c08084015183811115612656578586fd5b6126628882870161235c565b918301919091525095945050505050565b600060e08284031215612684578081fd5b61268e60e0612ae5565b825161ffff8116811461269f578283fd5b81526126ad602084016123bd565b60208201526126be604084016123bd565b60408201526126cf606084016123bd565b60608201526126e0608084016123bd565b60808201526126f160a084016123bd565b60a082015261270260c084016123bd565b60c08201529392505050565b60006020828403121561271f578081fd5b5051919050565b60008060408385031215612738578182fd5b505080516020909101519092909150565b6001600160a01b03169052565b6007811061277457634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452612790816020860160208601612ba8565b601f01601f19169290920160200192915050565b60006101e06127b4848451612756565b60208301516127c66020860182612749565b5060408301516127d96040860182612749565b5060608301516127ec6060860182612749565b506080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015181860152506101208084015181860152506101408084015181860152506101608084015181860152506101808084015181860152506101a080840151828287015261286983870182612778565b925050506101c080840151858303828701526128858382612778565b9695505050505050565b600082516128a1818460208701612ba8565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060208252611f6c6020830184612778565b6020808252601d908201527f4f6e6c79436f6c6c61746572616c5365727669636550726f7669646572000000604082015260600190565b60208082526012908201527127b7363ca6b7b732bca837b7b620b236b4b760711b604082015260600190565b600060208252611f6c60208301846127a4565b600061018082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a08301516129f260a0840182612749565b5060c0830151612a0560c0840182612749565b5060e0830151612a1860e0840182612749565b5061010080840151612a2c82850182612749565b50506101208381015160ff169083015261014080840151151590830152610160928301511515929091019190915290565b9384526001600160a01b039290921660208401526040830152606082015260800190565b600083825260406020830152611d7c60408301846127a4565b600085825260806020830152612ab360808301866127a4565b6001600160a01b03949094166040830152506060015292915050565b9283526020830191909152604082015260600190565b604051601f8201601f191681016001600160401b0381118282101715612b0d57612b0d612bea565b604052919050565b60008219821115612b2857612b28612bd4565b500190565b600060ff821660ff84168060ff03821115612b4a57612b4a612bd4565b019392505050565b600082612b6d57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612b8c57612b8c612bd4565b500290565b600082821015612ba357612ba3612bd4565b500390565b60005b83811015612bc3578181015183820152602001612bab565b83811115611bd35750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612c1557600080fd5b5056fea2646970667358221220e843960bc4bc4e1c8a8f7b66fc7de6ef8be4122475d068ddb7d3648293a7573d64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100af5760003560e01c8063134cc9ea146100b457806322867d78146100c95780632e44cffd146100dc5780632e7c79d4146100ef57806335ea6a75146101025780634830b50a1461012b5780634b8a35291461013e5780634e34ca67146101515780638340f54914610164578063af5be73d14610177578063bcbaf4871461018a578063cee439231461019d578063d9caed12146101be575b600080fd5b6100c76100c23660046123ce565b6101d1565b005b6100c76100d73660046124ee565b6102a2565b6100c76100ea366004612422565b610675565b6100c76100fd3660046123ea565b6109e8565b6101156101103660046123ce565b610b01565b60405161012291906129ab565b60405180910390f35b6100c76101393660046123ce565b610c25565b6100c761014c3660046124ee565b610ce7565b6100c761015f3660046123ce565b6110c7565b6100c76101723660046124ae565b61118f565b6100c76101853660046123ce565b61136f565b6100c76101983660046124ee565b611431565b6101b06101ab3660046123ce565b61180c565b604051908152602001610122565b6100c76101cc3660046124ae565b6118ae565b60048054604051630f2770bf60e41b81526001600160a01b039091169163f2770bf091610200913391016128ab565b60206040518083038186803b15801561021857600080fd5b505afa15801561022c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102509190612519565b6102755760405162461bcd60e51b815260040161026c9061296c565b60405180910390fd5b6001600160a01b03166000908152602081905260409020600801805460ff60b01b1916600160b01b179055565b6001600160a01b0382811660009081526020819052604080822060088101549151634134592760e11b81526004810186905290939190911690638268b24e9060240160006040518083038186803b1580156102fc57600080fd5b505afa158015610310573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103389190810190612539565b604051637559466d60e01b815290915073__$a034ea2d5e2156aee4d32ca102faa25bbf$__90637559466d906103749085908590600401612a81565b60006040518083038186803b15801561038c57600080fd5b505af41580156103a0573d6000803e3d6000fd5b50506040516367f0d33960e01b81526000925082915073__$82c3638f3539fdc3511ed289aa50105dc3$__906367f0d339906103e0908690600401612998565b604080518083038186803b1580156103f757600080fd5b505af415801561040b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042f9190612726565b909250905060006104408284612b15565b905061044c8588611afe565b600585015461046a906001600160a01b038981169133911684611b79565b60068501546020850151604051632770a7eb60e21b81526001600160a01b0390921691639dc29fac916104a19187906004016128e8565b600060405180830381600087803b1580156104bb57600080fd5b505af11580156104cf573d6000803e3d6000fd5b5050604051636f6f4e0f60e01b815273__$38210f4bf40afed76bc0d246cb38cb9809$__9250636f6f4e0f91506105119088908b908690600090600401612a5d565b60006040518083038186803b15801561052957600080fd5b505af415801561053d573d6000803e3d6000fd5b5050505060088501546020850151604051636e59367360e01b81526001600160a01b0390921691636e59367391610578918a906004016128e8565b600060405180830381600087803b15801561059257600080fd5b505af11580156105a6573d6000803e3d6000fd5b505050600586015460608601516001880154604051630ab714fb60e11b81526001600160a01b03909316935063156e29f6926105e792918791600401612901565b600060405180830381600087803b15801561060157600080fd5b505af1158015610615573d6000803e3d6000fd5b5050505083602001516001600160a01b0316876001600160a01b03167fd6a068ae75f1025380f00b7a1476f705bae3c3644640cf62b857f8d02ace826e88868660405161066493929190612acf565b60405180910390a350505050505050565b60048054604051630f2770bf60e41b81526001600160a01b039091169163f2770bf0916106a4913391016128ab565b60206040518083038186803b1580156106bc57600080fd5b505afa1580156106d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f49190612519565b6107105760405162461bcd60e51b815260040161026c9061296c565b600060405180610180016040528083815260200161072c611bd9565b81526020016000815260200160008152602001428152602001886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b03168152602001600060ff168152602001600015158152602001600115158152509050806000808a6001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160080160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101208201518160080160146101000a81548160ff021916908360ff1602179055506101408201518160080160156101000a81548160ff0219169083151502179055506101608201518160080160166101000a81548160ff02191690831515021790555090505061091988611be8565b604051635b6f394f60e11b81526001600160a01b0384169063b6de729e90610945908a906004016128ab565b600060405180830381600087803b15801561095f57600080fd5b505af1158015610973573d6000803e3d6000fd5b5050604080516001600160a01b038b811682528a81166020830152898116828401528881166060830152878116608083015260a082018790529151918c1693507f030d2f64fa28afda22bc2449a466bc0ea2105b886ec225f9a4e82a16afadede0925081900360c00190a25050505050505050565b60048054604051630f2770bf60e41b81526001600160a01b039091169163f2770bf091610a17913391016128ab565b60206040518083038186803b158015610a2f57600080fd5b505afa158015610a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a679190612519565b610a835760405162461bcd60e51b815260040161026c9061296c565b6001600160a01b0380831660009081526020819052604090819020600581015491516311123cdd60e31b815290929190911690638891e6e890610aca9085906004016128ab565b600060405180830381600087803b158015610ae457600080fd5b505af1158015610af8573d6000803e3d6000fd5b50505050505050565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810191909152506001600160a01b03808216600090815260208181526040918290208251610180810184528154815260018201549281019290925260028101549282019290925260038201546060820152600482015460808201526005820154831660a08201526006820154831660c08201526007820154831660e082015260089091015491821661010082015260ff600160a01b83048116610120830152600160a81b830481161515610140830152600160b01b90920490911615156101608201525b919050565b60048054604051630f2770bf60e41b81526001600160a01b039091169163f2770bf091610c54913391016128ab565b60206040518083038186803b158015610c6c57600080fd5b505afa158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca49190612519565b610cc05760405162461bcd60e51b815260040161026c9061296c565b6001600160a01b03166000908152602081905260409020600801805460ff60b01b19169055565b60048054604051631fc6b2f960e11b81526001600160a01b0390911691633f8d65f291610d16913391016128ab565b60206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190612519565b610d825760405162461bcd60e51b815260040161026c90612935565b6001600160a01b0382811660009081526020819052604080822060088101549151634134592760e11b81526004810186905290939190911690638268b24e9060240160006040518083038186803b158015610ddc57600080fd5b505afa158015610df0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e189190810190612539565b60808101516020820151604051630cf0b0e960e01b8152929350909173__$a034ea2d5e2156aee4d32ca102faa25bbf$__90630cf0b0e990610e6490879087908b908890600401612a9a565b60006040518083038186803b158015610e7c57600080fd5b505af4158015610e90573d6000803e3d6000fd5b50505050610ea78685611afe90919063ffffffff16565b6008840154600285015460405163344c988d60e11b8152336004820152602481018890526044810185905260648101919091526001600160a01b0390911690636899311a90608401600060405180830381600087803b158015610f0957600080fd5b505af1158015610f1d573d6000803e3d6000fd5b5050506006850154600286015460405163b3f1c93d60e01b81526001600160a01b03909216925063b3f1c93d91610f5c913391869188916004016128bf565b600060405180830381600087803b158015610f7657600080fd5b505af1158015610f8a573d6000803e3d6000fd5b5050604051636f6f4e0f60e01b815273__$38210f4bf40afed76bc0d246cb38cb9809$__9250636f6f4e0f9150610fcc9087908a906000908890600401612a5d565b60006040518083038186803b158015610fe457600080fd5b505af4158015610ff8573d6000803e3d6000fd5b5050506005850154604051634efecaa560e01b81526001600160a01b039091169150634efecaa59061103090849086906004016128e8565b600060405180830381600087803b15801561104a57600080fd5b505af115801561105e573d6000803e3d6000fd5b50505050806001600160a01b0316336001600160a01b0316876001600160a01b03167f4bc4b08d677fc59195d56e346dcb5cc5dc3b78b90d59f5d36740ae1b3d225db8888860020154876040516110b793929190612acf565b60405180910390a4505050505050565b60048054604051630f2770bf60e41b81526001600160a01b039091169163f2770bf0916110f6913391016128ab565b60206040518083038186803b15801561110e57600080fd5b505afa158015611122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111469190612519565b6111625760405162461bcd60e51b815260040161026c9061296c565b6001600160a01b03166000908152602081905260409020600801805460ff60a81b1916600160a81b179055565b6001600160a01b03831660009081526020819052604090819020905163259dd32560e21b8152600481018290526024810183905273__$a034ea2d5e2156aee4d32ca102faa25bbf$__906396774c949060440160006040518083038186803b1580156111fa57600080fd5b505af415801561120e573d6000803e3d6000fd5b505050506112258482611afe90919063ffffffff16565b604051636f6f4e0f60e01b815273__$38210f4bf40afed76bc0d246cb38cb9809$__90636f6f4e0f9061126390849088908790600090600401612a5d565b60006040518083038186803b15801561127b57600080fd5b505af415801561128f573d6000803e3d6000fd5b50505060058201546112b191506001600160a01b038681169133911685611b79565b60058101546001820154604051630ab714fb60e11b81526001600160a01b039092169163156e29f6916112ea9187918791600401612901565b600060405180830381600087803b15801561130457600080fd5b505af1158015611318573d6000803e3d6000fd5b50505050826001600160a01b0316846001600160a01b03167f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f628460405161136191815260200190565b60405180910390a350505050565b60048054604051630f2770bf60e41b81526001600160a01b039091169163f2770bf09161139e913391016128ab565b60206040518083038186803b1580156113b657600080fd5b505afa1580156113ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ee9190612519565b61140a5760405162461bcd60e51b815260040161026c9061296c565b6001600160a01b03166000908152602081905260409020600801805460ff60a81b19169055565b60048054604051631fc6b2f960e11b81526001600160a01b0390911691633f8d65f291611460913391016128ab565b60206040518083038186803b15801561147857600080fd5b505afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190612519565b6114cc5760405162461bcd60e51b815260040161026c90612935565b6001600160a01b0382811660009081526020819052604080822060088101549151634134592760e11b81526004810186905290939190911690638268b24e9060240160006040518083038186803b15801561152657600080fd5b505afa15801561153a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115629190810190612539565b6040516306e4e14f60e21b815290915073__$a034ea2d5e2156aee4d32ca102faa25bbf$__90631b93853c9061159e9085908590600401612a81565b60006040518083038186803b1580156115b657600080fd5b505af41580156115ca573d6000803e3d6000fd5b505050506000806115da83611d06565b909250905060006115eb8284612b15565b90506115f78588611afe565b60068501546020850151604051632770a7eb60e21b81526001600160a01b0390921691639dc29fac9161162e9187906004016128e8565b600060405180830381600087803b15801561164857600080fd5b505af115801561165c573d6000803e3d6000fd5b5050604051636f6f4e0f60e01b815273__$38210f4bf40afed76bc0d246cb38cb9809$__9250636f6f4e0f915061169e9088908b908690600090600401612a5d565b60006040518083038186803b1580156116b657600080fd5b505af41580156116ca573d6000803e3d6000fd5b50505060058601546116ec91506001600160a01b038981169133911684611b79565b60088501546040516354b0e57f60e01b81526001600160a01b03909116906354b0e57f906117209033908a906004016128e8565b600060405180830381600087803b15801561173a57600080fd5b505af115801561174e573d6000803e3d6000fd5b505050600586015460608601516001880154604051630ab714fb60e11b81526001600160a01b03909316935063156e29f69261178f92918791600401612901565b600060405180830381600087803b1580156117a957600080fd5b505af11580156117bd573d6000803e3d6000fd5b5050505083602001516001600160a01b0316876001600160a01b03167f5a821a618ddb1a1fd304234a69c9d7f20c129d122fcf35593d13a0719266430788868660405161066493929190612acf565b6001600160a01b0381166000908152602081905260408082209051635ed8914160e01b8152600481019190915273__$b2803e6fc9c1907245baf73f249fd756da$__90635ed891419060240160206040518083038186803b15801561187057600080fd5b505af4158015611884573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a8919061270e565b92915050565b6001600160a01b03808416600090815260208190526040808220600581015491516370a0823160e01b8152909391909116906370a08231906118f49033906004016128ab565b60206040518083038186803b15801561190c57600080fd5b505afa158015611920573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611944919061270e565b9050826000198114156119545750805b60405163300996c360e21b815273__$a034ea2d5e2156aee4d32ca102faa25bbf$__9063c0265b0c906119919086908a9086908890600401612a5d565b60006040518083038186803b1580156119a957600080fd5b505af41580156119bd573d6000803e3d6000fd5b505050506119d48684611afe90919063ffffffff16565b604051636f6f4e0f60e01b815273__$38210f4bf40afed76bc0d246cb38cb9809$__90636f6f4e0f90611a129086908a906000908790600401612a5d565b60006040518083038186803b158015611a2a57600080fd5b505af4158015611a3e573d6000803e3d6000fd5b50505060058401546001850154604051636b81068560e11b81526001600160a01b03909216925063d7020d0a91611a7d9133918a9187916004016128bf565b600060405180830381600087803b158015611a9757600080fd5b505af1158015611aab573d6000803e3d6000fd5b50505050846001600160a01b0316336001600160a01b0316876001600160a01b03167f3115d1449a7b732c986cba18244e897a450f61e1bb8d589cd2e69e6c8924f9f7846040516110b791815260200190565b6003820154611b1257426004830155611b75565b611b1b82611d47565b6001830181905542600484018190556040516001600160a01b038416927f9a1b7c42fa344b6eab391c9dce3f027cd74830d4e906c023ad432a8cb06e4f8792611b6c92918252602082015260400190565b60405180910390a25b5050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611bd3908590611d84565b50505050565b676765c793fa10079d601b1b90565b6002546003548110611c365760405162461bcd60e51b815260206004820152601760248201527613585e14995cd95c9d9950dbdd5b9d115e18d959591959604a1b604482015260640161026c565b6001600160a01b038216600090815260208190526040902060080154600160a01b900460ff1615611ca45760405162461bcd60e51b8152602060048201526018602482015277111a59da5d185b105cdcd95d105b1c9958591e505919195960421b604482015260640161026c565b6001600160a01b038216600081815260208181526040808320600801805460ff60a01b1916600160a01b60ff88160217905584835260019182905290912080546001600160a01b031916909217909155611cff908290612b15565b6002555050565b6000806000611d2d8460800151611d278660e0015187610140015142611e5b565b90611f73565b90506000611d3b8542611fc2565b91935090915050915091565b600481015460009042811415611d635750506001810154610c20565b6000611d7c8460010154611d27866003015485426121f4565b949350505050565b6000611dd9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122379092919063ffffffff16565b805190915015611e565780806020019051810190611df79190612519565b611e565760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161026c565b505050565b600080611e688484612b91565b905080611e7f57611e77611bd9565b915050611f6c565b6000611e8c600183612b91565b9050600060028311611e9f576000611eaa565b611eaa600284612b91565b90506000611ebc6301e1338089612b52565b90506000611eca8280611f73565b90506000611ed88284611f73565b90506000600283611ee9888a612b72565b611ef39190612b72565b611efd9190612b52565b9050600060068387611f0f8a8c612b72565b611f199190612b72565b611f239190612b72565b611f2d9190612b52565b90508082611f3b8a88612b72565b611f43611bd9565b611f4d9190612b15565b611f579190612b15565b611f619190612b15565b985050505050505050505b9392505050565b6000821580611f80575081155b15611f8d575060006118a8565b676765c793fa10079d601b1b611fa4600282612b52565b611fae8486612b72565b611fb89190612b15565b611f6c9190612b52565b6040805161018081018252600060a0820181815260c0830182905260e083018290526101008301829052610120830182905261014083018290526101608301829052825260208201819052918101829052606081018290526080810182905261203a8460c00151856101200151866101600151611e5b565b6040828101919091525163f97d059160e01b81526004810184905273__$f064660449bb8f64614f18479211edbf10$__9063f97d05919060240160e06040518083038186803b15801561208c57600080fd5b505af41580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190612673565b8082528051602082015160409092015173__$f064660449bb8f64614f18479211edbf10$__92638c8d98a092916120fc906001612b2d565b6040516001600160e01b031960e086901b16815261ffff909316600484015260ff918216602484015216604482015260640160206040518083038186803b15801561214657600080fd5b505af415801561215a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217e919061270e565b602082015261218b611bd9565b6121b38561010001518660c001516121a39190612b15565b8661016001518460200151611e5b565b6121bd9190612b91565b6060820181905260408201516121d39190612b15565b6080808301829052850151906121ea908290611f73565b611d7c9190612b91565b6000806122018484612b91565b905061220b611bd9565b6301e1338061221a8388612b72565b6122249190612b52565b61222e9190612b15565b95945050505050565b6060611d7c848460008585843b6122905760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161026c565b600080866001600160a01b031685876040516122ac919061288f565b60006040518083038185875af1925050503d80600081146122e9576040519150601f19603f3d011682016040523d82523d6000602084013e6122ee565b606091505b50915091506122fe828286612309565b979650505050505050565b60608315612318575081611f6c565b8251156123285782518084602001fd5b8160405162461bcd60e51b815260040161026c9190612922565b8051610c2081612c00565b805160078110610c2057600080fd5b600082601f83011261236c578081fd5b81516001600160401b0381111561238557612385612bea565b612398601f8201601f1916602001612ae5565b8181528460208386010111156123ac578283fd5b611d7c826020830160208701612ba8565b805160ff81168114610c2057600080fd5b6000602082840312156123df578081fd5b8135611f6c81612c00565b600080604083850312156123fc578081fd5b823561240781612c00565b9150602083013561241781612c00565b809150509250929050565b600080600080600080600060e0888a03121561243c578283fd5b873561244781612c00565b9650602088013561245781612c00565b9550604088013561246781612c00565b9450606088013561247781612c00565b9350608088013561248781612c00565b925060a088013561249781612c00565b8092505060c0880135905092959891949750929550565b6000806000606084860312156124c2578283fd5b83356124cd81612c00565b925060208401356124dd81612c00565b929592945050506040919091013590565b60008060408385031215612500578182fd5b823561250b81612c00565b946020939093013593505050565b60006020828403121561252a578081fd5b81518015158114611f6c578182fd5b60006020828403121561254a578081fd5b81516001600160401b0380821115612560578283fd5b81840191506101e0808387031215612576578384fd5b61257f81612ae5565b905061258a8361234d565b815261259860208401612342565b60208201526125a960408401612342565b60408201526125ba60608401612342565b60608201526080838101519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a08084015183811115612631578586fd5b61263d8882870161235c565b8284015250506101c08084015183811115612656578586fd5b6126628882870161235c565b918301919091525095945050505050565b600060e08284031215612684578081fd5b61268e60e0612ae5565b825161ffff8116811461269f578283fd5b81526126ad602084016123bd565b60208201526126be604084016123bd565b60408201526126cf606084016123bd565b60608201526126e0608084016123bd565b60808201526126f160a084016123bd565b60a082015261270260c084016123bd565b60c08201529392505050565b60006020828403121561271f578081fd5b5051919050565b60008060408385031215612738578182fd5b505080516020909101519092909150565b6001600160a01b03169052565b6007811061277457634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452612790816020860160208601612ba8565b601f01601f19169290920160200192915050565b60006101e06127b4848451612756565b60208301516127c66020860182612749565b5060408301516127d96040860182612749565b5060608301516127ec6060860182612749565b506080830151608085015260a083015160a085015260c083015160c085015260e083015160e08501526101008084015181860152506101208084015181860152506101408084015181860152506101608084015181860152506101808084015181860152506101a080840151828287015261286983870182612778565b925050506101c080840151858303828701526128858382612778565b9695505050505050565b600082516128a1818460208701612ba8565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b600060208252611f6c6020830184612778565b6020808252601d908201527f4f6e6c79436f6c6c61746572616c5365727669636550726f7669646572000000604082015260600190565b60208082526012908201527127b7363ca6b7b732bca837b7b620b236b4b760711b604082015260600190565b600060208252611f6c60208301846127a4565b600061018082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a08301516129f260a0840182612749565b5060c0830151612a0560c0840182612749565b5060e0830151612a1860e0840182612749565b5061010080840151612a2c82850182612749565b50506101208381015160ff169083015261014080840151151590830152610160928301511515929091019190915290565b9384526001600160a01b039290921660208401526040830152606082015260800190565b600083825260406020830152611d7c60408301846127a4565b600085825260806020830152612ab360808301866127a4565b6001600160a01b03949094166040830152506060015292915050565b9283526020830191909152604082015260600190565b604051601f8201601f191681016001600160401b0381118282101715612b0d57612b0d612bea565b604052919050565b60008219821115612b2857612b28612bd4565b500190565b600060ff821660ff84168060ff03821115612b4a57612b4a612bd4565b019392505050565b600082612b6d57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612b8c57612b8c612bd4565b500290565b600082821015612ba357612ba3612bd4565b500390565b60005b83811015612bc3578181015183820152602001612bab565b83811115611bd35750506000910152565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612c1557600080fd5b5056fea2646970667358221220e843960bc4bc4e1c8a8f7b66fc7de6ef8be4122475d068ddb7d3648293a7573d64736f6c63430008030033",
  "libraries": {
    "AssetBond": "0xA139841E0D43BAb85DDD00469EeD93a5a000cA9e",
    "Validation": "0x08f7e687A90bbA01e8613827FD0D67e41949F9CC",
    "TimeConverter": "0x01d07C9FD2e3fbC493e0A2dE588CE1c1EaD137e4",
    "Index": "0x9Eb704b380E6caE794af479796866A264F87Aa79",
    "Rate": "0x625B4AFCF08A5f4F85fc45E56387376fF4beD6Bf"
  },
  "devdoc": {
    "author": "ELYSIA",
    "details": "Only admin can modify the variables and state of the moneypool*",
    "kind": "dev",
    "methods": {
      "borrow(address,uint256)": {
        "details": "Transfer asset bond from the collateral service provider to the moneypool and mint dTokens  corresponding to principal. After that, transfer the underlying asset",
        "params": {
          "asset": "The address of the underlying asset to withdraw",
          "tokenId": "The id of the token to collateralize*"
        }
      },
      "deposit(address,address,uint256)": {
        "details": "Deposits an amount of underlying asset and receive corresponding LTokens.",
        "params": {
          "account": "The address that will receive the LToken",
          "amount": "Deposit amount*",
          "asset": "The address of the underlying asset to deposit"
        }
      },
      "getLTokenInterestIndex(address)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The LToken interest index of reserve"
        }
      },
      "getReserveData(address)": {
        "details": "Returns the reserveData struct of underlying asset",
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        },
        "returns": {
          "_0": "The state of the reserve*"
        }
      },
      "repay(address,uint256)": {
        "details": "Transfer total repayment of the underlying asset from msg.sender to the moneypool and burn the corresponding amount of dTokens. Then release the asset bond token which is locked in the moneypool and transfer it to the borrower. The total amount of transferred underlying asset is the sum of the fee on the collateral service provider and debt on the moneypool",
        "params": {
          "asset": "The address of the underlying asset to repay",
          "tokenId": "The id of the token to retrieve*"
        }
      },
      "withdraw(address,address,uint256)": {
        "details": "Withdraws an amount of underlying asset from the reserve and burns the corresponding lTokens.",
        "params": {
          "account": "The address that will receive the underlying asset",
          "amount": "Withdrawl amount*",
          "asset": "The address of the underlying asset to withdraw"
        }
      }
    },
    "title": "Main contract for ELYFI version 1.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(address,uint256)": {
        "notice": "The collateral service provider can take out a loan of value equivalent to the principal recorded in the asset bond data. As asset bonds are deposited as collateral in the Money Pool and loans are made, financial services that link real assets and cryptoassets can be achieved."
      },
      "deposit(address,address,uint256)": {
        "notice": "By depositing virtual assets in the MoneyPool and supply liquidity, depositors can receive interest accruing from the MoneyPool.The return on the deposit arises from the interest on real asset backed loans. MoneyPool depositors who deposit certain cryptoassets receives LTokens equivalent to the deposit amount. LTokens are backed by cryptoassets deposited in the MoneyPool in a 1:1 ratio."
      },
      "getLTokenInterestIndex(address)": {
        "notice": "LToken Index is an indicator of interest occurring and accrued to liquidity providers who have provided liquidity to the Money Pool. LToken Index is calculated every time user activities occur in the Money Pool, such as loans and repayments by Money Pool participants."
      },
      "repay(address,uint256)": {
        "notice": "repays an amount of underlying asset from the reserve and burns the corresponding lTokens."
      },
      "withdraw(address,address,uint256)": {
        "notice": "The depositors can seize their virtual assets deposited in the MoneyPool whenever they wish."
      }
    },
    "notice": "This is the first version of ELYFI. ELYFI has various contract interactions centered on the Money Pool Contract. Several tokens are issued or destroyed to indicate the status of participants, and all issuance and burn processes are carried out through the Money Pool Contract. The depositor and borrower should approve the ELYFI moneypool contract to move their AssetBond token or ERC20 tokens on their behalf.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5789,
        "contract": "contracts/MoneyPool.sol:MoneyPool",
        "label": "_reserves",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(ReserveData)7094_storage)"
      },
      {
        "astId": 5793,
        "contract": "contracts/MoneyPool.sol:MoneyPool",
        "label": "_reservesList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5795,
        "contract": "contracts/MoneyPool.sol:MoneyPool",
        "label": "_reserveCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5797,
        "contract": "contracts/MoneyPool.sol:MoneyPool",
        "label": "_maxReserveCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5800,
        "contract": "contracts/MoneyPool.sol:MoneyPool",
        "label": "_connector",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IConnector)6517"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IConnector)6517": {
        "encoding": "inplace",
        "label": "contract IConnector",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(ReserveData)7094_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataStruct.ReserveData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReserveData)7094_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(ReserveData)7094_storage": {
        "encoding": "inplace",
        "label": "struct DataStruct.ReserveData",
        "members": [
          {
            "astId": 7071,
            "contract": "contracts/MoneyPool.sol:MoneyPool",
            "label": "moneyPoolFactor",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7073,
            "contract": "contracts/MoneyPool.sol:MoneyPool",
            "label": "lTokenInterestIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7075,
            "contract": "contracts/MoneyPool.sol:MoneyPool",
            "label": "borrowAPY",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7077,
            "contract": "contracts/MoneyPool.sol:MoneyPool",
            "label": "depositAPY",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7079,
            "contract": "contracts/MoneyPool.sol:MoneyPool",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7081,
            "contract": "contracts/MoneyPool.sol:MoneyPool",
            "label": "lTokenAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 7083,
            "contract": "contracts/MoneyPool.sol:MoneyPool",
            "label": "dTokenAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 7085,
            "contract": "contracts/MoneyPool.sol:MoneyPool",
            "label": "interestModelAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 7087,
            "contract": "contracts/MoneyPool.sol:MoneyPool",
            "label": "tokenizerAddress",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 7089,
            "contract": "contracts/MoneyPool.sol:MoneyPool",
            "label": "id",
            "offset": 20,
            "slot": "8",
            "type": "t_uint8"
          },
          {
            "astId": 7091,
            "contract": "contracts/MoneyPool.sol:MoneyPool",
            "label": "isPaused",
            "offset": 21,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 7093,
            "contract": "contracts/MoneyPool.sol:MoneyPool",
            "label": "isActivated",
            "offset": 22,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}