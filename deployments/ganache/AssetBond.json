{
  "address": "0xA139841E0D43BAb85DDD00469EeD93a5a000cA9e",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum DataStruct.AssetBondState",
              "name": "state",
              "type": "DataStruct.AssetBondState"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralServiceProvider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtCeiling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "couponRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delinquencyRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loanStartTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralizeTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "signerOpinionHash",
              "type": "string"
            }
          ],
          "internalType": "struct DataStruct.AssetBondData",
          "name": "assetBondData",
          "type": "tuple"
        }
      ],
      "name": "getAssetBondDebtData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "parseAssetBondId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "countryCode",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralServiceProviderIdentificationNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralLatitude",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralLatitudeSign",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralLongitude",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralLongitudeSign",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralDetail",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralCategory",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataStruct.AssetBondIdData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x8dd644cd7165c2186090b23fd14f32696a7741898db76cb9a6d63aa13fe67606",
  "receipt": {
    "to": null,
    "from": "0x715B006d4723977CcDb1581a62948f6354752e62",
    "contractAddress": "0xA139841E0D43BAb85DDD00469EeD93a5a000cA9e",
    "transactionIndex": 72,
    "gasUsed": "681725",
    "logsBloom": "0x
    "blockHash": "0x8da2c1bc19ea4388dc293c100e763cee315cd364ef3e5a374c0770adc534ac8d",
    "transactionHash": "0x8dd644cd7165c2186090b23fd14f32696a7741898db76cb9a6d63aa13fe67606",
    "logs": [],
    "blockNumber": 12830707,
    "cumulativeGasUsed": "7480835",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0c71cd98fa6269b62417fa18d1fc6779",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"enum DataStruct.AssetBondState\",\"name\":\"state\",\"type\":\"DataStruct.AssetBondState\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralServiceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delinquencyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralizeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signerOpinionHash\",\"type\":\"string\"}],\"internalType\":\"struct DataStruct.AssetBondData\",\"name\":\"assetBondData\",\"type\":\"tuple\"}],\"name\":\"getAssetBondDebtData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"parseAssetBondId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countryCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralServiceProviderIdentificationNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralLatitude\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralLatitudeSign\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralLongitude\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralLongitudeSign\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralDetail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralCategory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct DataStruct.AssetBondIdData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/logic/AssetBond.sol\":\"AssetBond\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/libraries/DataStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nlibrary DataStruct {\\n  /**\\n    @notice The main reserve data struct.\\n   */\\n  struct ReserveData {\\n    uint256 moneyPoolFactor;\\n    uint256 lTokenInterestIndex;\\n    uint256 borrowAPY;\\n    uint256 depositAPY;\\n    uint256 lastUpdateTimestamp;\\n    address lTokenAddress;\\n    address dTokenAddress;\\n    address interestModelAddress;\\n    address tokenizerAddress;\\n    uint8 id;\\n    bool isPaused;\\n    bool isActivated;\\n  }\\n\\n  /**\\n   * @notice The asset bond data struct.\\n   * @param ipfsHash The IPFS hash that contains the informations and contracts\\n   * between Collateral Service Provider and lender.\\n   * @param maturityTimestamp The amount of time measured in seconds that can elapse\\n   * before the NPL company liquidate the loan and seize the asset bond collateral.\\n   * @param borrower The address of the borrower.\\n   */\\n  struct AssetBondData {\\n    AssetBondState state;\\n    address borrower;\\n    address signer;\\n    address collateralServiceProvider;\\n    uint256 principal;\\n    uint256 debtCeiling;\\n    uint256 couponRate;\\n    uint256 interestRate;\\n    uint256 delinquencyRate;\\n    uint256 loanStartTimestamp;\\n    uint256 collateralizeTimestamp;\\n    uint256 maturityTimestamp;\\n    uint256 liquidationTimestamp;\\n    string ipfsHash; // refactor : gas\\n    string signerOpinionHash;\\n  }\\n\\n  struct AssetBondIdData {\\n    uint256 nonce;\\n    uint256 countryCode;\\n    uint256 collateralServiceProviderIdentificationNumber;\\n    uint256 collateralLatitude;\\n    uint256 collateralLatitudeSign;\\n    uint256 collateralLongitude;\\n    uint256 collateralLongitudeSign;\\n    uint256 collateralDetail;\\n    uint256 collateralCategory;\\n    uint256 productNumber;\\n  }\\n\\n  /**\\n    @notice The states of asset bond\\n    * EMPTY: After\\n    * SETTLED:\\n    * CONFIRMED:\\n    * COLLATERALIZED:\\n    * DELINQUENT:\\n    * REDEEMED:\\n    * LIQUIDATED:\\n   */\\n  enum AssetBondState {\\n    EMPTY,\\n    SETTLED,\\n    CONFIRMED,\\n    COLLATERALIZED,\\n    DELINQUENT,\\n    REDEEMED,\\n    LIQUIDATED\\n  }\\n}\\n\",\"keccak256\":\"0xfef0408a202a6814e92f396333b81c78b4fff0bb1a9411b64afe849ced4ea3b1\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport './WadRayMath.sol';\\n\\nlibrary Math {\\n  using WadRayMath for uint256;\\n\\n  uint256 internal constant SECONDSPERYEAR = 365 days;\\n\\n  function calculateLinearInterest(\\n    uint256 rate,\\n    uint256 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    uint256 timeDelta = currentTimestamp - uint256(lastUpdateTimestamp);\\n\\n    return ((rate * timeDelta) / SECONDSPERYEAR) + WadRayMath.ray();\\n  }\\n\\n  /**\\n   * @notice Author : AAVE\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n   *\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n   *\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate compounded during the timeDelta, in ray\\n   **/\\n  function calculateCompoundedInterest(\\n    uint256 rate,\\n    uint256 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 exp = currentTimestamp - lastUpdateTimestamp;\\n\\n    if (exp == 0) {\\n      return WadRayMath.ray();\\n    }\\n\\n    uint256 expMinusOne = exp - 1;\\n\\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n    // loss of precision is endurable\\n    // slither-disable-next-line divide-before-multiply\\n    uint256 ratePerSecond = rate / SECONDSPERYEAR;\\n\\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n    uint256 secondTerm = (exp * expMinusOne * basePowerTwo) / 2;\\n    uint256 thirdTerm = (exp * expMinusOne * expMinusTwo * basePowerThree) / 6;\\n\\n    return WadRayMath.ray() + (ratePerSecond * exp) + secondTerm + thirdTerm;\\n  }\\n\\n  function calculateRateInIncreasingBalance(\\n    uint256 averageRate,\\n    uint256 totalBalance,\\n    uint256 amountIn,\\n    uint256 rate\\n  ) internal pure returns (uint256, uint256) {\\n    uint256 weightedAverageRate = totalBalance.wadToRay().rayMul(averageRate);\\n    uint256 weightedAmountRate = amountIn.wadToRay().rayMul(rate);\\n\\n    uint256 newTotalBalance = totalBalance + amountIn;\\n    uint256 newAverageRate = (weightedAverageRate + weightedAmountRate).rayDiv(\\n      newTotalBalance.wadToRay()\\n    );\\n\\n    return (newTotalBalance, newAverageRate);\\n  }\\n\\n  function calculateRateInDecreasingBalance(\\n    uint256 averageRate,\\n    uint256 totalBalance,\\n    uint256 amountOut,\\n    uint256 rate\\n  ) internal pure returns (uint256, uint256) {\\n    // if decreasing amount exceeds totalBalance,\\n    // overall rate and balacne would be set 0\\n    if (totalBalance <= amountOut) {\\n      return (0, 0);\\n    }\\n\\n    uint256 weightedAverageRate = totalBalance.wadToRay().rayMul(averageRate);\\n    uint256 weightedAmountRate = amountOut.wadToRay().rayMul(rate);\\n\\n    if (weightedAverageRate <= weightedAmountRate) {\\n      return (0, 0);\\n    }\\n\\n    uint256 newTotalBalance = totalBalance - amountOut;\\n\\n    uint256 newAverageRate = (weightedAverageRate - weightedAmountRate).rayDiv(\\n      newTotalBalance.wadToRay()\\n    );\\n\\n    return (newTotalBalance, newAverageRate);\\n  }\\n}\\n\",\"keccak256\":\"0x8b72d69b39c8f545155657e365f56dc019a35cd65aecc49f039a99a27329e3d5\",\"license\":\"MIT\"},\"contracts/libraries/TimeConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @title Ethereum timestamp conversion library\\n * @author ethereum-datatime\\n */\\nlibrary TimeConverter {\\n  struct DateTime {\\n    uint16 year;\\n    uint8 month;\\n    uint8 day;\\n    uint8 hour;\\n    uint8 minute;\\n    uint8 second;\\n    uint8 weekday;\\n  }\\n\\n  uint256 constant DAY_IN_SECONDS = 86400;\\n  uint256 constant YEAR_IN_SECONDS = 31536000;\\n  uint256 constant LEAP_YEAR_IN_SECONDS = 31622400;\\n\\n  uint256 constant HOUR_IN_SECONDS = 3600;\\n  uint256 constant MINUTE_IN_SECONDS = 60;\\n\\n  uint16 constant ORIGIN_YEAR = 1970;\\n\\n  function isLeapYear(uint16 year) internal pure returns (bool) {\\n    if (year % 4 != 0) {\\n      return false;\\n    }\\n    if (year % 100 != 0) {\\n      return true;\\n    }\\n    if (year % 400 != 0) {\\n      return false;\\n    }\\n    return true;\\n  }\\n\\n  function leapYearsBefore(uint256 year) internal pure returns (uint256) {\\n    year -= 1;\\n    return year / 4 - year / 100 + year / 400;\\n  }\\n\\n  function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\\n    if (\\n      month == 1 ||\\n      month == 3 ||\\n      month == 5 ||\\n      month == 7 ||\\n      month == 8 ||\\n      month == 10 ||\\n      month == 12\\n    ) {\\n      return 31;\\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\\n      return 30;\\n    } else if (isLeapYear(year)) {\\n      return 29;\\n    } else {\\n      return 28;\\n    }\\n  }\\n\\n  function parseTimestamp(uint256 timestamp) public pure returns (DateTime memory dateTime) {\\n    uint256 secondsAccountedFor = 0;\\n    uint256 buf;\\n    uint8 i;\\n\\n    // Year\\n    dateTime.year = getYear(timestamp);\\n    buf = leapYearsBefore(dateTime.year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (dateTime.year - ORIGIN_YEAR - buf);\\n\\n    // Month\\n    uint256 secondsInMonth;\\n    for (i = 1; i <= 12; i++) {\\n      secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dateTime.year);\\n      if (secondsInMonth + secondsAccountedFor > timestamp) {\\n        dateTime.month = i;\\n        break;\\n      }\\n      secondsAccountedFor += secondsInMonth;\\n    }\\n\\n    // Day\\n    for (i = 1; i <= getDaysInMonth(dateTime.month, dateTime.year); i++) {\\n      if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\\n        dateTime.day = i;\\n        break;\\n      }\\n      secondsAccountedFor += DAY_IN_SECONDS;\\n    }\\n\\n    // Hour\\n    dateTime.hour = getHour(timestamp);\\n    // Minute\\n    dateTime.minute = getMinute(timestamp);\\n    // Second\\n    dateTime.second = getSecond(timestamp);\\n    // Day of week.\\n    dateTime.weekday = getWeekday(timestamp);\\n  }\\n\\n  function getYear(uint256 timestamp) internal pure returns (uint16) {\\n    uint256 secondsAccountedFor = 0;\\n    uint16 year;\\n    uint256 numLeapYears;\\n\\n    // Year\\n    year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\n    numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\\n\\n    while (secondsAccountedFor > timestamp) {\\n      if (isLeapYear(uint16(year - 1))) {\\n        secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        secondsAccountedFor -= YEAR_IN_SECONDS;\\n      }\\n      year -= 1;\\n    }\\n    return year;\\n  }\\n\\n  function getMonth(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).month;\\n  }\\n\\n  function getDay(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).day;\\n  }\\n\\n  function getHour(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60 / 60) % 24);\\n  }\\n\\n  function getMinute(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60) % 60);\\n  }\\n\\n  function getSecond(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8(timestamp % 60);\\n  }\\n\\n  function getWeekday(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day\\n  ) public pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, 0, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour\\n  ) public pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, hour, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour,\\n    uint8 minute,\\n    uint8 second\\n  ) public pure returns (uint256 timestamp) {\\n    uint16 i;\\n\\n    // Year\\n    for (i = ORIGIN_YEAR; i < year; i++) {\\n      if (isLeapYear(i)) {\\n        timestamp += LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        timestamp += YEAR_IN_SECONDS;\\n      }\\n    }\\n\\n    // Month\\n    uint8[12] memory monthDayCounts;\\n    monthDayCounts[0] = 31;\\n    if (isLeapYear(year)) {\\n      monthDayCounts[1] = 29;\\n    } else {\\n      monthDayCounts[1] = 28;\\n    }\\n    monthDayCounts[2] = 31;\\n    monthDayCounts[3] = 30;\\n    monthDayCounts[4] = 31;\\n    monthDayCounts[5] = 30;\\n    monthDayCounts[6] = 31;\\n    monthDayCounts[7] = 31;\\n    monthDayCounts[8] = 30;\\n    monthDayCounts[9] = 31;\\n    monthDayCounts[10] = 30;\\n    monthDayCounts[11] = 31;\\n\\n    for (i = 1; i < month; i++) {\\n      timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\n    }\\n\\n    // Day\\n    timestamp += DAY_IN_SECONDS * (day - 1);\\n    // Hour\\n    timestamp += HOUR_IN_SECONDS * (hour);\\n    // Minute\\n    timestamp += MINUTE_IN_SECONDS * (minute);\\n    // Second\\n    timestamp += second;\\n\\n    return timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x8e132343eeabd7d6423ba797a8fbbcce898a201c69b63201662dbb4e1e734cf0\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Division by Zero');\\n    uint256 halfB = b / 2;\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Division by Zero');\\n    uint256 halfB = b / 2;\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x219da6a5d0c7c597faad6e638a2f0174b75d2ae50ee97314fb4afbc244abf01f\",\"license\":\"MIT\"},\"contracts/logic/AssetBond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\nimport '../libraries/Math.sol';\\nimport '../libraries/WadRayMath.sol';\\nimport '../libraries/TimeConverter.sol';\\n\\nlibrary AssetBond {\\n  using WadRayMath for uint256;\\n  using AssetBond for DataStruct.AssetBondData;\\n\\n  uint256 constant NONCE = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00;\\n  uint256 constant COUNTRY_CODE =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC003FF;\\n  uint256 constant COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000003FFFFF;\\n  uint256 constant COLLATERAL_LATITUDE =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000FFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_LATITUDE_SIGNS =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_LONGITUDE =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000001FFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_LONGITUDE_SIGNS =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_DETAILS =\\n    0xFFFFFFFFFFFFFFFFFFFFFC0000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_CATEGORY =\\n    0xFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant PRODUCT_NUMBER =\\n    0xFFFFFFFFFFFFFFFFC00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  uint256 constant NONCE_START = 0;\\n  uint256 constant COUNTRY_CODE_START = 10;\\n  uint256 constant COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER_START = 22;\\n  uint256 constant COLLATERAL_LATITUDE_START = 72;\\n  uint256 constant COLLATERAL_LATITUDE_SIGNS_START = 100;\\n  uint256 constant COLLATERAL_LONGITUDE_START = 101;\\n  uint256 constant COLLATERAL_LONGITUDE_SIGNS_START = 129;\\n  uint256 constant COLLATERAL_DETAILS_START = 130;\\n  uint256 constant COLLATERAL_CATEGORY_START = 170;\\n  uint256 constant PRODUCT_NUMBER_START = 180;\\n\\n  function parseAssetBondId(uint256 tokenId)\\n    public\\n    pure\\n    returns (DataStruct.AssetBondIdData memory)\\n  {\\n    DataStruct.AssetBondIdData memory vars;\\n    vars.nonce = tokenId & ~NONCE;\\n    vars.countryCode = (tokenId & ~COUNTRY_CODE) >> COUNTRY_CODE_START;\\n    vars.collateralServiceProviderIdentificationNumber =\\n      (tokenId & ~COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER) >>\\n      COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER_START;\\n    vars.collateralLatitude = (tokenId & ~COLLATERAL_LATITUDE) >> COLLATERAL_LATITUDE_START;\\n    vars.collateralLatitudeSign =\\n      (tokenId & ~COLLATERAL_LATITUDE_SIGNS) >>\\n      COLLATERAL_LATITUDE_SIGNS_START;\\n    vars.collateralLongitude = (tokenId & ~COLLATERAL_LONGITUDE) >> COLLATERAL_LONGITUDE_START;\\n    vars.collateralLongitudeSign =\\n      (tokenId & ~COLLATERAL_LONGITUDE_SIGNS) >>\\n      COLLATERAL_LONGITUDE_SIGNS_START;\\n    vars.collateralDetail = (tokenId & ~COLLATERAL_DETAILS) >> COLLATERAL_DETAILS_START;\\n    vars.collateralCategory = (tokenId & ~COLLATERAL_CATEGORY) >> COLLATERAL_CATEGORY_START;\\n    vars.productNumber = (tokenId & ~PRODUCT_NUMBER) >> PRODUCT_NUMBER_START;\\n\\n    return vars;\\n  }\\n\\n  function getAssetBondDebtData(DataStruct.AssetBondData memory assetBondData)\\n    public\\n    view\\n    returns (uint256, uint256)\\n  {\\n    if (assetBondData.state != DataStruct.AssetBondState.COLLATERALIZED) {\\n      return (0, 0);\\n    }\\n\\n    uint256 accruedDebtOnMoneyPool = Math\\n    .calculateCompoundedInterest(\\n      assetBondData.interestRate,\\n      assetBondData.collateralizeTimestamp,\\n      block.timestamp\\n    ).rayMul(assetBondData.principal);\\n\\n    uint256 feeOnCollateralServiceProvider = calculateFeeOnRepayment(\\n      assetBondData,\\n      block.timestamp\\n    );\\n\\n    return (accruedDebtOnMoneyPool, feeOnCollateralServiceProvider);\\n  }\\n\\n  struct CalculateFeeOnRepaymentLocalVars {\\n    TimeConverter.DateTime paymentDateTimeStruct;\\n    uint256 paymentDate;\\n    uint256 firstTermRate;\\n    uint256 secondTermRate;\\n    uint256 secondTermOverdueRate;\\n    uint256 thirdTermRate;\\n    uint256 totalRate;\\n  }\\n\\n  function calculateFeeOnRepayment(\\n    DataStruct.AssetBondData memory assetBondData,\\n    uint256 paymentTimestamp\\n  ) internal pure returns (uint256) {\\n    CalculateFeeOnRepaymentLocalVars memory vars;\\n\\n    vars.firstTermRate = Math.calculateCompoundedInterest(\\n      assetBondData.couponRate,\\n      assetBondData.loanStartTimestamp,\\n      assetBondData.collateralizeTimestamp\\n    );\\n\\n    vars.paymentDateTimeStruct = TimeConverter.parseTimestamp(paymentTimestamp);\\n    vars.paymentDate = TimeConverter.toTimestamp(\\n      vars.paymentDateTimeStruct.year,\\n      vars.paymentDateTimeStruct.month,\\n      vars.paymentDateTimeStruct.day + 1\\n    );\\n\\n    if (paymentTimestamp <= assetBondData.liquidationTimestamp) {\\n      vars.secondTermRate =\\n        Math.calculateCompoundedInterest(\\n          assetBondData.couponRate - assetBondData.interestRate,\\n          assetBondData.collateralizeTimestamp,\\n          paymentTimestamp\\n        ) -\\n        WadRayMath.ray();\\n      vars.thirdTermRate =\\n        Math.calculateCompoundedInterest(\\n          assetBondData.couponRate,\\n          paymentTimestamp,\\n          vars.paymentDate\\n        ) -\\n        WadRayMath.ray();\\n\\n      vars.totalRate = vars.firstTermRate + vars.secondTermRate + vars.thirdTermRate;\\n\\n      return assetBondData.principal.rayMul(vars.totalRate) - assetBondData.principal;\\n    }\\n\\n    vars.secondTermRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate - assetBondData.interestRate,\\n        assetBondData.collateralizeTimestamp,\\n        assetBondData.maturityTimestamp\\n      ) -\\n      WadRayMath.ray();\\n    vars.secondTermOverdueRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate + assetBondData.delinquencyRate - assetBondData.interestRate,\\n        assetBondData.maturityTimestamp,\\n        paymentTimestamp\\n      ) -\\n      WadRayMath.ray();\\n    vars.thirdTermRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate + assetBondData.delinquencyRate,\\n        paymentTimestamp,\\n        vars.paymentDate\\n      ) -\\n      WadRayMath.ray();\\n\\n    vars.totalRate =\\n      vars.firstTermRate +\\n      vars.secondTermRate +\\n      vars.secondTermOverdueRate +\\n      vars.thirdTermRate;\\n\\n    return assetBondData.principal.rayMul(vars.totalRate) - assetBondData.principal;\\n  }\\n\\n  function getAssetBondLiquidationData(DataStruct.AssetBondData memory assetBondData)\\n    internal\\n    view\\n    returns (uint256, uint256)\\n  {\\n    uint256 accruedDebtOnMoneyPool = Math\\n    .calculateCompoundedInterest(\\n      assetBondData.interestRate,\\n      assetBondData.collateralizeTimestamp,\\n      block.timestamp\\n    ).rayMul(assetBondData.principal);\\n\\n    uint256 feeOnCollateralServiceProvider = calculateDebtAmountToLiquidation(\\n      assetBondData,\\n      block.timestamp\\n    );\\n\\n    return (accruedDebtOnMoneyPool, feeOnCollateralServiceProvider);\\n  }\\n\\n  struct CalculateDebtAmountToLiquidationLocalVars {\\n    TimeConverter.DateTime paymentDateTimeStruct;\\n    uint256 paymentDate;\\n    uint256 firstTermRate;\\n    uint256 secondTermRate;\\n    uint256 totalRate;\\n  }\\n\\n  function calculateDebtAmountToLiquidation(\\n    DataStruct.AssetBondData memory assetBondData,\\n    uint256 paymentTimestamp\\n  ) internal pure returns (uint256) {\\n    CalculateDebtAmountToLiquidationLocalVars memory vars;\\n    vars.firstTermRate = Math.calculateCompoundedInterest(\\n      assetBondData.couponRate,\\n      assetBondData.loanStartTimestamp,\\n      assetBondData.maturityTimestamp\\n    );\\n\\n    vars.paymentDateTimeStruct = TimeConverter.parseTimestamp(paymentTimestamp);\\n    vars.paymentDate = TimeConverter.toTimestamp(\\n      vars.paymentDateTimeStruct.year,\\n      vars.paymentDateTimeStruct.month,\\n      vars.paymentDateTimeStruct.day + 1\\n    );\\n\\n    vars.secondTermRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate + assetBondData.delinquencyRate,\\n        assetBondData.maturityTimestamp,\\n        vars.paymentDate\\n      ) -\\n      WadRayMath.ray();\\n    vars.totalRate = vars.firstTermRate + vars.secondTermRate;\\n\\n    return assetBondData.principal.rayMul(vars.totalRate) - assetBondData.principal;\\n  }\\n}\\n\",\"keccak256\":\"0xc38a82b90691ff0157320fa3524660e4580639cc6fb9a193228f756cd973c074\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610b5d61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063133485941461004557806367f0d339146100da575b600080fd5b610058610053366004610a08565b610102565b6040516100d19190600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b60405180910390f35b6100ed6100e8366004610833565b6101a4565b604080519283526020830191909152016100d1565b61010a61073f565b61011261073f565b6103ff8381168252610fff600a85901c1660208301526603ffffffffffff601685901c166040830152630fffffff604885901c811660608401526001606486901c81166080850152606586901c90911660a0840152608185901c1660c083015264ffffffffff608285901c1660e083015260aa84901c811661010083015260b484901c1661012082015290505b919050565b6000806003835160068111156101ca57634e487b7160e01b600052602160045260246000fd5b146101da57506000905080610214565b60006101fe84608001516101f88660e0015187610140015142610219565b90610331565b9050600061020c8542610389565b919350909150505b915091565b6000806102268484610ae4565b90508061023d57610235610730565b91505061032a565b600061024a600183610ae4565b905060006002831161025d576000610268565b610268600284610ae4565b9050600061027a6301e1338089610aa5565b905060006102888280610331565b905060006102968284610331565b905060006002836102a7888a610ac5565b6102b19190610ac5565b6102bb9190610aa5565b90506000600683876102cd8a8c610ac5565b6102d79190610ac5565b6102e19190610ac5565b6102eb9190610aa5565b905080826102f98a88610ac5565b610301610730565b61030b9190610a68565b6103159190610a68565b61031f9190610a68565b985050505050505050505b9392505050565b600082158061033e575081155b1561034b57506000610383565b676765c793fa10079d601b1b610362600282610aa5565b61036c8486610ac5565b6103769190610a68565b6103809190610aa5565b90505b92915050565b604080516101c081018252600060e08201818152610100830182905261012083018290526101408301829052610160830182905261018083018290526101a08301829052825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290526104118460c00151856101200151866101400151610219565b6040828101919091525163f97d059160e01b8152600481018490527301d07C9FD2e3fbC493e0A2dE588CE1c1EaD137e49063f97d05919060240160e06040518083038186803b15801561046357600080fd5b505af4158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b919061096d565b808252805160208201516040909201517301d07C9FD2e3fbC493e0A2dE588CE1c1EaD137e492638c8d98a092916104d3906001610a80565b6040516001600160e01b031960e086901b16815261ffff909316600484015260ff918216602484015216604482015260640160206040518083038186803b15801561051d57600080fd5b505af4158015610531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105559190610a20565b602082015261018084015183116106145761056e610730565b6105918560e001518660c001516105859190610ae4565b86610140015186610219565b61059b9190610ae4565b60608201526105a8610730565b6105bb8560c00151858460200151610219565b6105c59190610ae4565b60a08201819052606082015160408301516105e09190610a68565b6105ea9190610a68565b60c08201819052608085015190610602908290610331565b61060c9190610ae4565b915050610383565b61061c610730565b6106448560e001518660c001516106339190610ae4565b866101400151876101600151610219565b61064e9190610ae4565b606082015261065b610730565b61068e8560e001518661010001518760c001516106789190610a68565b6106829190610ae4565b86610160015186610219565b6106989190610ae4565b60808201526106a5610730565b6106c88561010001518660c001516106bd9190610a68565b858460200151610219565b6106d29190610ae4565b60a082018190526080820151606083015160408401516106f29190610a68565b6106fc9190610a68565b6107069190610a68565b60c0820181905260808501519061071e908290610331565b6107289190610ae4565b949350505050565b676765c793fa10079d601b1b90565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461019f57600080fd5b80356007811061019f57600080fd5b600082601f8301126107c8578081fd5b81356001600160401b038111156107e1576107e1610b11565b6107f4601f8201601f1916602001610a38565b818152846020838601011115610808578283fd5b816020850160208301379081016020019190915292915050565b805160ff8116811461019f57600080fd5b600060208284031215610844578081fd5b81356001600160401b038082111561085a578283fd5b81840191506101e0808387031215610870578384fd5b61087981610a38565b9050610884836107a9565b815261089260208401610792565b60208201526108a360408401610792565b60408201526108b460608401610792565b60608201526080838101359082015260a0808401359082015260c0808401359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a0808401358381111561092b578586fd5b610937888287016107b8565b8284015250506101c08084013583811115610950578586fd5b61095c888287016107b8565b918301919091525095945050505050565b600060e0828403121561097e578081fd5b61098860e0610a38565b825161ffff81168114610999578283fd5b81526109a760208401610822565b60208201526109b860408401610822565b60408201526109c960608401610822565b60608201526109da60808401610822565b60808201526109eb60a08401610822565b60a08201526109fc60c08401610822565b60c08201529392505050565b600060208284031215610a19578081fd5b5035919050565b600060208284031215610a31578081fd5b5051919050565b604051601f8201601f191681016001600160401b0381118282101715610a6057610a60610b11565b604052919050565b60008219821115610a7b57610a7b610afb565b500190565b600060ff821660ff84168060ff03821115610a9d57610a9d610afb565b019392505050565b600082610ac057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610adf57610adf610afb565b500290565b600082821015610af657610af6610afb565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122072225c5ed5104fb04a221f01332475e7761eea99da938e6ffeaa8dbb1555b95264736f6c63430008030033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063133485941461004557806367f0d339146100da575b600080fd5b610058610053366004610a08565b610102565b6040516100d19190600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b60405180910390f35b6100ed6100e8366004610833565b6101a4565b604080519283526020830191909152016100d1565b61010a61073f565b61011261073f565b6103ff8381168252610fff600a85901c1660208301526603ffffffffffff601685901c166040830152630fffffff604885901c811660608401526001606486901c81166080850152606586901c90911660a0840152608185901c1660c083015264ffffffffff608285901c1660e083015260aa84901c811661010083015260b484901c1661012082015290505b919050565b6000806003835160068111156101ca57634e487b7160e01b600052602160045260246000fd5b146101da57506000905080610214565b60006101fe84608001516101f88660e0015187610140015142610219565b90610331565b9050600061020c8542610389565b919350909150505b915091565b6000806102268484610ae4565b90508061023d57610235610730565b91505061032a565b600061024a600183610ae4565b905060006002831161025d576000610268565b610268600284610ae4565b9050600061027a6301e1338089610aa5565b905060006102888280610331565b905060006102968284610331565b905060006002836102a7888a610ac5565b6102b19190610ac5565b6102bb9190610aa5565b90506000600683876102cd8a8c610ac5565b6102d79190610ac5565b6102e19190610ac5565b6102eb9190610aa5565b905080826102f98a88610ac5565b610301610730565b61030b9190610a68565b6103159190610a68565b61031f9190610a68565b985050505050505050505b9392505050565b600082158061033e575081155b1561034b57506000610383565b676765c793fa10079d601b1b610362600282610aa5565b61036c8486610ac5565b6103769190610a68565b6103809190610aa5565b90505b92915050565b604080516101c081018252600060e08201818152610100830182905261012083018290526101408301829052610160830182905261018083018290526101a08301829052825260208201819052918101829052606081018290526080810182905260a0810182905260c081018290526104118460c00151856101200151866101400151610219565b6040828101919091525163f97d059160e01b81526004810184905273__$f064660449bb8f64614f18479211edbf10$__9063f97d05919060240160e06040518083038186803b15801561046357600080fd5b505af4158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b919061096d565b8082528051602082015160409092015173__$f064660449bb8f64614f18479211edbf10$__92638c8d98a092916104d3906001610a80565b6040516001600160e01b031960e086901b16815261ffff909316600484015260ff918216602484015216604482015260640160206040518083038186803b15801561051d57600080fd5b505af4158015610531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105559190610a20565b602082015261018084015183116106145761056e610730565b6105918560e001518660c001516105859190610ae4565b86610140015186610219565b61059b9190610ae4565b60608201526105a8610730565b6105bb8560c00151858460200151610219565b6105c59190610ae4565b60a08201819052606082015160408301516105e09190610a68565b6105ea9190610a68565b60c08201819052608085015190610602908290610331565b61060c9190610ae4565b915050610383565b61061c610730565b6106448560e001518660c001516106339190610ae4565b866101400151876101600151610219565b61064e9190610ae4565b606082015261065b610730565b61068e8560e001518661010001518760c001516106789190610a68565b6106829190610ae4565b86610160015186610219565b6106989190610ae4565b60808201526106a5610730565b6106c88561010001518660c001516106bd9190610a68565b858460200151610219565b6106d29190610ae4565b60a082018190526080820151606083015160408401516106f29190610a68565b6106fc9190610a68565b6107069190610a68565b60c0820181905260808501519061071e908290610331565b6107289190610ae4565b949350505050565b676765c793fa10079d601b1b90565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461019f57600080fd5b80356007811061019f57600080fd5b600082601f8301126107c8578081fd5b81356001600160401b038111156107e1576107e1610b11565b6107f4601f8201601f1916602001610a38565b818152846020838601011115610808578283fd5b816020850160208301379081016020019190915292915050565b805160ff8116811461019f57600080fd5b600060208284031215610844578081fd5b81356001600160401b038082111561085a578283fd5b81840191506101e0808387031215610870578384fd5b61087981610a38565b9050610884836107a9565b815261089260208401610792565b60208201526108a360408401610792565b60408201526108b460608401610792565b60608201526080838101359082015260a0808401359082015260c0808401359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a0808401358381111561092b578586fd5b610937888287016107b8565b8284015250506101c08084013583811115610950578586fd5b61095c888287016107b8565b918301919091525095945050505050565b600060e0828403121561097e578081fd5b61098860e0610a38565b825161ffff81168114610999578283fd5b81526109a760208401610822565b60208201526109b860408401610822565b60408201526109c960608401610822565b60608201526109da60808401610822565b60808201526109eb60a08401610822565b60a08201526109fc60c08401610822565b60c08201529392505050565b600060208284031215610a19578081fd5b5035919050565b600060208284031215610a31578081fd5b5051919050565b604051601f8201601f191681016001600160401b0381118282101715610a6057610a60610b11565b604052919050565b60008219821115610a7b57610a7b610afb565b500190565b600060ff821660ff84168060ff03821115610a9d57610a9d610afb565b019392505050565b600082610ac057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610adf57610adf610afb565b500290565b600082821015610af657610af6610afb565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122072225c5ed5104fb04a221f01332475e7761eea99da938e6ffeaa8dbb1555b95264736f6c63430008030033",
  "libraries": {
    "TimeConverter": "0x01d07C9FD2e3fbC493e0A2dE588CE1c1EaD137e4"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}