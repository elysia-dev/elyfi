{
  "address": "0x4c972b7E7b80BdF233be5013EC685c67a948A20A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "moneyPool_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAssetBondData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "aTokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenOwner",
              "type": "address"
            },
            {
              "internalType": "enum DataStruct.AssetBondState",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct DataPipeline.AssetBondDataLocalVars",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalLTokenSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "implicitLTokenSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lTokenInterestIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalDTokenSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDTokenSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averageRealAssetBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dTokenLastUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAPR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyAPR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "moneyPooLastUpdateTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataPipeline.ReserveDataLocalVars",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "underlyingAssetBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lTokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "implicitLtokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dTokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalDTokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averageRealAssetBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataPipeline.UserDataLocalVars",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moneyPool",
      "outputs": [
        {
          "internalType": "contract IMoneyPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5cf7e86545eeafbee3e0922c38aa842b051766cc9d16c752512a0248d9e73e7b",
  "receipt": {
    "to": null,
    "from": "0x0B16E3ea120Aeb1DeEbE2Fd8476c6aee8d4F3964",
    "contractAddress": "0x4c972b7E7b80BdF233be5013EC685c67a948A20A",
    "transactionIndex": 0,
    "gasUsed": "762031",
    "logsBloom": "0x
    "blockHash": "0x6a39ecf023a4360b001fa57a46d66db0ac68c984f7f537a638d601d1cae9028a",
    "transactionHash": "0x5cf7e86545eeafbee3e0922c38aa842b051766cc9d16c752512a0248d9e73e7b",
    "logs": [],
    "blockNumber": 9519085,
    "cumulativeGasUsed": "762031",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC5E7B290FFB318Ea28542A873B59a60Ca653B9B7"
  ],
  "solcInputHash": "6384bc112e4cb10a01932abc66540276",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"moneyPool_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAssetBondData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"enum DataStruct.AssetBondState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct DataPipeline.AssetBondDataLocalVars\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalLTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"implicitLTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lTokenInterestIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageRealAssetBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dTokenLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moneyPooLastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DataPipeline.ReserveDataLocalVars\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAssetBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"implicitLtokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalDTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageRealAssetBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct DataPipeline.UserDataLocalVars\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moneyPool\",\"outputs\":[{\"internalType\":\"contract IMoneyPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DataPipeline.sol\":\"DataPipeline\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/DataPipeline.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport './interfaces/ILToken.sol';\\nimport './interfaces/IDToken.sol';\\nimport './interfaces/IMoneyPool.sol';\\nimport './interfaces/ITokenizer.sol';\\nimport './libraries/DataStruct.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ncontract DataPipeline {\\n  IMoneyPool public moneyPool;\\n\\n  constructor(address moneyPool_) {\\n    moneyPool = IMoneyPool(moneyPool_);\\n  }\\n\\n  struct UserDataLocalVars {\\n    uint256 underlyingAssetBalance;\\n    uint256 lTokenBalance;\\n    uint256 implicitLtokenBalance;\\n    uint256 dTokenBalance;\\n    uint256 principalDTokenBalance;\\n    uint256 averageRealAssetBorrowRate;\\n    uint256 lastUpdateTimestamp;\\n  }\\n\\n  function getUserData(address asset, address user)\\n    external\\n    view\\n    returns (UserDataLocalVars memory)\\n  {\\n    UserDataLocalVars memory vars;\\n    DataStruct.ReserveData memory reserve = moneyPool.getReserveData(asset);\\n\\n    vars.underlyingAssetBalance = IERC20(asset).balanceOf(user);\\n    vars.lTokenBalance = ILToken(reserve.lTokenAddress).balanceOf(user);\\n    vars.implicitLtokenBalance = ILToken(reserve.lTokenAddress).implicitBalanceOf(user);\\n    vars.dTokenBalance = IDToken(reserve.dTokenAddress).balanceOf(user);\\n    vars.principalDTokenBalance = IDToken(reserve.dTokenAddress).principalBalanceOf(user);\\n    vars.averageRealAssetBorrowRate = IDToken(reserve.dTokenAddress)\\n      .getUserAverageRealAssetBorrowRate(user);\\n    vars.lastUpdateTimestamp = IDToken(reserve.dTokenAddress).getUserLastUpdateTimestamp(user);\\n\\n    return vars;\\n  }\\n\\n  struct ReserveDataLocalVars {\\n    uint256 totalLTokenSupply;\\n    uint256 implicitLTokenSupply;\\n    uint256 lTokenInterestIndex;\\n    uint256 principalDTokenSupply;\\n    uint256 totalDTokenSupply;\\n    uint256 averageRealAssetBorrowRate;\\n    uint256 dTokenLastUpdateTimestamp;\\n    uint256 borrowAPR;\\n    uint256 supplyAPR;\\n    uint256 moneyPooLastUpdateTimestamp;\\n  }\\n\\n  function getReserveData(address asset) external view returns (ReserveDataLocalVars memory) {\\n    ReserveDataLocalVars memory vars;\\n    DataStruct.ReserveData memory reserve = moneyPool.getReserveData(asset);\\n\\n    vars.totalLTokenSupply = ILToken(reserve.lTokenAddress).totalSupply();\\n    vars.implicitLTokenSupply = ILToken(reserve.lTokenAddress).implicitTotalSupply();\\n    vars.lTokenInterestIndex = reserve.lTokenInterestIndex;\\n    (\\n      vars.principalDTokenSupply,\\n      vars.totalDTokenSupply,\\n      vars.averageRealAssetBorrowRate,\\n      vars.dTokenLastUpdateTimestamp\\n    ) = IDToken(reserve.dTokenAddress).getDTokenData();\\n    vars.borrowAPR = reserve.borrowAPR;\\n    vars.supplyAPR = reserve.supplyAPR;\\n    vars.moneyPooLastUpdateTimestamp = reserve.lastUpdateTimestamp;\\n\\n    return vars;\\n  }\\n\\n  struct AssetBondDataLocalVars {\\n    uint256 tokenId;\\n    uint256 aTokenBalance;\\n    address tokenOwner;\\n    DataStruct.AssetBondState state;\\n  }\\n\\n  function getAssetBondData(address asset, uint256 tokenId)\\n    external\\n    view\\n    returns (AssetBondDataLocalVars memory)\\n  {\\n    AssetBondDataLocalVars memory vars;\\n    DataStruct.ReserveData memory reserve = moneyPool.getReserveData(asset);\\n    ITokenizer tokenizer = ITokenizer(reserve.tokenizerAddress);\\n    vars.tokenId = tokenId;\\n    //vars.aTokenBalance\\n\\n    return vars;\\n  }\\n}\\n\",\"keccak256\":\"0xac73e5a22c7d7b6658f4feda143f602c7eebbf11c0467e0bcf5db170a791f369\",\"license\":\"MIT\"},\"contracts/interfaces/IDToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\ninterface IDToken is IERC20Metadata {\\n  /**\\n   * @dev Emitted when new stable debt is minted\\n   * @param account The address of the account who triggered the minting\\n   * @param receiver The recipient of stable debt tokens\\n   * @param amount The amount minted\\n   * @param currentBalance The current balance of the account\\n   * @param balanceIncrease The increase in balance since the last action of the account\\n   * @param newRate The rate of the debt after the minting\\n   * @param avgStableRate The new average stable rate after the minting\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Mint(\\n    address indexed account,\\n    address indexed receiver,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 newRate,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Emitted when new stable debt is burned\\n   * @param account The address of the account\\n   * @param amount The amount being burned\\n   * @param currentBalance The current balance of the account\\n   * @param balanceIncrease The the increase in balance since the last action of the account\\n   * @param avgStableRate The new average stable rate after the burning\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Burn(\\n    address indexed account,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Mints debt token to the `receiver` address.\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param account The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `receiver` otherwise\\n   * @param receiver The address receiving the debt tokens\\n   * @param amount The amount of debt tokens to mint\\n   * @param rate The rate of the debt being minted\\n   **/\\n  function mint(\\n    address account,\\n    address receiver,\\n    uint256 amount,\\n    uint256 rate\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Burns debt of `account`\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param account The address of the account getting his debt burned\\n   * @param amount The amount of debt tokens getting burned\\n   **/\\n  function burn(address account, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the average rate of all the stable rate loans.\\n   * @return The average stable rate\\n   **/\\n  function getTotalAverageRealAssetBorrowRate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the stable rate of the account debt\\n   * @return The stable rate of the account\\n   **/\\n  function getUserAverageRealAssetBorrowRate(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the account\\n   * @return The timestamp\\n   **/\\n  function getUserLastUpdateTimestamp(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the principal, the total supply and the average stable rate\\n   **/\\n  function getDTokenData()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the total supply\\n   * @return The timestamp\\n   **/\\n  function getTotalSupplyLastUpdated() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total supply and the average stable rate\\n   **/\\n  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the principal debt balance of the account\\n   * @return The debt balance of the account since the last burn/mint action\\n   **/\\n  function principalBalanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4071ec4dfa9ecffc6d22eeec8f6472997e93bac04d202456138aed916f925b17\",\"license\":\"MIT\"},\"contracts/interfaces/ILToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ILToken is IERC20 {\\n  /**\\n   * @dev Emitted after lTokens are minted\\n   * @param account The receiver of minted lToken\\n   * @param amount The amount being minted\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed account, uint256 amount, uint256 index);\\n\\n  /**\\n   * @dev Emitted after lTokens are burned\\n   * @param account The owner of the lTokens, getting them burned\\n   * @param underlyingAssetReceiver The address that will receive the underlying asset\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(\\n    address indexed account,\\n    address indexed underlyingAssetReceiver,\\n    uint256 amount,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param account The account whose tokens are being transferred\\n   * @param to The recipient\\n   * @param amount The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed account, address indexed to, uint256 amount, uint256 index);\\n\\n  function mint(\\n    address account,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Burns lTokens account `account` and sends the equivalent amount of underlying to `receiver`\\n   * @param account The owner of the lTokens, getting them burned\\n   * @param receiver The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address account,\\n    address receiver,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this LTokens (E.g. WETH for aWETH)\\n   **/\\n  function getUnderlyingAsset() external view returns (address);\\n\\n  function implicitBalanceOf(address account) external view returns (uint256);\\n\\n  function implicitTotalSupply() external view returns (uint256);\\n\\n  function transferUnderlyingTo(address underlyingAssetReceiver, uint256 amount)\\n    external\\n    returns (uint256);\\n}\\n\",\"keccak256\":\"0x8fbfa603360df2b02e3ebebd08c59c2a72e4eaf1896a10518f5b4f0434b50d55\",\"license\":\"MIT\"},\"contracts/interfaces/IMoneyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface IMoneyPool {\\n  event InvestMoneyPool(address indexed asset, address indexed account, uint256 amount);\\n\\n  event WithdrawMoneyPool(\\n    address indexed asset,\\n    address indexed account,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  event BorrowAgainstAssetBond(\\n    address indexed asset,\\n    address indexed borrower,\\n    address indexed receiver,\\n    uint256 tokenId,\\n    uint256 borrowAPR,\\n    uint256 borrowAmount\\n  );\\n\\n  event RepayAgainstAssetBond();\\n\\n  function investMoneyPool(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external;\\n\\n  function withdrawMoneyPool(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external returns (uint256);\\n\\n  function borrowAgainstABToken(\\n    address asset,\\n    address receiver,\\n    uint256 borrowAmount,\\n    uint256 tokenID\\n  ) external;\\n\\n  function getLTokenInterestIndex(address asset) external view returns (uint256);\\n\\n  function getReserveData(address asset) external view returns (DataStruct.ReserveData memory);\\n\\n  function validateLTokenTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 previousFromBalance,\\n    uint256 previousToBalance\\n  ) external;\\n\\n  function addNewReserve(\\n    address asset,\\n    address lToken,\\n    address dToken,\\n    address interestModel,\\n    address tokenizer,\\n    uint256 moneyPoolFactor_\\n  ) external;\\n}\\n\",\"keccak256\":\"0x15c5f4049b182ec88f2381c4e2045bb31e9317547057aa5a965ab36365cf1a54\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface ITokenizer {\\n  event EmptyABTokenMinted(address indexed account, uint256 tokenId);\\n\\n  event Invest(address indexed asset, address indexed account, uint256 amount);\\n\\n  event Withdraw(\\n    address indexed asset,\\n    address indexed account,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  function mintABToken(\\n    address account,\\n    uint256 id // information about Co and borrower\\n  ) external;\\n\\n  function getTokenizerData() external view returns (DataStruct.TokenizerData memory);\\n\\n  function getAssetBondData(uint256 tokenId)\\n    external\\n    view\\n    returns (DataStruct.AssetBondData memory);\\n\\n  function collateralizeAssetBond(\\n    address account,\\n    uint256 tokenId,\\n    uint256 borrowAmount,\\n    uint256 borrowAPR\\n  ) external;\\n\\n  function releaseAssetBond(address account, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x016a07aa4f33482f085ab9c68f7f56856e163297a6f024c3f4cc5badb14529fe\",\"license\":\"MIT\"},\"contracts/libraries/DataStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nlibrary DataStruct {\\n  /**\\n    @notice The main reserve data struct.\\n   */\\n  struct ReserveData {\\n    uint256 moneyPoolFactor;\\n    uint256 lTokenInterestIndex;\\n    uint256 borrowAPR;\\n    uint256 supplyAPR;\\n    uint256 totalDepositedAssetBondCount;\\n    uint256 lastUpdateTimestamp;\\n    address lTokenAddress;\\n    address dTokenAddress;\\n    address interestModelAddress;\\n    address tokenizerAddress;\\n    uint8 id;\\n    bool isPaused;\\n    bool isActivated;\\n  }\\n\\n  /**\\n   * @notice The asset bond data struct.\\n   * @param ipfsHash The IPFS hash that contains the informations and contracts\\n   * between Collateral Service Provider and lender.\\n   * @param maturityDate The amount of time measured in seconds that can elapse\\n   * before the NPL company liquidate the loan and seize the asset bond collateral.\\n   * @param borrower The address of the borrower.\\n   */\\n  struct AssetBondData {\\n    address asset;\\n    address borrower;\\n    address lawfirm;\\n    string ipfsHash; // refactor : gas\\n    uint256 collateralValue;\\n    uint256 borrowAPR;\\n    uint256 sign; // refactor : apply oz - sign\\n    uint256 issuanceDate;\\n    uint256 dueDate;\\n    uint256 maturityDate;\\n    uint256 lastUpdateTimestamp;\\n    AssetBondState state;\\n  }\\n\\n  /**\\n    @notice The states of asset bond\\n    * EMPTY: After\\n    * SETTLED:\\n    * CONFIRMED:\\n    * COLLATERALIZED:\\n    * MATURED:\\n   */\\n  enum AssetBondState {EMPTY, SETTLED, CONFIRMED, COLLATERALIZED, MATURED, NOT_PERFORMED}\\n\\n  struct TokenizerData {\\n    address asset;\\n    uint256 averageATokenAPR;\\n    uint256 totalATokenSupply;\\n    uint256 lastUpdateTimestamp;\\n  }\\n}\\n\",\"keccak256\":\"0xcbcc25b812cd805fa7a93882b934912fe797dc7c9f3298a5256f2c00eb6e2833\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610cf9380380610cf983398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b610c68806100916000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063342354431461005157806335ea6a75146100815780635c118edc1461010d578063f4eeefe91461012d575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f3660046109e6565b610196565b6040516100789190600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b61012061011b366004610a41565b6103e7565b6040516100789190610b8c565b61014061013b366004610a09565b6104c1565b6040516100789190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b61019e610962565b6101a6610962565b600080546040516335ea6a7560e01b81526001600160a01b038681166004830152909116906335ea6a75906024016101a06040518083038186803b1580156101ed57600080fd5b505afa158015610201573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102259190610a6c565b90508060c001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561026457600080fd5b505afa158015610278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029c9190610b3f565b8260000181815250508060c001516001600160a01b031663d1f2b4d96040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e257600080fd5b505afa1580156102f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031a9190610b3f565b82602001818152505080602001518260400181815250508060e001516001600160a01b031663723f319e6040518163ffffffff1660e01b815260040160806040518083038186803b15801561036e57600080fd5b505afa158015610382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a69190610b57565b60c086015260a0808601919091526080850191909152606080850192909252604083015160e085015290820151610100840152015161012082015292915050565b61040f6040805160808101825260008082526020820181905291810182905290606082015290565b6104376040805160808101825260008082526020820181905291810182905290606082015290565b600080546040516335ea6a7560e01b81526001600160a01b038781166004830152909116906335ea6a75906024016101a06040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b69190610a6c565b505091825250919050565b6105016040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6105416040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080546040516335ea6a7560e01b81526001600160a01b038781166004830152909116906335ea6a75906024016101a06040518083038186803b15801561058857600080fd5b505afa15801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c09190610a6c565b6040516370a0823160e01b81526001600160a01b038681166004830152919250908616906370a082319060240160206040518083038186803b15801561060557600080fd5b505afa158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d9190610b3f565b825260c08101516040516370a0823160e01b81526001600160a01b038681166004830152909116906370a082319060240160206040518083038186803b15801561068657600080fd5b505afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610b3f565b602083015260c0810151604051630103f1a160e71b81526001600160a01b038681166004830152909116906381f8d0809060240160206040518083038186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190610b3f565b60408084019190915260e082015190516370a0823160e01b81526001600160a01b038681166004830152909116906370a082319060240160206040518083038186803b15801561079157600080fd5b505afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c99190610b3f565b606083015260e081015160405163631a6fd560e11b81526001600160a01b0386811660048301529091169063c634dfaa9060240160206040518083038186803b15801561081557600080fd5b505afa158015610829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084d9190610b3f565b608083015260e08101516040516319b7dc3360e21b81526001600160a01b038681166004830152909116906366df70cc9060240160206040518083038186803b15801561089957600080fd5b505afa1580156108ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d19190610b3f565b60a083015260e0810151604051630ad7bcdf60e41b81526001600160a01b0386811660048301529091169063ad7bcdf09060240160206040518083038186803b15801561091d57600080fd5b505afa158015610931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109559190610b3f565b60c0830152509392505050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80516109c081610c1a565b919050565b805180151581146109c057600080fd5b805160ff811681146109c057600080fd5b6000602082840312156109f7578081fd5b8135610a0281610c1a565b9392505050565b60008060408385031215610a1b578081fd5b8235610a2681610c1a565b91506020830135610a3681610c1a565b809150509250929050565b60008060408385031215610a53578182fd5b8235610a5e81610c1a565b946020939093013593505050565b60006101a08284031215610a7e578081fd5b610a86610be2565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a0820152610ac860c084016109b5565b60c0820152610ad960e084016109b5565b60e0820152610100610aec8185016109b5565b90820152610120610afe8482016109b5565b90820152610140610b108482016109d5565b90820152610160610b228482016109c5565b90820152610180610b348482016109c5565b908201529392505050565b600060208284031215610b50578081fd5b5051919050565b60008060008060808587031215610b6c578182fd5b505082516020840151604085015160609095015191969095509092509050565b81518152602080830151908201526040808301516001600160a01b0316908201526060820151608082019060068110610bd557634e487b7160e01b600052602160045260246000fd5b8060608401525092915050565b6040516101a0810167ffffffffffffffff81118282101715610c1457634e487b7160e01b600052604160045260246000fd5b60405290565b6001600160a01b0381168114610c2f57600080fd5b5056fea2646970667358221220fda0a52c0a90a2ab0d576cc5f927a0497f951d52efbf11303a69e98af8a1967464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063342354431461005157806335ea6a75146100815780635c118edc1461010d578063f4eeefe91461012d575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f3660046109e6565b610196565b6040516100789190600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b61012061011b366004610a41565b6103e7565b6040516100789190610b8c565b61014061013b366004610a09565b6104c1565b6040516100789190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b61019e610962565b6101a6610962565b600080546040516335ea6a7560e01b81526001600160a01b038681166004830152909116906335ea6a75906024016101a06040518083038186803b1580156101ed57600080fd5b505afa158015610201573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102259190610a6c565b90508060c001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561026457600080fd5b505afa158015610278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029c9190610b3f565b8260000181815250508060c001516001600160a01b031663d1f2b4d96040518163ffffffff1660e01b815260040160206040518083038186803b1580156102e257600080fd5b505afa1580156102f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031a9190610b3f565b82602001818152505080602001518260400181815250508060e001516001600160a01b031663723f319e6040518163ffffffff1660e01b815260040160806040518083038186803b15801561036e57600080fd5b505afa158015610382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a69190610b57565b60c086015260a0808601919091526080850191909152606080850192909252604083015160e085015290820151610100840152015161012082015292915050565b61040f6040805160808101825260008082526020820181905291810182905290606082015290565b6104376040805160808101825260008082526020820181905291810182905290606082015290565b600080546040516335ea6a7560e01b81526001600160a01b038781166004830152909116906335ea6a75906024016101a06040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b69190610a6c565b505091825250919050565b6105016040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6105416040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080546040516335ea6a7560e01b81526001600160a01b038781166004830152909116906335ea6a75906024016101a06040518083038186803b15801561058857600080fd5b505afa15801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c09190610a6c565b6040516370a0823160e01b81526001600160a01b038681166004830152919250908616906370a082319060240160206040518083038186803b15801561060557600080fd5b505afa158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d9190610b3f565b825260c08101516040516370a0823160e01b81526001600160a01b038681166004830152909116906370a082319060240160206040518083038186803b15801561068657600080fd5b505afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610b3f565b602083015260c0810151604051630103f1a160e71b81526001600160a01b038681166004830152909116906381f8d0809060240160206040518083038186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190610b3f565b60408084019190915260e082015190516370a0823160e01b81526001600160a01b038681166004830152909116906370a082319060240160206040518083038186803b15801561079157600080fd5b505afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c99190610b3f565b606083015260e081015160405163631a6fd560e11b81526001600160a01b0386811660048301529091169063c634dfaa9060240160206040518083038186803b15801561081557600080fd5b505afa158015610829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084d9190610b3f565b608083015260e08101516040516319b7dc3360e21b81526001600160a01b038681166004830152909116906366df70cc9060240160206040518083038186803b15801561089957600080fd5b505afa1580156108ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d19190610b3f565b60a083015260e0810151604051630ad7bcdf60e41b81526001600160a01b0386811660048301529091169063ad7bcdf09060240160206040518083038186803b15801561091d57600080fd5b505afa158015610931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109559190610b3f565b60c0830152509392505050565b604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80516109c081610c1a565b919050565b805180151581146109c057600080fd5b805160ff811681146109c057600080fd5b6000602082840312156109f7578081fd5b8135610a0281610c1a565b9392505050565b60008060408385031215610a1b578081fd5b8235610a2681610c1a565b91506020830135610a3681610c1a565b809150509250929050565b60008060408385031215610a53578182fd5b8235610a5e81610c1a565b946020939093013593505050565b60006101a08284031215610a7e578081fd5b610a86610be2565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a0820152610ac860c084016109b5565b60c0820152610ad960e084016109b5565b60e0820152610100610aec8185016109b5565b90820152610120610afe8482016109b5565b90820152610140610b108482016109d5565b90820152610160610b228482016109c5565b90820152610180610b348482016109c5565b908201529392505050565b600060208284031215610b50578081fd5b5051919050565b60008060008060808587031215610b6c578182fd5b505082516020840151604085015160609095015191969095509092509050565b81518152602080830151908201526040808301516001600160a01b0316908201526060820151608082019060068110610bd557634e487b7160e01b600052602160045260246000fd5b8060608401525092915050565b6040516101a0810167ffffffffffffffff81118282101715610c1457634e487b7160e01b600052604160045260246000fd5b60405290565b6001600160a01b0381168114610c2f57600080fd5b5056fea2646970667358221220fda0a52c0a90a2ab0d576cc5f927a0497f951d52efbf11303a69e98af8a1967464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3376,
        "contract": "contracts/DataPipeline.sol:DataPipeline",
        "label": "moneyPool",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IMoneyPool)5568"
      }
    ],
    "types": {
      "t_contract(IMoneyPool)5568": {
        "encoding": "inplace",
        "label": "contract IMoneyPool",
        "numberOfBytes": "20"
      }
    }
  }
}