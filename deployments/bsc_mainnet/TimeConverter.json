{
  "address": "0x144d0B69Da2cAe4c299357e2Fc5B4C37a234Aa43",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "parseTimestamp",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "year",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "month",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "day",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "hour",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "minute",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "second",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "weekday",
              "type": "uint8"
            }
          ],
          "internalType": "struct TimeConverter.DateTime",
          "name": "dateTime",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "month",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "day",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "hour",
          "type": "uint8"
        }
      ],
      "name": "toTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "month",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "day",
          "type": "uint8"
        }
      ],
      "name": "toTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "year",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "month",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "day",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "hour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "minute",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "second",
          "type": "uint8"
        }
      ],
      "name": "toTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xbcd081345a4894837f43a768ec6c72340a0b8806caac3fc24e9f85c70fb70a35",
  "receipt": {
    "to": null,
    "from": "0x8d86dD9fe7318e04Cc51440C0252663f7FeCF01E",
    "contractAddress": "0x144d0B69Da2cAe4c299357e2Fc5B4C37a234Aa43",
    "transactionIndex": 0,
    "gasUsed": "641886",
    "logsBloom": "0x
    "blockHash": "0x55107d91dd0819e548179995eb67dee1608f9615b43274fc28a34f9eb91d1aca",
    "transactionHash": "0xbcd081345a4894837f43a768ec6c72340a0b8806caac3fc24e9f85c70fb70a35",
    "logs": [],
    "blockNumber": 14521955,
    "cumulativeGasUsed": "641886",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "efcd845ea837ae5482eec05fa8d312de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"parseTimestamp\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"second\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"weekday\",\"type\":\"uint8\"}],\"internalType\":\"struct TimeConverter.DateTime\",\"name\":\"dateTime\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"second\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ethereum-datatime\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Ethereum timestamp conversion library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/TimeConverter.sol\":\"TimeConverter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/libraries/TimeConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @title Ethereum timestamp conversion library\\n * @author ethereum-datatime\\n */\\nlibrary TimeConverter {\\n  struct DateTime {\\n    uint16 year;\\n    uint8 month;\\n    uint8 day;\\n    uint8 hour;\\n    uint8 minute;\\n    uint8 second;\\n    uint8 weekday;\\n  }\\n\\n  uint256 constant DAY_IN_SECONDS = 86400;\\n  uint256 constant YEAR_IN_SECONDS = 31536000;\\n  uint256 constant LEAP_YEAR_IN_SECONDS = 31622400;\\n\\n  uint256 constant HOUR_IN_SECONDS = 3600;\\n  uint256 constant MINUTE_IN_SECONDS = 60;\\n\\n  uint16 constant ORIGIN_YEAR = 1970;\\n\\n  function isLeapYear(uint16 year) internal pure returns (bool) {\\n    if (year % 4 != 0) {\\n      return false;\\n    }\\n    if (year % 100 != 0) {\\n      return true;\\n    }\\n    if (year % 400 != 0) {\\n      return false;\\n    }\\n    return true;\\n  }\\n\\n  function leapYearsBefore(uint256 year) internal pure returns (uint256) {\\n    year -= 1;\\n    return year / 4 - year / 100 + year / 400;\\n  }\\n\\n  function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\\n    if (\\n      month == 1 ||\\n      month == 3 ||\\n      month == 5 ||\\n      month == 7 ||\\n      month == 8 ||\\n      month == 10 ||\\n      month == 12\\n    ) {\\n      return 31;\\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\\n      return 30;\\n    } else if (isLeapYear(year)) {\\n      return 29;\\n    } else {\\n      return 28;\\n    }\\n  }\\n\\n  function parseTimestamp(uint256 timestamp) public pure returns (DateTime memory dateTime) {\\n    uint256 secondsAccountedFor = 0;\\n    uint256 buf;\\n    uint8 i;\\n\\n    // Year\\n    dateTime.year = getYear(timestamp);\\n    buf = leapYearsBefore(dateTime.year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (dateTime.year - ORIGIN_YEAR - buf);\\n\\n    // Month\\n    uint256 secondsInMonth;\\n    for (i = 1; i <= 12; i++) {\\n      secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dateTime.year);\\n      if (secondsInMonth + secondsAccountedFor > timestamp) {\\n        dateTime.month = i;\\n        break;\\n      }\\n      secondsAccountedFor += secondsInMonth;\\n    }\\n\\n    // Day\\n    for (i = 1; i <= getDaysInMonth(dateTime.month, dateTime.year); i++) {\\n      if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\\n        dateTime.day = i;\\n        break;\\n      }\\n      secondsAccountedFor += DAY_IN_SECONDS;\\n    }\\n\\n    // Hour\\n    dateTime.hour = getHour(timestamp);\\n    // Minute\\n    dateTime.minute = getMinute(timestamp);\\n    // Second\\n    dateTime.second = getSecond(timestamp);\\n    // Day of week.\\n    dateTime.weekday = getWeekday(timestamp);\\n  }\\n\\n  function getYear(uint256 timestamp) internal pure returns (uint16) {\\n    uint256 secondsAccountedFor = 0;\\n    uint16 year;\\n    uint256 numLeapYears;\\n\\n    // Year\\n    year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\n    numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\\n\\n    while (secondsAccountedFor > timestamp) {\\n      if (isLeapYear(uint16(year - 1))) {\\n        secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        secondsAccountedFor -= YEAR_IN_SECONDS;\\n      }\\n      year -= 1;\\n    }\\n    return year;\\n  }\\n\\n  function getMonth(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).month;\\n  }\\n\\n  function getDay(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).day;\\n  }\\n\\n  function getHour(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60 / 60) % 24);\\n  }\\n\\n  function getMinute(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60) % 60);\\n  }\\n\\n  function getSecond(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8(timestamp % 60);\\n  }\\n\\n  function getWeekday(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day\\n  ) public pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, 0, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour\\n  ) public pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, hour, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour,\\n    uint8 minute,\\n    uint8 second\\n  ) public pure returns (uint256 timestamp) {\\n    uint16 i;\\n\\n    // Year\\n    for (i = ORIGIN_YEAR; i < year; i++) {\\n      if (isLeapYear(i)) {\\n        timestamp += LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        timestamp += YEAR_IN_SECONDS;\\n      }\\n    }\\n\\n    // Month\\n    uint8[12] memory monthDayCounts;\\n    monthDayCounts[0] = 31;\\n    if (isLeapYear(year)) {\\n      monthDayCounts[1] = 29;\\n    } else {\\n      monthDayCounts[1] = 28;\\n    }\\n    monthDayCounts[2] = 31;\\n    monthDayCounts[3] = 30;\\n    monthDayCounts[4] = 31;\\n    monthDayCounts[5] = 30;\\n    monthDayCounts[6] = 31;\\n    monthDayCounts[7] = 31;\\n    monthDayCounts[8] = 30;\\n    monthDayCounts[9] = 31;\\n    monthDayCounts[10] = 30;\\n    monthDayCounts[11] = 31;\\n\\n    for (i = 1; i < month; i++) {\\n      timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\n    }\\n\\n    // Day\\n    timestamp += DAY_IN_SECONDS * (day - 1);\\n    // Hour\\n    timestamp += HOUR_IN_SECONDS * (hour);\\n    // Minute\\n    timestamp += MINUTE_IN_SECONDS * (minute);\\n    // Second\\n    timestamp += second;\\n\\n    return timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x8e132343eeabd7d6423ba797a8fbbcce898a201c69b63201662dbb4e1e734cf0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610aa561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80637f7918331461005b5780638c8d98a0146100815780639054bdec14610094578063f97d0591146100a7575b600080fd5b61006e610069366004610846565b610125565b6040519081526020015b60405180910390f35b61006e61008f366004610804565b61013f565b61006e6100a2366004610899565b610159565b6100ba6100b536600461090c565b610318565b6040516100789190600060e08201905061ffff8351168252602083015160ff80821660208501528060408601511660408501528060608601511660608501528060808601511660808501528060a08601511660a08501528060c08601511660c0850152505092915050565b600061013685858585600080610159565b95945050505050565b60006101518484846000806000610159565b949350505050565b60006107b25b8761ffff168161ffff1610156101b55761017881610500565b156101925761018b6301e2850083610924565b91506101a3565b6101a06301e1338083610924565b91505b806101ad816109cc565b91505061015f565b6101bd6107c2565b601f81526101ca89610500565b156101db57601d60208201526101e3565b601c60208201525b601f60408201819052601e606083018190526080830182905260a0830181905260c0830182905260e0830182905261010083018190526101208301829052610140830152610160820152600191505b8760ff168261ffff1610156102a2578061024d60018461096f565b61ffff16600c811061026f57634e487b7160e01b600052603260045260246000fd5b60200201516102849060ff1662015180610950565b61028e9084610924565b92508161029a816109cc565b925050610232565b6102ad6001886109a9565b6102bd9060ff1662015180610950565b6102c79084610924565b92506102d860ff8716610e10610950565b6102e29084610924565b92506102f260ff8616603c610950565b6102fc9084610924565b925061030b60ff851684610924565b9998505050505050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905290808061035c85610560565b61ffff16845261036d6107b2610655565b845161037c9061ffff16610655565b6103869190610992565b9150610396826301e28500610950565b6103a09084610924565b9250816107b285600001516103b5919061096f565b61ffff166103c39190610992565b6103d1906301e13380610950565b6103db9084610924565b92506000600191505b600c8260ff161161044c576103fd8286600001516106a0565b61040d9060ff1662015180610950565b90508561041a8583610924565b111561042e5760ff8216602086015261044c565b6104388185610924565b935081610444816109ee565b9250506103e4565b600191505b610463856020015186600001516106a0565b60ff168260ff16116104b2578561047d8562015180610924565b11156104915760ff821660408601526104b2565b61049e6201518085610924565b9350816104aa816109ee565b925050610451565b6104bb86610767565b60ff1660608601526104cc8661078b565b60ff1660808601526104dd86610799565b60ff1660a08601526104ee866107a6565b60ff1660c08601525092949350505050565b600061050d600483610a0e565b61ffff161561051e5750600061055b565b610529606483610a0e565b61ffff161561053a5750600161055b565b61054661019083610a0e565b61ffff16156105575750600061055b565b5060015b919050565b60008080806105736301e133808661093c565b61057f906107b2610924565b915061058c6107b2610655565b6105998361ffff16610655565b6105a39190610992565b90506105b3816301e28500610950565b6105bd9084610924565b9250806105cc6107b28461096f565b61ffff166105da9190610992565b6105e8906301e13380610950565b6105f29084610924565b92505b8483111561064d5761061061060b60018461096f565b610500565b1561062a576106236301e2850084610992565b925061063b565b6106386301e1338084610992565b92505b61064660018361096f565b91506105f5565b509392505050565b6000610662600183610992565b91506106706101908361093c565b61067b60648461093c565b61068660048561093c565b6106909190610992565b61069a9190610924565b92915050565b60008260ff16600114806106b757508260ff166003145b806106c557508260ff166005145b806106d357508260ff166007145b806106e157508260ff166008145b806106ef57508260ff16600a145b806106fd57508260ff16600c145b1561070a5750601f61069a565b8260ff166004148061071f57508260ff166006145b8061072d57508260ff166009145b8061073b57508260ff16600b145b156107485750601e61069a565b61075182610500565b1561075e5750601d61069a565b50601c92915050565b60006018603c610777818561093c565b610781919061093c565b61069a9190610a2f565b6000603c610781818461093c565b600061069a603c83610a2f565b600060076107b7620151808461093c565b610781906004610924565b604051806101800160405280600c906020820280368337509192915050565b803561ffff8116811461055b57600080fd5b803560ff8116811461055b57600080fd5b600080600060608486031215610818578283fd5b610821846107e1565b925061082f602085016107f3565b915061083d604085016107f3565b90509250925092565b6000806000806080858703121561085b578081fd5b610864856107e1565b9350610872602086016107f3565b9250610880604086016107f3565b915061088e606086016107f3565b905092959194509250565b60008060008060008060c087890312156108b1578182fd5b6108ba876107e1565b95506108c8602088016107f3565b94506108d6604088016107f3565b93506108e4606088016107f3565b92506108f2608088016107f3565b915061090060a088016107f3565b90509295509295509295565b60006020828403121561091d578081fd5b5035919050565b6000821982111561093757610937610a43565b500190565b60008261094b5761094b610a59565b500490565b600081600019048311821515161561096a5761096a610a43565b500290565b600061ffff8381169083168181101561098a5761098a610a43565b039392505050565b6000828210156109a4576109a4610a43565b500390565b600060ff821660ff8416808210156109c3576109c3610a43565b90039392505050565b600061ffff808316818114156109e4576109e4610a43565b6001019392505050565b600060ff821660ff811415610a0557610a05610a43565b60010192915050565b600061ffff80841680610a2357610a23610a59565b92169190910692915050565b600082610a3e57610a3e610a59565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220ec50bff0a4bcce4804f65748d63286f877fda7398883c1a3637636a36e84afe964736f6c63430008030033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c80637f7918331461005b5780638c8d98a0146100815780639054bdec14610094578063f97d0591146100a7575b600080fd5b61006e610069366004610846565b610125565b6040519081526020015b60405180910390f35b61006e61008f366004610804565b61013f565b61006e6100a2366004610899565b610159565b6100ba6100b536600461090c565b610318565b6040516100789190600060e08201905061ffff8351168252602083015160ff80821660208501528060408601511660408501528060608601511660608501528060808601511660808501528060a08601511660a08501528060c08601511660c0850152505092915050565b600061013685858585600080610159565b95945050505050565b60006101518484846000806000610159565b949350505050565b60006107b25b8761ffff168161ffff1610156101b55761017881610500565b156101925761018b6301e2850083610924565b91506101a3565b6101a06301e1338083610924565b91505b806101ad816109cc565b91505061015f565b6101bd6107c2565b601f81526101ca89610500565b156101db57601d60208201526101e3565b601c60208201525b601f60408201819052601e606083018190526080830182905260a0830181905260c0830182905260e0830182905261010083018190526101208301829052610140830152610160820152600191505b8760ff168261ffff1610156102a2578061024d60018461096f565b61ffff16600c811061026f57634e487b7160e01b600052603260045260246000fd5b60200201516102849060ff1662015180610950565b61028e9084610924565b92508161029a816109cc565b925050610232565b6102ad6001886109a9565b6102bd9060ff1662015180610950565b6102c79084610924565b92506102d860ff8716610e10610950565b6102e29084610924565b92506102f260ff8616603c610950565b6102fc9084610924565b925061030b60ff851684610924565b9998505050505050505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905290808061035c85610560565b61ffff16845261036d6107b2610655565b845161037c9061ffff16610655565b6103869190610992565b9150610396826301e28500610950565b6103a09084610924565b9250816107b285600001516103b5919061096f565b61ffff166103c39190610992565b6103d1906301e13380610950565b6103db9084610924565b92506000600191505b600c8260ff161161044c576103fd8286600001516106a0565b61040d9060ff1662015180610950565b90508561041a8583610924565b111561042e5760ff8216602086015261044c565b6104388185610924565b935081610444816109ee565b9250506103e4565b600191505b610463856020015186600001516106a0565b60ff168260ff16116104b2578561047d8562015180610924565b11156104915760ff821660408601526104b2565b61049e6201518085610924565b9350816104aa816109ee565b925050610451565b6104bb86610767565b60ff1660608601526104cc8661078b565b60ff1660808601526104dd86610799565b60ff1660a08601526104ee866107a6565b60ff1660c08601525092949350505050565b600061050d600483610a0e565b61ffff161561051e5750600061055b565b610529606483610a0e565b61ffff161561053a5750600161055b565b61054661019083610a0e565b61ffff16156105575750600061055b565b5060015b919050565b60008080806105736301e133808661093c565b61057f906107b2610924565b915061058c6107b2610655565b6105998361ffff16610655565b6105a39190610992565b90506105b3816301e28500610950565b6105bd9084610924565b9250806105cc6107b28461096f565b61ffff166105da9190610992565b6105e8906301e13380610950565b6105f29084610924565b92505b8483111561064d5761061061060b60018461096f565b610500565b1561062a576106236301e2850084610992565b925061063b565b6106386301e1338084610992565b92505b61064660018361096f565b91506105f5565b509392505050565b6000610662600183610992565b91506106706101908361093c565b61067b60648461093c565b61068660048561093c565b6106909190610992565b61069a9190610924565b92915050565b60008260ff16600114806106b757508260ff166003145b806106c557508260ff166005145b806106d357508260ff166007145b806106e157508260ff166008145b806106ef57508260ff16600a145b806106fd57508260ff16600c145b1561070a5750601f61069a565b8260ff166004148061071f57508260ff166006145b8061072d57508260ff166009145b8061073b57508260ff16600b145b156107485750601e61069a565b61075182610500565b1561075e5750601d61069a565b50601c92915050565b60006018603c610777818561093c565b610781919061093c565b61069a9190610a2f565b6000603c610781818461093c565b600061069a603c83610a2f565b600060076107b7620151808461093c565b610781906004610924565b604051806101800160405280600c906020820280368337509192915050565b803561ffff8116811461055b57600080fd5b803560ff8116811461055b57600080fd5b600080600060608486031215610818578283fd5b610821846107e1565b925061082f602085016107f3565b915061083d604085016107f3565b90509250925092565b6000806000806080858703121561085b578081fd5b610864856107e1565b9350610872602086016107f3565b9250610880604086016107f3565b915061088e606086016107f3565b905092959194509250565b60008060008060008060c087890312156108b1578182fd5b6108ba876107e1565b95506108c8602088016107f3565b94506108d6604088016107f3565b93506108e4606088016107f3565b92506108f2608088016107f3565b915061090060a088016107f3565b90509295509295509295565b60006020828403121561091d578081fd5b5035919050565b6000821982111561093757610937610a43565b500190565b60008261094b5761094b610a59565b500490565b600081600019048311821515161561096a5761096a610a43565b500290565b600061ffff8381169083168181101561098a5761098a610a43565b039392505050565b6000828210156109a4576109a4610a43565b500390565b600060ff821660ff8416808210156109c3576109c3610a43565b90039392505050565b600061ffff808316818114156109e4576109e4610a43565b6001019392505050565b600060ff821660ff811415610a0557610a05610a43565b60010192915050565b600061ffff80841680610a2357610a23610a59565b92169190910692915050565b600082610a3e57610a3e610a59565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220ec50bff0a4bcce4804f65748d63286f877fda7398883c1a3637636a36e84afe964736f6c63430008030033",
  "devdoc": {
    "author": "ethereum-datatime",
    "kind": "dev",
    "methods": {},
    "title": "Ethereum timestamp conversion library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}