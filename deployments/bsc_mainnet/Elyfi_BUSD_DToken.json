{
  "address": "0xE9f638C2ba70EA022c710eAeEf14824F126d0c34",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMoneyPool",
          "name": "moneyPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlyingAsset_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "avgStableRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "avgStableRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "contract IMoneyPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDTokenData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAverageRealAssetBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalSupplyAndAvgRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalSupplyLastUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserAverageRealAssetBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserLastUpdateTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "principalBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x807d834eacabe028b9d33af32f25d35c4a4bce24f85f7cf9f1c6515a7fa194ee",
  "receipt": {
    "to": null,
    "from": "0x8d86dD9fe7318e04Cc51440C0252663f7FeCF01E",
    "contractAddress": "0xE9f638C2ba70EA022c710eAeEf14824F126d0c34",
    "transactionIndex": 2,
    "gasUsed": "1023398",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x37b2c573072d7a159c47e28acbc20b2ed1c02055731957b04ff2ee7615c6398a",
    "transactionHash": "0x807d834eacabe028b9d33af32f25d35c4a4bce24f85f7cf9f1c6515a7fa194ee",
    "logs": [],
    "blockNumber": 14522111,
    "cumulativeGasUsed": "1276231",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0bdFef5f8B75741d33a22d85022244CBE793DA24",
    "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",
    "Elyfi_BUSD_DToken",
    "ELFI_BUSD_DToken"
  ],
  "solcInputHash": "efcd845ea837ae5482eec05fa8d312de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMoneyPool\",\"name\":\"moneyPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgStableRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"avgStableRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IMoneyPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDTokenData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAverageRealAssetBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyAndAvgRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyLastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserAverageRealAssetBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserLastUpdateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"principalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Elysia*\",\"kind\":\"dev\",\"methods\":{\"POOL()\":{\"details\":\"Returns the address of the lending pool where this aToken is used*\"},\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Calculates the current account debt balance\",\"returns\":{\"_0\":\"The accumulated debt of the account*\"}},\"burn(address,uint256)\":{\"details\":\"Burns debt of `account`\",\"params\":{\"account\":\"The address of the account getting his debt burned\",\"amount\":\"The amount of debt tokens getting burned*\"}},\"decimals()\":{\"details\":\"Returns the decimals of the token.\"},\"getDTokenData()\":{\"details\":\"Returns the principal and total supply, the average borrow rate and the last supply update timestamp*\"},\"getTotalAverageRealAssetBorrowRate()\":{\"details\":\"Returns the average stable rate across all the stable rate debt\",\"returns\":{\"_0\":\"the average stable rate*\"}},\"getTotalSupplyAndAvgRate()\":{\"details\":\"Returns the the total supply and the average stable rate*\"},\"getTotalSupplyLastUpdated()\":{\"details\":\"Returns the timestamp at which the total supply was updated*\"},\"getUserAverageRealAssetBorrowRate(address)\":{\"details\":\"Returns the stable rate of the account\",\"params\":{\"account\":\"The address of the account\"},\"returns\":{\"_0\":\"The stable rate of account*\"}},\"getUserLastUpdateTimestamp(address)\":{\"details\":\"Returns the timestamp of the last account action\",\"returns\":{\"_0\":\"The last update timestamp*\"}},\"mint(address,address,uint256,uint256)\":{\"details\":\"Mints debt token to the `receiver` address. -  Only callable by the LendingPool - The resulting rate is the weighted average between the rate of the new debt and the rate of the principal debt\",\"params\":{\"account\":\"The address receiving the borrowed underlying, being the delegatee in case of credit delegate, or same as `receiver` otherwise\",\"amount\":\"The amount of debt tokens to mint\",\"rate\":\"The rate of the debt being minted*\",\"receiver\":\"The address receiving the debt tokens\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"principalBalanceOf(address)\":{\"details\":\"Returns the principal debt balance of the account from\",\"params\":{\"account\":\"The account's address\"},\"returns\":{\"_0\":\"The debt balance of the account since the last burn/mint action*\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the total supply*\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"title\":\"DToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The DToken balance of borrower is the amount of money that the borrower would be required to repay and seize the collateralized asset bond token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DToken.sol\":\"DToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/DToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\nimport './libraries/WadRayMath.sol';\\nimport './libraries/Math.sol';\\n\\nimport './interfaces/IDToken.sol';\\nimport './interfaces/IMoneyPool.sol';\\n\\n/**\\n * @title DToken\\n * @notice The DToken balance of borrower is the amount of money that the borrower\\n * would be required to repay and seize the collateralized asset bond token.\\n *\\n * @author Elysia\\n **/\\ncontract DToken is IDToken, Context {\\n  using WadRayMath for uint256;\\n\\n  uint256 internal _totalAverageRealAssetBorrowRate;\\n  mapping(address => uint256) internal _userLastUpdateTimestamp;\\n  mapping(address => uint256) internal _userAverageRealAssetBorrowRate;\\n  uint256 internal _lastUpdateTimestamp;\\n\\n  uint256 internal _totalSupply;\\n  mapping(address => uint256) internal _balances;\\n\\n  string private _name;\\n  string private _symbol;\\n\\n  IMoneyPool internal _moneyPool;\\n  address internal _underlyingAsset;\\n\\n  constructor(\\n    IMoneyPool moneyPool,\\n    address underlyingAsset_,\\n    string memory name_,\\n    string memory symbol_\\n  ) {\\n    _moneyPool = moneyPool;\\n    _underlyingAsset = underlyingAsset_;\\n\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the decimals of the token.\\n   */\\n  function decimals() public view virtual override returns (uint8) {\\n    return 18;\\n  }\\n\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    recipient;\\n    amount;\\n    require(false, 'DTokenTransferNotAllowed');\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    sender;\\n    recipient;\\n    amount;\\n    require(false, 'DTokenTransferFromNotAllowed');\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    owner;\\n    spender;\\n    require(false, 'DTokenAllowanceNotAllowed');\\n    return 0;\\n  }\\n\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    spender;\\n    amount;\\n    require(false, 'DTokenApproveNotAllowed');\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Returns the average stable rate across all the stable rate debt\\n   * @return the average stable rate\\n   **/\\n  function getTotalAverageRealAssetBorrowRate() external view virtual override returns (uint256) {\\n    return _totalAverageRealAssetBorrowRate;\\n  }\\n\\n  /**\\n   * @dev Returns the timestamp of the last account action\\n   * @return The last update timestamp\\n   **/\\n  function getUserLastUpdateTimestamp(address account)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _userLastUpdateTimestamp[account];\\n  }\\n\\n  /**\\n   * @dev Returns the stable rate of the account\\n   * @param account The address of the account\\n   * @return The stable rate of account\\n   **/\\n  function getUserAverageRealAssetBorrowRate(address account)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _userAverageRealAssetBorrowRate[account];\\n  }\\n\\n  /**\\n   * @dev Calculates the current account debt balance\\n   * @return The accumulated debt of the account\\n   **/\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\n    uint256 accountBalance = _balances[account];\\n    uint256 stableRate = _userAverageRealAssetBorrowRate[account];\\n\\n    // strict equality is not dangerous here\\n    // divide-before-multiply dangerous-strict-equalities\\n    if (accountBalance == 0) {\\n      return 0;\\n    }\\n    uint256 cumulatedInterest = Math.calculateCompoundedInterest(\\n      stableRate,\\n      _userLastUpdateTimestamp[account],\\n      block.timestamp\\n    );\\n    return accountBalance.rayMul(cumulatedInterest);\\n  }\\n\\n  struct MintLocalVars {\\n    uint256 previousSupply;\\n    uint256 nextSupply;\\n    uint256 amountInRay;\\n    uint256 newStableRate;\\n    uint256 currentAvgStableRate;\\n  }\\n\\n  /**\\n   * @dev Mints debt token to the `receiver` address.\\n   * -  Only callable by the LendingPool\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the principal debt\\n   * @param account The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `receiver` otherwise\\n   * @param receiver The address receiving the debt tokens\\n   * @param amount The amount of debt tokens to mint\\n   * @param rate The rate of the debt being minted\\n   **/\\n  function mint(\\n    address account,\\n    address receiver,\\n    uint256 amount,\\n    uint256 rate\\n  ) external override onlyMoneyPool {\\n    MintLocalVars memory vars;\\n\\n    (, uint256 currentBalance, uint256 balanceIncrease) = _calculateBalanceIncrease(receiver);\\n\\n    vars.previousSupply = totalSupply();\\n    vars.currentAvgStableRate = _totalAverageRealAssetBorrowRate;\\n    vars.nextSupply = _totalSupply = vars.previousSupply + amount;\\n\\n    vars.amountInRay = amount.wadToRay();\\n\\n    (, vars.newStableRate) = Math.calculateRateInIncreasingBalance(\\n      _userAverageRealAssetBorrowRate[receiver],\\n      currentBalance,\\n      amount,\\n      rate\\n    );\\n\\n    _userAverageRealAssetBorrowRate[receiver] = vars.newStableRate;\\n\\n    //solium-disable-next-line\\n    _lastUpdateTimestamp = _userLastUpdateTimestamp[receiver] = block.timestamp;\\n\\n    // Calculates the updated average stable rate\\n    (, vars.currentAvgStableRate) = Math.calculateRateInIncreasingBalance(\\n      vars.currentAvgStableRate,\\n      vars.previousSupply,\\n      amount,\\n      rate\\n    );\\n\\n    _totalAverageRealAssetBorrowRate = vars.currentAvgStableRate;\\n\\n    _mint(receiver, amount + balanceIncrease);\\n\\n    emit Transfer(address(0), receiver, amount);\\n\\n    emit Mint(\\n      account,\\n      receiver,\\n      amount + balanceIncrease,\\n      currentBalance,\\n      balanceIncrease,\\n      vars.newStableRate,\\n      vars.currentAvgStableRate,\\n      vars.nextSupply\\n    );\\n  }\\n\\n  /**\\n   * @dev Burns debt of `account`\\n   * @param account The address of the account getting his debt burned\\n   * @param amount The amount of debt tokens getting burned\\n   **/\\n  function burn(address account, uint256 amount) external override onlyMoneyPool {\\n    (, uint256 currentBalance, uint256 balanceIncrease) = _calculateBalanceIncrease(account);\\n\\n    uint256 previousSupply = totalSupply();\\n    uint256 newAvgStableRate = 0;\\n    uint256 nextSupply = 0;\\n    uint256 userStableRate = _userAverageRealAssetBorrowRate[account];\\n\\n    // Since the total supply and each single account debt accrue separately,\\n    // there might be accumulation errors so that the last borrower repaying\\n    // mght actually try to repay more than the available debt supply.\\n    // In this case we simply set the total supply and the avg stable rate to 0\\n    if (previousSupply <= amount) {\\n      _totalAverageRealAssetBorrowRate = 0;\\n      _totalSupply = 0;\\n    } else {\\n      nextSupply = _totalSupply = previousSupply - amount;\\n      uint256 firstTerm = _totalAverageRealAssetBorrowRate.rayMul(previousSupply.wadToRay());\\n      uint256 secondTerm = userStableRate.rayMul(amount.wadToRay());\\n\\n      // For the same reason described above, when the last account is repaying it might\\n      // happen that account rate * account balance > avg rate * total supply. In that case,\\n      // we simply set the avg rate to 0\\n      if (secondTerm >= firstTerm) {\\n        newAvgStableRate = _totalAverageRealAssetBorrowRate = _totalSupply = 0;\\n      } else {\\n        newAvgStableRate = _totalAverageRealAssetBorrowRate = (firstTerm - secondTerm).rayDiv(\\n          nextSupply.wadToRay()\\n        );\\n      }\\n    }\\n\\n    if (amount == currentBalance) {\\n      _userAverageRealAssetBorrowRate[account] = 0;\\n      _userLastUpdateTimestamp[account] = 0;\\n    } else {\\n      //solium-disable-next-line\\n      _userLastUpdateTimestamp[account] = block.timestamp;\\n    }\\n    //solium-disable-next-line\\n    _lastUpdateTimestamp = block.timestamp;\\n\\n    if (balanceIncrease > amount) {\\n      uint256 amountToMint = balanceIncrease - amount;\\n      _mint(account, amountToMint);\\n      emit Mint(\\n        account,\\n        account,\\n        amountToMint,\\n        currentBalance,\\n        balanceIncrease,\\n        userStableRate,\\n        newAvgStableRate,\\n        nextSupply\\n      );\\n    } else {\\n      uint256 amountToBurn = amount - balanceIncrease;\\n      _burn(account, amountToBurn);\\n      emit Burn(\\n        account,\\n        amountToBurn,\\n        currentBalance,\\n        balanceIncrease,\\n        newAvgStableRate,\\n        nextSupply\\n      );\\n    }\\n\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Calculates the increase in balance since the last account interaction\\n   * @param account The address of the account for which the interest is being accumulated\\n   * @return The principal principal balance, the new principal balance and the balance increase\\n   **/\\n  function _calculateBalanceIncrease(address account)\\n    internal\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 previousprincipalBalance = _balances[account];\\n\\n    // strict equality is not dangerous here\\n    // divide-before-multiply dangerous-strict-equalities\\n    if (previousprincipalBalance == 0) {\\n      return (0, 0, 0);\\n    }\\n\\n    // Calculation of the accrued interest since the last accumulation\\n    uint256 balanceIncrease = balanceOf(account) - previousprincipalBalance;\\n\\n    return (previousprincipalBalance, previousprincipalBalance + balanceIncrease, balanceIncrease);\\n  }\\n\\n  /**\\n   * @dev Returns the principal and total supply, the average borrow rate and the last supply update timestamp\\n   **/\\n  function getDTokenData()\\n    public\\n    view\\n    override\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 avgRate = _totalAverageRealAssetBorrowRate;\\n    return (_totalSupply, _calcTotalSupply(avgRate), avgRate, _lastUpdateTimestamp);\\n  }\\n\\n  /**\\n   * @dev Returns the the total supply and the average stable rate\\n   **/\\n  function getTotalSupplyAndAvgRate() public view override returns (uint256, uint256) {\\n    uint256 avgRate = _totalAverageRealAssetBorrowRate;\\n    return (_calcTotalSupply(avgRate), avgRate);\\n  }\\n\\n  /**\\n   * @dev Returns the total supply\\n   **/\\n  function totalSupply() public view override returns (uint256) {\\n    return _calcTotalSupply(_totalAverageRealAssetBorrowRate);\\n  }\\n\\n  /**\\n   * @dev Returns the timestamp at which the total supply was updated\\n   **/\\n  function getTotalSupplyLastUpdated() public view override returns (uint256) {\\n    return _lastUpdateTimestamp;\\n  }\\n\\n  /**\\n   * @dev Returns the principal debt balance of the account from\\n   * @param account The account's address\\n   * @return The debt balance of the account since the last burn/mint action\\n   **/\\n  function principalBalanceOf(address account) external view virtual override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev Returns the address of the lending pool where this aToken is used\\n   **/\\n  function POOL() public view returns (IMoneyPool) {\\n    return _moneyPool;\\n  }\\n\\n  /**\\n   * @dev For internal usage in the logic of the parent contracts\\n   **/\\n  function _getMoneyPool() internal view returns (IMoneyPool) {\\n    return _moneyPool;\\n  }\\n\\n  /**\\n   * @dev Calculates the total supply\\n   * @param avgRate The average rate at which the total supply increases\\n   * @return The debt balance of the account since the last burn/mint action\\n   **/\\n  function _calcTotalSupply(uint256 avgRate) internal view virtual returns (uint256) {\\n    uint256 principalSupply = _totalSupply;\\n\\n    // strict equality is not dangerous here\\n    // divide-before-multiply dangerous-strict-equalities\\n    if (principalSupply == 0) {\\n      return 0;\\n    }\\n\\n    uint256 cumulatedInterest = Math.calculateCompoundedInterest(\\n      avgRate,\\n      _lastUpdateTimestamp,\\n      block.timestamp\\n    );\\n\\n    return principalSupply.rayMul(cumulatedInterest);\\n  }\\n\\n  /**\\n   * @dev Mints stable debt tokens to an account\\n   * @param account The account receiving the debt tokens\\n   * @param amount The amount being minted\\n   **/\\n  function _mint(address account, uint256 amount) internal {\\n    uint256 oldAccountBalance = _balances[account];\\n    _balances[account] = oldAccountBalance + amount;\\n  }\\n\\n  /**\\n   * @dev Burns stable debt tokens of an account\\n   * @param account The account getting his debt burned\\n   * @param amount The amount being burned\\n   **/\\n  function _burn(address account, uint256 amount) internal {\\n    uint256 oldAccountBalance = _balances[account];\\n    _balances[account] = oldAccountBalance - amount;\\n  }\\n\\n  modifier onlyMoneyPool {\\n    require(_msgSender() == address(_moneyPool), 'OnlyMoneyPool');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xddfd43e106d631230bd438306bdc4534ab1a0a3af1afa6c417cd5ccb8ffe509c\",\"license\":\"MIT\"},\"contracts/interfaces/IDToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\ninterface IDToken is IERC20Metadata {\\n  /**\\n   * @dev Emitted when new stable debt is minted\\n   * @param account The address of the account who triggered the minting\\n   * @param receiver The recipient of stable debt tokens\\n   * @param amount The amount minted\\n   * @param currentBalance The current balance of the account\\n   * @param balanceIncrease The increase in balance since the last action of the account\\n   * @param newRate The rate of the debt after the minting\\n   * @param avgStableRate The new average stable rate after the minting\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Mint(\\n    address indexed account,\\n    address indexed receiver,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 newRate,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Emitted when new stable debt is burned\\n   * @param account The address of the account\\n   * @param amount The amount being burned\\n   * @param currentBalance The current balance of the account\\n   * @param balanceIncrease The the increase in balance since the last action of the account\\n   * @param avgStableRate The new average stable rate after the burning\\n   * @param newTotalSupply The new total supply of the stable debt token after the action\\n   **/\\n  event Burn(\\n    address indexed account,\\n    uint256 amount,\\n    uint256 currentBalance,\\n    uint256 balanceIncrease,\\n    uint256 avgStableRate,\\n    uint256 newTotalSupply\\n  );\\n\\n  /**\\n   * @dev Mints debt token to the `receiver` address.\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param account The address receiving the borrowed underlying, being the delegatee in case\\n   * of credit delegate, or same as `receiver` otherwise\\n   * @param receiver The address receiving the debt tokens\\n   * @param amount The amount of debt tokens to mint\\n   * @param rate The rate of the debt being minted\\n   **/\\n  function mint(\\n    address account,\\n    address receiver,\\n    uint256 amount,\\n    uint256 rate\\n  ) external;\\n\\n  /**\\n   * @dev Burns debt of `account`\\n   * - The resulting rate is the weighted average between the rate of the new debt\\n   * and the rate of the previous debt\\n   * @param account The address of the account getting his debt burned\\n   * @param amount The amount of debt tokens getting burned\\n   **/\\n  function burn(address account, uint256 amount) external;\\n\\n  /**\\n   * @dev Returns the average rate of all the stable rate loans.\\n   * @return The average stable rate\\n   **/\\n  function getTotalAverageRealAssetBorrowRate() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the stable rate of the account debt\\n   * @return The stable rate of the account\\n   **/\\n  function getUserAverageRealAssetBorrowRate(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the account\\n   * @return The timestamp\\n   **/\\n  function getUserLastUpdateTimestamp(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the principal, the total supply and the average stable rate\\n   **/\\n  function getDTokenData()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  /**\\n   * @dev Returns the timestamp of the last update of the total supply\\n   * @return The timestamp\\n   **/\\n  function getTotalSupplyLastUpdated() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the total supply and the average stable rate\\n   **/\\n  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the principal debt balance of the account\\n   * @return The debt balance of the account since the last burn/mint action\\n   **/\\n  function principalBalanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcf44ee2e3e9072e961ccd212e104e70c71ce16b8338e392ca0c265d7ca85e0eb\",\"license\":\"MIT\"},\"contracts/interfaces/IMoneyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface IMoneyPool {\\n  event NewReserve(\\n    address indexed asset,\\n    address lToken,\\n    address dToken,\\n    address interestModel,\\n    address tokenizer,\\n    address incentivePool,\\n    uint256 moneyPoolFactor\\n  );\\n\\n  event Deposit(address indexed asset, address indexed account, uint256 amount);\\n\\n  event Withdraw(\\n    address indexed asset,\\n    address indexed account,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  event Borrow(\\n    address indexed asset,\\n    address indexed collateralServiceProvider,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 borrowAPY,\\n    uint256 borrowAmount\\n  );\\n\\n  event Repay(\\n    address indexed asset,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 userDTokenBalance,\\n    uint256 feeOnCollateralServiceProvider\\n  );\\n\\n  event Liquidation(\\n    address indexed asset,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 userDTokenBalance,\\n    uint256 feeOnCollateralServiceProvider\\n  );\\n\\n  function deposit(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external;\\n\\n  function withdraw(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external;\\n\\n  function borrow(address asset, uint256 tokenID) external;\\n\\n  function repay(address asset, uint256 tokenId) external;\\n\\n  function liquidate(address asset, uint256 tokenId) external;\\n\\n  function getLTokenInterestIndex(address asset) external view returns (uint256);\\n\\n  function getReserveData(address asset) external view returns (DataStruct.ReserveData memory);\\n\\n  function addNewReserve(\\n    address asset,\\n    address lToken,\\n    address dToken,\\n    address interestModel,\\n    address tokenizer,\\n    address incentivePool,\\n    uint256 moneyPoolFactor_\\n  ) external;\\n}\\n\",\"keccak256\":\"0x36ca1cfa806be7e8f1b1681faeda0f1dc4a26462728aa403b73e4eef12567ef1\",\"license\":\"MIT\"},\"contracts/libraries/DataStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nlibrary DataStruct {\\n  /**\\n    @notice The main reserve data struct.\\n   */\\n  struct ReserveData {\\n    uint256 moneyPoolFactor;\\n    uint256 lTokenInterestIndex;\\n    uint256 borrowAPY;\\n    uint256 depositAPY;\\n    uint256 lastUpdateTimestamp;\\n    address lTokenAddress;\\n    address dTokenAddress;\\n    address interestModelAddress;\\n    address tokenizerAddress;\\n    uint8 id;\\n    bool isPaused;\\n    bool isActivated;\\n  }\\n\\n  /**\\n   * @notice The asset bond data struct.\\n   * @param ipfsHash The IPFS hash that contains the informations and contracts\\n   * between Collateral Service Provider and lender.\\n   * @param maturityTimestamp The amount of time measured in seconds that can elapse\\n   * before the NPL company liquidate the loan and seize the asset bond collateral.\\n   * @param borrower The address of the borrower.\\n   */\\n  struct AssetBondData {\\n    AssetBondState state;\\n    address borrower;\\n    address signer;\\n    address collateralServiceProvider;\\n    uint256 principal;\\n    uint256 debtCeiling;\\n    uint256 couponRate;\\n    uint256 interestRate;\\n    uint256 delinquencyRate;\\n    uint256 loanStartTimestamp;\\n    uint256 collateralizeTimestamp;\\n    uint256 maturityTimestamp;\\n    uint256 liquidationTimestamp;\\n    string ipfsHash; // refactor : gas\\n    string signerOpinionHash;\\n  }\\n\\n  struct AssetBondIdData {\\n    uint256 nonce;\\n    uint256 countryCode;\\n    uint256 collateralServiceProviderIdentificationNumber;\\n    uint256 collateralLatitude;\\n    uint256 collateralLatitudeSign;\\n    uint256 collateralLongitude;\\n    uint256 collateralLongitudeSign;\\n    uint256 collateralDetail;\\n    uint256 collateralCategory;\\n    uint256 productNumber;\\n  }\\n\\n  /**\\n    @notice The states of asset bond\\n    * EMPTY: After\\n    * SETTLED:\\n    * CONFIRMED:\\n    * COLLATERALIZED:\\n    * DELINQUENT:\\n    * REDEEMED:\\n    * LIQUIDATED:\\n   */\\n  enum AssetBondState {\\n    EMPTY,\\n    SETTLED,\\n    CONFIRMED,\\n    COLLATERALIZED,\\n    DELINQUENT,\\n    REDEEMED,\\n    LIQUIDATED\\n  }\\n}\\n\",\"keccak256\":\"0xfef0408a202a6814e92f396333b81c78b4fff0bb1a9411b64afe849ced4ea3b1\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport './WadRayMath.sol';\\n\\nlibrary Math {\\n  using WadRayMath for uint256;\\n\\n  uint256 internal constant SECONDSPERYEAR = 365 days;\\n\\n  function calculateLinearInterest(\\n    uint256 rate,\\n    uint256 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    uint256 timeDelta = currentTimestamp - uint256(lastUpdateTimestamp);\\n\\n    return ((rate * timeDelta) / SECONDSPERYEAR) + WadRayMath.ray();\\n  }\\n\\n  /**\\n   * @notice Author : AAVE\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n   *\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n   *\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate compounded during the timeDelta, in ray\\n   **/\\n  function calculateCompoundedInterest(\\n    uint256 rate,\\n    uint256 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 exp = currentTimestamp - lastUpdateTimestamp;\\n\\n    if (exp == 0) {\\n      return WadRayMath.ray();\\n    }\\n\\n    uint256 expMinusOne = exp - 1;\\n\\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n    // loss of precision is endurable\\n    // slither-disable-next-line divide-before-multiply\\n    uint256 ratePerSecond = rate / SECONDSPERYEAR;\\n\\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n    uint256 secondTerm = (exp * expMinusOne * basePowerTwo) / 2;\\n    uint256 thirdTerm = (exp * expMinusOne * expMinusTwo * basePowerThree) / 6;\\n\\n    return WadRayMath.ray() + (ratePerSecond * exp) + secondTerm + thirdTerm;\\n  }\\n\\n  function calculateRateInIncreasingBalance(\\n    uint256 averageRate,\\n    uint256 totalBalance,\\n    uint256 amountIn,\\n    uint256 rate\\n  ) internal pure returns (uint256, uint256) {\\n    uint256 weightedAverageRate = totalBalance.wadToRay().rayMul(averageRate);\\n    uint256 weightedAmountRate = amountIn.wadToRay().rayMul(rate);\\n\\n    uint256 newTotalBalance = totalBalance + amountIn;\\n    uint256 newAverageRate = (weightedAverageRate + weightedAmountRate).rayDiv(\\n      newTotalBalance.wadToRay()\\n    );\\n\\n    return (newTotalBalance, newAverageRate);\\n  }\\n\\n  function calculateRateInDecreasingBalance(\\n    uint256 averageRate,\\n    uint256 totalBalance,\\n    uint256 amountOut,\\n    uint256 rate\\n  ) internal pure returns (uint256, uint256) {\\n    // if decreasing amount exceeds totalBalance,\\n    // overall rate and balacne would be set 0\\n    if (totalBalance <= amountOut) {\\n      return (0, 0);\\n    }\\n\\n    uint256 weightedAverageRate = totalBalance.wadToRay().rayMul(averageRate);\\n    uint256 weightedAmountRate = amountOut.wadToRay().rayMul(rate);\\n\\n    if (weightedAverageRate <= weightedAmountRate) {\\n      return (0, 0);\\n    }\\n\\n    uint256 newTotalBalance = totalBalance - amountOut;\\n\\n    uint256 newAverageRate = (weightedAverageRate - weightedAmountRate).rayDiv(\\n      newTotalBalance.wadToRay()\\n    );\\n\\n    return (newTotalBalance, newAverageRate);\\n  }\\n}\\n\",\"keccak256\":\"0x8b72d69b39c8f545155657e365f56dc019a35cd65aecc49f039a99a27329e3d5\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Division by Zero');\\n    uint256 halfB = b / 2;\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Division by Zero');\\n    uint256 halfB = b / 2;\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x219da6a5d0c7c597faad6e638a2f0174b75d2ae50ee97314fb4afbc244abf01f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012c6380380620012c68339810160408190526200003491620001f3565b600880546001600160a01b038087166001600160a01b03199283161790925560098054928616929091169190911790558151620000799060069060208501906200009a565b5080516200008f9060079060208401906200009a565b5050505050620002f1565b828054620000a89062000285565b90600052602060002090601f016020900481019282620000cc576000855562000117565b82601f10620000e757805160ff191683800117855562000117565b8280016001018555821562000117579182015b8281111562000117578251825591602001919060010190620000fa565b506200012592915062000129565b5090565b5b808211156200012557600081556001016200012a565b600082601f83011262000151578081fd5b81516001600160401b03808211156200016e576200016e620002c2565b604051601f8301601f19908116603f01168101908282118183101715620001995762000199620002c2565b81604052838152602092508683858801011115620001b5578485fd5b8491505b83821015620001d85785820183015181830184015290820190620001b9565b83821115620001e957848385830101525b9695505050505050565b6000806000806080858703121562000209578384fd5b84516200021681620002d8565b60208601519094506200022981620002d8565b60408601519093506001600160401b038082111562000246578384fd5b620002548883890162000140565b935060608701519150808211156200026a578283fd5b50620002798782880162000140565b91505092959194509250565b600181811c908216806200029a57607f821691505b60208210811415620002bc57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620002ee57600080fd5b50565b610fc580620003016000396000f3fe608060405234801561001057600080fd5b50600436106100f15760003560e01c806306fdde03146100f6578063095ea7b31461011457806318160ddd1461013757806323b872dd1461014d578063313ce5671461016057806366df70cc1461016f57806370a0823114610182578063723f319e146101955780637535d246146101bd57806395d89b41146101d85780639dc29fac146101e0578063a9059cbb146101f5578063ad7bcdf014610208578063b0d4fc5a14610231578063b3f1c93d14610239578063c634dfaa1461024c578063dd62ed3e14610275578063e748489014610288578063f731e9be14610290575b600080fd5b6100fe6102ad565b60405161010b9190610dee565b60405180910390f35b610127610122366004610dc5565b61033f565b604051901515815260200161010b565b61013f61038f565b60405190815260200161010b565b61012761015b366004610d49565b6103a1565b6040516012815260200161010b565b61013f61017d366004610cfd565b6103f2565b61013f610190366004610cfd565b610411565b61019d61047f565b60408051948552602085019390935291830152606082015260800161010b565b6008546040516001600160a01b03909116815260200161010b565b6100fe6104a8565b6101f36101ee366004610dc5565b6104b7565b005b610127610203366004610dc5565b610721565b61013f610216366004610cfd565b6001600160a01b031660009081526001602052604090205490565b60005461013f565b6101f3610247366004610d84565b610767565b61013f61025a366004610cfd565b6001600160a01b031660009081526005602052604090205490565b61013f610283366004610d17565b610928565b60035461013f565b61029861096f565b6040805192835260208301919091520161010b565b6060600680546102bc90610efe565b80601f01602080910402602001604051908101604052809291908181526020018280546102e890610efe565b80156103355780601f1061030a57610100808354040283529160200191610335565b820191906000526020600020905b81548152906001019060200180831161031857829003601f168201915b5050505050905090565b60405162461bcd60e51b815260206004820152601760248201527611151bdad95b905c1c1c9bdd99539bdd105b1b1bddd959604a1b60448201526000906064015b60405180910390fd5b92915050565b600061039c600054610986565b905090565b60405162461bcd60e51b815260206004820152601c60248201527b11151bdad95b951c985b9cd9995c919c9bdb539bdd105b1b1bddd95960221b6044820152600090606401610380565b9392505050565b6001600160a01b0381166000908152600260205260409020545b919050565b6001600160a01b0381166000908152600560209081526040808320546002909252822054816104455760009250505061040c565b6001600160a01b03841660009081526001602052604081205461046a908390426109be565b90506104768382610adb565b95945050505050565b60008060008060008054905060045461049782610986565b600354919790965091945092509050565b6060600780546102bc90610efe565b6008546001600160a01b0316336001600160a01b0316146104ea5760405162461bcd60e51b815260040161038090610e41565b6000806104f684610b2a565b9250925050600061050561038f565b6001600160a01b0386166000908152600260205260408120549192509081908684116105385760008080556004556105b8565b6105428785610ee7565b60048190559150600061056061055786610b90565b60005490610adb565b905060006105776105708a610b90565b8490610adb565b9050818110610591576000600481905580805594506105b5565b6105ad61059d85610b90565b6105a78385610ee7565b90610ba1565b600081905594505b50505b858714156105eb576001600160a01b03881660009081526002602090815260408083208390556001909152812055610607565b6001600160a01b03881660009081526001602052604090204290555b426003558685111561067457600061061f8887610ee7565b905061062b8982610c1d565b886001600160a01b0316896001600160a01b0316600080516020610f50833981519152838a8a878a8a60405161066696959493929190610e68565b60405180910390a3506106e8565b60006106808689610ee7565b905061068c8982610c61565b604080518281526020810189905290810187905260608101859052608081018490526001600160a01b038a16907f44bd20a79e993bdcc7cbedf54a3b4d19fb78490124b6b90d04fe3242eea579e89060a00160405180910390a2505b6040518781526000906001600160a01b038a1690600080516020610f708339815191529060200160405180910390a35050505050505050565b60405162461bcd60e51b815260206004820152601860248201527711151bdad95b951c985b9cd9995c939bdd105b1b1bddd95960421b6044820152600090606401610380565b6008546001600160a01b0316336001600160a01b03161461079a5760405162461bcd60e51b815260040161038090610e41565b6107cc6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6000806107d886610b2a565b92509250506107e561038f565b80845260005460808501526107fb908690610e90565b6004819055602084015261080e85610b90565b6040808501919091526001600160a01b03871660009081526002602052205461083990838787610c84565b606085018190526001600160a01b03881660009081526002602090815260408083209390935560019052204290819055600355506080830151835161088091908787610c84565b608085018190526000555061089e866108998388610e90565b610c1d565b6040518581526001600160a01b03871690600090600080516020610f708339815191529060200160405180910390a36001600160a01b03808716908816600080516020610f508339815191526108f48489610e90565b8585886060015189608001518a6020015160405161091796959493929190610e68565b60405180910390a350505050505050565b60405162461bcd60e51b815260206004820152601960248201527811151bdad95b905b1b1bddd85b98d9539bdd105b1b1bddd959603a1b6044820152600090606401610380565b60008054819061097e81610986565b925090509091565b6004546000908061099b57600091505061040c565b60006109aa84600354426109be565b90506109b68282610adb565b949350505050565b6000806109cb8484610ee7565b9050806109e657676765c793fa10079d601b1b9150506103eb565b60006109f3600183610ee7565b9050600060028311610a06576000610a11565b610a11600284610ee7565b90506000610a236301e1338089610ea8565b90506000610a318280610adb565b90506000610a3f8284610adb565b90506000600283610a50888a610ec8565b610a5a9190610ec8565b610a649190610ea8565b9050600060068387610a768a8c610ec8565b610a809190610ec8565b610a8a9190610ec8565b610a949190610ea8565b90508082610aa28a88610ec8565b610ab790676765c793fa10079d601b1b610e90565b610ac19190610e90565b610acb9190610e90565b9c9b505050505050505050505050565b6000821580610ae8575081155b15610af557506000610389565b676765c793fa10079d601b1b610b0c600282610ea8565b610b168486610ec8565b610b209190610e90565b6103eb9190610ea8565b6001600160a01b0381166000908152600560205260408120548190819080610b5d57600080600093509350935050610b89565b600081610b6987610411565b610b739190610ee7565b905081610b808282610e90565b90955093509150505b9193909250565b6000806103eb633b9aca0084610ec8565b600081610be35760405162461bcd60e51b815260206004820152601060248201526f4469766973696f6e206279205a65726f60801b6044820152606401610380565b6000610bf0600284610ea8565b90508281610c09676765c793fa10079d601b1b87610ec8565b610c139190610e90565b6109b69190610ea8565b6001600160a01b038216600090815260056020526040902054610c408282610e90565b6001600160a01b039093166000908152600560205260409020929092555050565b6001600160a01b038216600090815260056020526040902054610c408282610ee7565b6000806000610c9c87610c9688610b90565b90610adb565b90506000610cad85610c9688610b90565b90506000610cbb8789610e90565b90506000610cd5610ccb83610b90565b6105a78587610e90565b919a91995090975050505050505050565b80356001600160a01b038116811461040c57600080fd5b600060208284031215610d0e578081fd5b6103eb82610ce6565b60008060408385031215610d29578081fd5b610d3283610ce6565b9150610d4060208401610ce6565b90509250929050565b600080600060608486031215610d5d578081fd5b610d6684610ce6565b9250610d7460208501610ce6565b9150604084013590509250925092565b60008060008060808587031215610d99578081fd5b610da285610ce6565b9350610db060208601610ce6565b93969395505050506040820135916060013590565b60008060408385031215610dd7578182fd5b610de083610ce6565b946020939093013593505050565b6000602080835283518082850152825b81811015610e1a57858101830151858201604001528201610dfe565b81811115610e2b5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252600d908201526c13db9b1e535bdb995e541bdbdb609a1b604082015260600190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60008219821115610ea357610ea3610f39565b500190565b600082610ec357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610ee257610ee2610f39565b500290565b600082821015610ef957610ef9610f39565b500390565b600181811c90821680610f1257607f821691505b60208210811415610f3357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfec16f4e4ca34d790de4c656c72fd015c667d688f20be64eea360618545c4c530fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212205c18f2f3325673ac246f4d15a8903080d20b98a97d373881cef8b45d23a0ca7964736f6c63430008030033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Elysia*",
    "kind": "dev",
    "methods": {
      "POOL()": {
        "details": "Returns the address of the lending pool where this aToken is used*"
      },
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Calculates the current account debt balance",
        "returns": {
          "_0": "The accumulated debt of the account*"
        }
      },
      "burn(address,uint256)": {
        "details": "Burns debt of `account`",
        "params": {
          "account": "The address of the account getting his debt burned",
          "amount": "The amount of debt tokens getting burned*"
        }
      },
      "decimals()": {
        "details": "Returns the decimals of the token."
      },
      "getDTokenData()": {
        "details": "Returns the principal and total supply, the average borrow rate and the last supply update timestamp*"
      },
      "getTotalAverageRealAssetBorrowRate()": {
        "details": "Returns the average stable rate across all the stable rate debt",
        "returns": {
          "_0": "the average stable rate*"
        }
      },
      "getTotalSupplyAndAvgRate()": {
        "details": "Returns the the total supply and the average stable rate*"
      },
      "getTotalSupplyLastUpdated()": {
        "details": "Returns the timestamp at which the total supply was updated*"
      },
      "getUserAverageRealAssetBorrowRate(address)": {
        "details": "Returns the stable rate of the account",
        "params": {
          "account": "The address of the account"
        },
        "returns": {
          "_0": "The stable rate of account*"
        }
      },
      "getUserLastUpdateTimestamp(address)": {
        "details": "Returns the timestamp of the last account action",
        "returns": {
          "_0": "The last update timestamp*"
        }
      },
      "mint(address,address,uint256,uint256)": {
        "details": "Mints debt token to the `receiver` address. -  Only callable by the LendingPool - The resulting rate is the weighted average between the rate of the new debt and the rate of the principal debt",
        "params": {
          "account": "The address receiving the borrowed underlying, being the delegatee in case of credit delegate, or same as `receiver` otherwise",
          "amount": "The amount of debt tokens to mint",
          "rate": "The rate of the debt being minted*",
          "receiver": "The address receiving the debt tokens"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "principalBalanceOf(address)": {
        "details": "Returns the principal debt balance of the account from",
        "params": {
          "account": "The account's address"
        },
        "returns": {
          "_0": "The debt balance of the account since the last burn/mint action*"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "Returns the total supply*"
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      }
    },
    "title": "DToken",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "The DToken balance of borrower is the amount of money that the borrower would be required to repay and seize the collateralized asset bond token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2733,
        "contract": "contracts/DToken.sol:DToken",
        "label": "_totalAverageRealAssetBorrowRate",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2737,
        "contract": "contracts/DToken.sol:DToken",
        "label": "_userLastUpdateTimestamp",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2741,
        "contract": "contracts/DToken.sol:DToken",
        "label": "_userAverageRealAssetBorrowRate",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2743,
        "contract": "contracts/DToken.sol:DToken",
        "label": "_lastUpdateTimestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2745,
        "contract": "contracts/DToken.sol:DToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2749,
        "contract": "contracts/DToken.sol:DToken",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2751,
        "contract": "contracts/DToken.sol:DToken",
        "label": "_name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 2753,
        "contract": "contracts/DToken.sol:DToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 2756,
        "contract": "contracts/DToken.sol:DToken",
        "label": "_moneyPool",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IMoneyPool)7140"
      },
      {
        "astId": 2758,
        "contract": "contracts/DToken.sol:DToken",
        "label": "_underlyingAsset",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IMoneyPool)7140": {
        "encoding": "inplace",
        "label": "contract IMoneyPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}