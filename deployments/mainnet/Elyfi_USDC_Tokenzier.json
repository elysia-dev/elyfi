{
  "address": "0xD86f51C8d0F10AAd267fB42E143D6d0B97aE9B23",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "connector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "moneyPool",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        }
      ],
      "name": "AssetBondCollateralized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AssetBondLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AssetBondReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "couponRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delinquencyRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtCeiling",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanStartTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ifpsHash",
          "type": "string"
        }
      ],
      "name": "AssetBondSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "signerOpinionHash",
          "type": "string"
        }
      ],
      "name": "AssetBondSigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "EmptyAssetBondMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRate",
          "type": "uint256"
        }
      ],
      "name": "collateralizeAssetBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAssetBondData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum DataStruct.AssetBondState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "borrower",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralServiceProvider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtCeiling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "couponRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delinquencyRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loanStartTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralizeTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "signerOpinionHash",
              "type": "string"
            }
          ],
          "internalType": "struct DataStruct.AssetBondData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAssetBondDebtData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAssetBondIdData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "countryCode",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralServiceProviderIdentificationNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralLatitude",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralLatitudeSign",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralLongitude",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralLongitudeSign",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralDetail",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralCategory",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "productNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataStruct.AssetBondIdData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "liquidateAssetBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintAssetBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "releaseAssetBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "couponRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delinquencyRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtCeiling",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "loanDuration",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "loanStartTimeYear",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "loanStartTimeMonth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "loanStartTimeDay",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        }
      ],
      "name": "settleAssetBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "signerOpinionHash",
          "type": "string"
        }
      ],
      "name": "signAssetBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c21f5ced594e23a78387c399f7fbd6d06ff55c2d7a6b4f29a76724a86f020bd",
  "receipt": {
    "to": null,
    "from": "0x715B006d4723977CcDb1581a62948f6354752e62",
    "contractAddress": "0xD86f51C8d0F10AAd267fB42E143D6d0B97aE9B23",
    "transactionIndex": 23,
    "gasUsed": "2672007",
    "logsBloom": "0x
    "blockHash": "0xac1bab43965305fd23c9f8c2528ac2d782b0dff29027d1e78f78a21f7559bcb6",
    "transactionHash": "0x6c21f5ced594e23a78387c399f7fbd6d06ff55c2d7a6b4f29a76724a86f020bd",
    "logs": [],
    "blockNumber": 14932574,
    "cumulativeGasUsed": "4018536",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5c2cE44fF70eF0bD898E2bf37e7da7605D0ae607",
    "0xa93008fD32EB24E488DDAA6C0aA152559fDa9E8c",
    "Elyfi_USDC_Tokenzier",
    "ELFI_USDC_Tokenizer"
  ],
  "solcInputHash": "efcd845ea837ae5482eec05fa8d312de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"connector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moneyPool\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"AssetBondCollateralized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AssetBondLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AssetBondReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"couponRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delinquencyRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanStartTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ifpsHash\",\"type\":\"string\"}],\"name\":\"AssetBondSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signerOpinionHash\",\"type\":\"string\"}],\"name\":\"AssetBondSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EmptyAssetBondMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"}],\"name\":\"collateralizeAssetBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAssetBondData\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DataStruct.AssetBondState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralServiceProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delinquencyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralizeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"signerOpinionHash\",\"type\":\"string\"}],\"internalType\":\"struct DataStruct.AssetBondData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAssetBondDebtData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAssetBondIdData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countryCode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralServiceProviderIdentificationNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralLatitude\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralLatitudeSign\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralLongitude\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralLongitudeSign\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralDetail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralCategory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"productNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct DataStruct.AssetBondIdData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"liquidateAssetBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mintAssetBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"releaseAssetBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"couponRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delinquencyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"loanDuration\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"loanStartTimeYear\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"loanStartTimeMonth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"loanStartTimeDay\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"settleAssetBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signerOpinionHash\",\"type\":\"string\"}],\"name\":\"signAssetBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ELYSIA\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"collateralizeAssetBond(address,uint256,uint256,uint256)\":{\"details\":\"The collateralizing asset bond token should be only from the MoneyPool.\",\"params\":{\"account\":\"The owner of asset bond token\",\"borrowAmount\":\"The borrow amount.\",\"interestRate\":\"The interest rate of the loan between MoneyPool and borrower.\",\"tokenId\":\"The token Id to collateralize\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getAssetBondData(uint256)\":{\"details\":\"The state of the asset bond is `LIQUIDATED` when the current timestamp is greater than liquidation timestamp.\",\"params\":{\"tokenId\":\"The asset bond tokenId\"},\"returns\":{\"_0\":\"The data struct of the asset bond*\"}},\"getAssetBondDebtData(uint256)\":{\"details\":\"Returns the state debt of the asset bond\",\"params\":{\"tokenId\":\"The id of the asset bond\"},\"returns\":{\"_0\":\"Accrued debt on the moneypool and the fee on the collateral service provider.*\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"liquidateAssetBond(address,uint256)\":{\"details\":\"The liquidating asset bond token should be only from the MoneyPool.\",\"params\":{\"account\":\"The liquidator\",\"tokenId\":\"The token Id to release\"}},\"mintAssetBond(address,uint256)\":{\"params\":{\"account\":\"CollateralServiceProvider address\",\"tokenId\":\"Unique identifier for asset bond.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"releaseAssetBond(address,uint256)\":{\"details\":\"The releasing asset bond token should be only from the MoneyPool.\",\"params\":{\"account\":\"The borrower\",\"tokenId\":\"The token Id to release\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"settleAssetBond(address,address,uint256,uint256,uint256,uint256,uint256,uint16,uint16,uint8,uint8,string)\":{\"params\":{\"borrower\":\"The address of the borrower who must repay and retrieve the asset bond\",\"couponRate\":\"The coupon rate of the bond\",\"debtCeiling\":\"DebtCeiling, the available value of collateral asset when liquidated\",\"delinquencyRate\":\"The overdue interest rate of the bond. After the loan duration, the borrower\",\"ipfsHash\":\"IpfsHash which contract and collateral data stored The interest rate paid on a bond by its issuer for the term of the security\",\"loanDuration\":\"LoanDuration\",\"loanStartTimeDay\":\"LoanStartTimeDay\",\"loanStartTimeMonth\":\"LoanStartTimeMonth\",\"loanStartTimeYear\":\"LoanStartTimeYear\",\"principal\":\"The borrow amount based on the contract between collateral service provider and borrower in reality\",\"signer\":\"A third-party agency address that reviews entities listed on the asset bond data\",\"tokenId\":\"Token id to settle\"}},\"signAssetBond(uint256,string)\":{\"params\":{\"signerOpinionHash\":\"The signer can upload their opinion as a form of official documents on IPFS server.\",\"tokenId\":\"The token Id to release\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"ELYFI Tokenizer\",\"version\":1},\"userdoc\":{\"events\":{\"AssetBondSettled(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string)\":{\"notice\":\"Emitted when a collateral service provider mints an empty asset bond token.*\"},\"EmptyAssetBondMinted(address,uint256)\":{\"notice\":\"Emitted when a collateral service provider mints an empty asset bond token.\"}},\"kind\":\"user\",\"methods\":{\"collateralizeAssetBond(address,uint256,uint256,uint256)\":{\"notice\":\"The collateral service provider can take out a loan of value equivalent to the collateral recored in asset bond tokens. The asset bond tokens are automatically transferred to the MoneyPool by internal function of `borrow` function.\"},\"getAssetBondData(uint256)\":{\"notice\":\"Returns the state of the asset bond\"},\"getAssetBondDebtData(uint256)\":{\"notice\":\"When the borrower takes a loan, the repayment is the sum of two types of amounts: debt on the money pool and fee on the collateral service provider. The former is the amount to be repaid to the moneypool, and the latter is the amount to be paid to collateral service provider as a fee.\"},\"liquidateAssetBond(address,uint256)\":{\"notice\":\"In the liquidation scenario, the dTokens are burned and the collateral of the locked up asset bond tokens in the MoneyPool is transferred to liquidator.\"},\"mintAssetBond(address,uint256)\":{\"notice\":\"This function can be called by collateral service providers when they want to sign a contract. Borrowers who wants to take out a loan backed by real asset must enter into a contract with a collateral service provider to obtain a loan. Borrowers should submit various documents necessary for evaluating a loan secured by real assets to the collateral service provider.\"},\"releaseAssetBond(address,uint256)\":{\"notice\":\"In the repayment scenario, the dTokens are destroyed and the collateral of the locked up asset bond tokens in the MoneyPool is unlocked. The asset bond tokens are transfered to the address of the borrower for terminating the collateral contract.\"},\"settleAssetBond(address,address,uint256,uint256,uint256,uint256,uint256,uint16,uint16,uint8,uint8,string)\":{\"notice\":\"This function is called after collateral service provider based on the documents submitted by the loan applicant, risk analysis for the relevant asset is conducted, and the loan availability, maximum loanable amount and the interest rate between collateral service provider and borrower are calculated.\"},\"signAssetBond(uint256,string)\":{\"notice\":\"When the collateral service provider settled the informations based on the real world contract in asset bond token, the third party connector such as lawfrim should review this and sign it. The object for this process is to build trust in the token issuance in ELYFI. This final verification process is carried out by reliable parties such as lawfirm. The review is following four items. Determination of the authenticity of collateral security details entered in real estate registration Determination of the authenticity of the contract between a real estate owner and a collateral service provider Determination of the value of principal and interest through certificates of seal impressions of real estate owners and lenders Determination of whether the important information entered in smart contracts match the contract content This allows the asset bond tokens to be recognized as collateral on the blockchain.\"}},\"notice\":\"Asset bond token is a type of token that records information about real asset-backed bonds and acts as bonds on-chain. It complies with the NFT standard, ERC721 and this token can be deposited in the Money Pool to execute a loan contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tokenizer.sol\":\"Tokenizer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Tokenizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\n\\nimport './libraries/WadRayMath.sol';\\nimport './libraries/DataStruct.sol';\\nimport './libraries/Math.sol';\\nimport './libraries/Role.sol';\\nimport './libraries/TimeConverter.sol';\\n\\nimport './logic/AssetBond.sol';\\nimport './logic/Index.sol';\\nimport './logic/Validation.sol';\\n\\nimport './interfaces/IMoneyPool.sol';\\nimport './interfaces/ITokenizer.sol';\\nimport './interfaces/IConnector.sol';\\n\\nimport './TokenizerStorage.sol';\\n\\n/**\\n * @title ELYFI Tokenizer\\n * @notice Asset bond token is a type of token that records information about real asset-backed bonds\\n * and acts as bonds on-chain. It complies with the NFT standard, ERC721 and this token can be deposited\\n * in the Money Pool to execute a loan contract.\\n * @author ELYSIA\\n */\\ncontract Tokenizer is ITokenizer, TokenizerStorage, ERC721 {\\n  using WadRayMath for uint256;\\n  using AssetBond for DataStruct.AssetBondData;\\n  using Validation for DataStruct.AssetBondData;\\n  using Index for DataStruct.AssetBondData;\\n\\n  /************ Initialize Functions ************/\\n\\n  constructor(\\n    address connector,\\n    address moneyPool,\\n    string memory name_,\\n    string memory symbol_\\n  ) ERC721(name_, symbol_) {\\n    _connector = IConnector(connector);\\n    _moneyPool = IMoneyPool(moneyPool);\\n  }\\n\\n  /************ View Functions *************/\\n\\n  /**\\n   * @notice Returns the state of the asset bond\\n   * @dev The state of the asset bond is `LIQUIDATED` when the current timestamp is greater than\\n   * liquidation timestamp.\\n   * @param tokenId The asset bond tokenId\\n   * @return The data struct of the asset bond\\n   **/\\n  function getAssetBondData(uint256 tokenId)\\n    external\\n    view\\n    override\\n    returns (DataStruct.AssetBondData memory)\\n  {\\n    DataStruct.AssetBondData memory assetBondData = _assetBondData[tokenId];\\n    // assetBondData.state is enum\\n    // divide-before-multiply dangerous-strict-equalities\\n    if (\\n      block.timestamp >= assetBondData.liquidationTimestamp &&\\n      assetBondData.state == DataStruct.AssetBondState.COLLATERALIZED\\n    ) {\\n      assetBondData.state = DataStruct.AssetBondState.LIQUIDATED;\\n    }\\n\\n    return assetBondData;\\n  }\\n\\n  /**\\n   * @notice When the borrower takes a loan, the repayment is the sum of two types of amounts:\\n   * debt on the money pool and fee on the collateral service provider. The former is the amount to be\\n   * repaid to the moneypool, and the latter is the amount to be paid to collateral service provider as a fee.\\n   * @dev Returns the state debt of the asset bond\\n   * @param tokenId The id of the asset bond\\n   * @return Accrued debt on the moneypool and the fee on the collateral service provider.\\n   **/\\n  function getAssetBondDebtData(uint256 tokenId) external view override returns (uint256, uint256) {\\n    DataStruct.AssetBondData storage assetBond = _assetBondData[tokenId];\\n\\n    return assetBond.getAssetBondDebtData();\\n  }\\n\\n  function getMinter(uint256 tokenId) external view override returns (address) {\\n    return _minter[tokenId];\\n  }\\n\\n  function getAssetBondIdData(uint256 tokenId)\\n    external\\n    pure\\n    override\\n    returns (DataStruct.AssetBondIdData memory)\\n  {\\n    return AssetBond.parseAssetBondId(tokenId);\\n  }\\n\\n  /************ AssetBond Formation Functions ************/\\n\\n  /**\\n   * @notice This function can be called by collateral service providers when they want to sign a contract.\\n   * Borrowers who wants to take out a loan backed by real asset must enter into a contract\\n   * with a collateral service provider to obtain a loan. Borrowers should submit various documents necessary\\n   * for evaluating a loan secured by real assets to the collateral service provider.\\n   * @param account CollateralServiceProvider address\\n   * @param tokenId Unique identifier for asset bond.\\n   */\\n  function mintAssetBond(address account, uint256 tokenId)\\n    external\\n    override\\n    onlyCollateralServiceProvider\\n  {\\n    require(_connector.isCollateralServiceProvider(account), 'NotAllowedMinter');\\n\\n    // validate tokenId : tokenId should have information about\\n\\n    DataStruct.AssetBondIdData memory idData = AssetBond.parseAssetBondId(tokenId);\\n\\n    Validation.validateTokenId(idData);\\n\\n    // mint AssetBond to CollateralServiceProvider\\n    _safeMint(account, tokenId);\\n\\n    _minter[tokenId] = msg.sender;\\n\\n    emit EmptyAssetBondMinted(account, tokenId);\\n  }\\n\\n  struct SettleAssetBondLocalVars {\\n    uint256 loanStartTimestamp;\\n    uint256 maturityTimestamp;\\n    uint256 liquidationTimestamp;\\n  }\\n\\n  /**\\n   * @notice This function is called after collateral service provider based on the documents submitted by the loan applicant,\\n   * risk analysis for the relevant asset is conducted, and the loan availability, maximum loanable amount and the interest\\n   * rate between collateral service provider and borrower are calculated.\\n   * @param borrower The address of the borrower who must repay and retrieve the asset bond\\n   * @param signer A third-party agency address that reviews entities listed on the asset bond data\\n   * @param tokenId Token id to settle\\n   * @param principal The borrow amount based on the contract between collateral service provider and borrower in reality\\n   * @param couponRate The coupon rate of the bond\\n   * @param delinquencyRate The overdue interest rate of the bond. After the loan duration, the borrower\\n   * @param debtCeiling DebtCeiling, the available value of collateral asset when liquidated\\n   * @param loanDuration LoanDuration\\n   * @param loanStartTimeYear LoanStartTimeYear\\n   * @param loanStartTimeMonth LoanStartTimeMonth\\n   * @param loanStartTimeDay LoanStartTimeDay\\n   * @param ipfsHash IpfsHash which contract and collateral data stored\\n   The interest rate paid on a bond by its issuer for the term of the security\\n   */\\n  function settleAssetBond(\\n    address borrower,\\n    address signer,\\n    uint256 tokenId,\\n    uint256 principal,\\n    uint256 couponRate,\\n    uint256 delinquencyRate,\\n    uint256 debtCeiling,\\n    uint16 loanDuration,\\n    uint16 loanStartTimeYear,\\n    uint8 loanStartTimeMonth,\\n    uint8 loanStartTimeDay,\\n    string memory ipfsHash\\n  ) external onlyCollateralServiceProvider {\\n    SettleAssetBondLocalVars memory vars;\\n    require(ownerOf(tokenId) == msg.sender, 'OnlyOnwerCanSettle');\\n\\n    require(_assetBondData[tokenId].state == DataStruct.AssetBondState.EMPTY, 'AlreadySettled');\\n\\n    require(_connector.isCouncil(signer), 'SignerIsNotCouncil');\\n    vars.loanStartTimestamp = 0;\\n    vars.maturityTimestamp = 0;\\n    vars.liquidationTimestamp = 0;\\n\\n    vars.loanStartTimestamp = TimeConverter.toTimestamp(\\n      loanStartTimeYear,\\n      loanStartTimeMonth,\\n      loanStartTimeDay\\n    );\\n    vars.maturityTimestamp = vars.loanStartTimestamp + (uint256(loanDuration) * 1 days);\\n    vars.liquidationTimestamp = vars.maturityTimestamp + (10 * 1 days);\\n\\n    DataStruct.AssetBondData memory newAssetBond = DataStruct.AssetBondData({\\n      state: DataStruct.AssetBondState.SETTLED,\\n      borrower: borrower,\\n      signer: signer,\\n      collateralServiceProvider: msg.sender,\\n      principal: principal,\\n      debtCeiling: debtCeiling,\\n      couponRate: couponRate,\\n      interestRate: 0,\\n      delinquencyRate: delinquencyRate,\\n      loanStartTimestamp: vars.loanStartTimestamp,\\n      collateralizeTimestamp: 0,\\n      maturityTimestamp: vars.maturityTimestamp,\\n      liquidationTimestamp: vars.liquidationTimestamp,\\n      ipfsHash: ipfsHash,\\n      signerOpinionHash: ''\\n    });\\n\\n    Validation.validateSettleAssetBond(newAssetBond);\\n\\n    _assetBondData[tokenId] = newAssetBond;\\n\\n    emit AssetBondSettled(\\n      borrower,\\n      signer,\\n      tokenId,\\n      principal,\\n      couponRate,\\n      delinquencyRate,\\n      debtCeiling,\\n      vars.maturityTimestamp,\\n      vars.liquidationTimestamp,\\n      vars.loanStartTimestamp,\\n      ipfsHash\\n    );\\n  }\\n\\n  /**\\n   * @notice When the collateral service provider settled the informations based on the real world contract\\n   * in asset bond token, the third party connector such as lawfrim should review this and sign it.\\n   * The object for this process is to build trust in the token issuance in ELYFI.\\n   * This final verification process is carried out by reliable parties such as lawfirm.\\n   * The review is following four items.\\n   * Determination of the authenticity of collateral security details entered in real estate registration\\n   * Determination of the authenticity of the contract between a real estate owner and a collateral service provider\\n   * Determination of the value of principal and interest through certificates of seal impressions\\n   * of real estate owners and lenders\\n   * Determination of whether the important information entered in smart contracts match the contract content\\n   * This allows the asset bond tokens to be recognized as collateral on the blockchain.\\n   * @param tokenId The token Id to release\\n   * @param signerOpinionHash The signer can upload their opinion as a form of official documents on IPFS server.\\n   */\\n  function signAssetBond(uint256 tokenId, string memory signerOpinionHash) external onlyCouncil {\\n    DataStruct.AssetBondData storage assetBond = _assetBondData[tokenId];\\n    Validation.validateSignAssetBond(assetBond);\\n\\n    assetBond.state = DataStruct.AssetBondState.CONFIRMED;\\n    assetBond.signerOpinionHash = signerOpinionHash;\\n\\n    emit AssetBondSigned(msg.sender, tokenId, signerOpinionHash);\\n  }\\n\\n  /**\\n   * @notice The collateral service provider can take out a loan of value equivalent to the collateral\\n   * recored in asset bond tokens. The asset bond tokens are automatically transferred to the MoneyPool\\n   * by internal function of `borrow` function.\\n   * @dev The collateralizing asset bond token should be only from the MoneyPool.\\n   * @param account The owner of asset bond token\\n   * @param tokenId The token Id to collateralize\\n   * @param borrowAmount The borrow amount.\\n   * @param interestRate The interest rate of the loan between MoneyPool and borrower.\\n   */\\n  function collateralizeAssetBond(\\n    address account,\\n    uint256 tokenId,\\n    uint256 borrowAmount,\\n    uint256 interestRate\\n  ) external override onlyMoneyPool {\\n    DataStruct.AssetBondData storage assetBond = _assetBondData[tokenId];\\n\\n    assetBond.state = DataStruct.AssetBondState.COLLATERALIZED;\\n\\n    // set bond date data\\n    assetBond.interestRate = interestRate;\\n    assetBond.collateralizeTimestamp = block.timestamp;\\n\\n    transferFrom(account, address(_moneyPool), tokenId);\\n\\n    emit AssetBondCollateralized(account, tokenId, borrowAmount, interestRate);\\n  }\\n\\n  /**\\n   * @notice In the repayment scenario, the dTokens are destroyed and the collateral of the locked up\\n   * asset bond tokens in the MoneyPool is unlocked. The asset bond tokens are transfered to the\\n   * address of the borrower for terminating the collateral contract.\\n   * @dev The releasing asset bond token should be only from the MoneyPool.\\n   * @param account The borrower\\n   * @param tokenId The token Id to release\\n   */\\n  function releaseAssetBond(address account, uint256 tokenId) external override onlyMoneyPool {\\n    DataStruct.AssetBondData storage assetBond = _assetBondData[tokenId];\\n    assetBond.state = DataStruct.AssetBondState.REDEEMED;\\n\\n    transferFrom(address(_moneyPool), account, tokenId);\\n    emit AssetBondReleased(account, tokenId);\\n  }\\n\\n  /**\\n   * @notice In the liquidation scenario, the dTokens are burned and the collateral of the locked up\\n   * asset bond tokens in the MoneyPool is transferred to liquidator.\\n   * @dev The liquidating asset bond token should be only from the MoneyPool.\\n   * @param account The liquidator\\n   * @param tokenId The token Id to release\\n   */\\n  function liquidateAssetBond(address account, uint256 tokenId) external override onlyMoneyPool {\\n    DataStruct.AssetBondData storage assetBond = _assetBondData[tokenId];\\n    assetBond.state = DataStruct.AssetBondState.LIQUIDATED;\\n    transferFrom(address(_moneyPool), account, tokenId);\\n    emit AssetBondLiquidated(account, tokenId);\\n  }\\n\\n  /************ Access Functions ************/\\n\\n  modifier onlyMoneyPool() {\\n    require(_msgSender() == address(_moneyPool), 'OnlyMoneyPool');\\n    _;\\n  }\\n\\n  modifier onlyCollateralServiceProvider() {\\n    require(_connector.isCollateralServiceProvider(msg.sender), 'OnlyCollateralServiceProvider');\\n    _;\\n  }\\n\\n  modifier onlyCouncil() {\\n    require(_connector.isCouncil(msg.sender), 'OnlyCouncil');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x0dfd9ca0b3cc0c1844aba7c90086e16fdba185ca73e079799d0294459155c347\",\"license\":\"MIT\"},\"contracts/TokenizerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport './libraries/DataStruct.sol';\\n\\nimport './logic/Index.sol';\\n\\nimport './interfaces/IConnector.sol';\\nimport './interfaces/IMoneyPool.sol';\\n\\ncontract TokenizerStorage {\\n  using Index for DataStruct.ReserveData;\\n\\n  IConnector internal _connector;\\n\\n  IMoneyPool internal _moneyPool;\\n\\n  mapping(uint256 => bytes32) internal _tokenType;\\n\\n  mapping(uint256 => address) internal _minter;\\n\\n  address internal _underlyingAsset;\\n\\n  // A mapping from an asset bond's identifier to the asset bond data struct.\\n  // The token id is a unique identifier for asset bond.\\n  mapping(uint256 => DataStruct.AssetBondData) internal _assetBondData;\\n}\\n\",\"keccak256\":\"0x9350156565c3dc65ac5574d3f23619d1f9dca0da4a9f620150f1c58e4d7b4cb3\",\"license\":\"MIT\"},\"contracts/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface IConnector {\\n  /**\\n   * @notice Emitted when an admin adds a council role\\n   **/\\n  event NewCouncilAdded(address indexed account);\\n\\n  /**\\n   * @notice Emitted when an admin adds a collateral service provider role\\n   **/\\n  event NewCollateralServiceProviderAdded(address indexed account);\\n\\n  /**\\n   * @notice Emitted when a council role is revoked by admin\\n   **/\\n  event CouncilRevoked(address indexed account);\\n\\n  /**\\n   * @notice Emitted when a collateral service provider role is revoked by admin\\n   **/\\n  event CollateralServiceProviderRevoked(address indexed account);\\n\\n  function isCollateralServiceProvider(address account) external view returns (bool);\\n\\n  function isCouncil(address account) external view returns (bool);\\n\\n  function isMoneyPoolAdmin(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8d00f13d4b3f1d2b43209c0e6921321c976376f93bed9db3e2a285a0881da9de\",\"license\":\"MIT\"},\"contracts/interfaces/ILToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ILToken is IERC20 {\\n  /**\\n   * @dev Emitted after lTokens are minted\\n   * @param account The receiver of minted lToken\\n   * @param amount The amount being minted\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed account, uint256 amount, uint256 index);\\n\\n  /**\\n   * @dev Emitted after lTokens are burned\\n   * @param account The owner of the lTokens, getting them burned\\n   * @param underlyingAssetReceiver The address that will receive the underlying asset\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(\\n    address indexed account,\\n    address indexed underlyingAssetReceiver,\\n    uint256 amount,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param account The account whose tokens are being transferred\\n   * @param to The recipient\\n   * @param amount The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed account, address indexed to, uint256 amount, uint256 index);\\n\\n  function mint(\\n    address account,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Burns lTokens account `account` and sends the equivalent amount of underlying to `receiver`\\n   * @param account The owner of the lTokens, getting them burned\\n   * @param receiver The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(\\n    address account,\\n    address receiver,\\n    uint256 amount,\\n    uint256 index\\n  ) external;\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this LTokens (E.g. WETH for aWETH)\\n   **/\\n  function getUnderlyingAsset() external view returns (address);\\n\\n  function implicitBalanceOf(address account) external view returns (uint256);\\n\\n  function implicitTotalSupply() external view returns (uint256);\\n\\n  function transferUnderlyingTo(address underlyingAssetReceiver, uint256 amount) external;\\n\\n  function updateIncentivePool(address newIncentivePool) external;\\n}\\n\",\"keccak256\":\"0xd1c7fbacda21b3f118c9c380b6294fba5a812f8af2605dab957da0296e6bf8e6\",\"license\":\"MIT\"},\"contracts/interfaces/IMoneyPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\n\\ninterface IMoneyPool {\\n  event NewReserve(\\n    address indexed asset,\\n    address lToken,\\n    address dToken,\\n    address interestModel,\\n    address tokenizer,\\n    address incentivePool,\\n    uint256 moneyPoolFactor\\n  );\\n\\n  event Deposit(address indexed asset, address indexed account, uint256 amount);\\n\\n  event Withdraw(\\n    address indexed asset,\\n    address indexed account,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  event Borrow(\\n    address indexed asset,\\n    address indexed collateralServiceProvider,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 borrowAPY,\\n    uint256 borrowAmount\\n  );\\n\\n  event Repay(\\n    address indexed asset,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 userDTokenBalance,\\n    uint256 feeOnCollateralServiceProvider\\n  );\\n\\n  event Liquidation(\\n    address indexed asset,\\n    address indexed borrower,\\n    uint256 tokenId,\\n    uint256 userDTokenBalance,\\n    uint256 feeOnCollateralServiceProvider\\n  );\\n\\n  function deposit(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external;\\n\\n  function withdraw(\\n    address asset,\\n    address account,\\n    uint256 amount\\n  ) external;\\n\\n  function borrow(address asset, uint256 tokenID) external;\\n\\n  function repay(address asset, uint256 tokenId) external;\\n\\n  function liquidate(address asset, uint256 tokenId) external;\\n\\n  function getLTokenInterestIndex(address asset) external view returns (uint256);\\n\\n  function getReserveData(address asset) external view returns (DataStruct.ReserveData memory);\\n\\n  function addNewReserve(\\n    address asset,\\n    address lToken,\\n    address dToken,\\n    address interestModel,\\n    address tokenizer,\\n    address incentivePool,\\n    uint256 moneyPoolFactor_\\n  ) external;\\n}\\n\",\"keccak256\":\"0x36ca1cfa806be7e8f1b1681faeda0f1dc4a26462728aa403b73e4eef12567ef1\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '../libraries/DataStruct.sol';\\n\\ninterface ITokenizer is IERC721 {\\n  /**\\n   * @notice Emitted when a collateral service provider mints an empty asset bond token.\\n   * @param account The address of collateral service provider who minted\\n   * @param tokenId The id of minted token\\n   **/\\n  event EmptyAssetBondMinted(address indexed account, uint256 tokenId);\\n\\n  /**\\n   * @notice Emitted when a collateral service provider mints an empty asset bond token.\\n   **/\\n  event AssetBondSettled(\\n    address indexed borrower,\\n    address indexed signer,\\n    uint256 tokenId,\\n    uint256 principal,\\n    uint256 couponRate,\\n    uint256 delinquencyRate,\\n    uint256 debtCeiling,\\n    uint256 maturityTimestamp,\\n    uint256 liquidationTimestamp,\\n    uint256 loanStartTimestamp,\\n    string ifpsHash\\n  );\\n\\n  event AssetBondSigned(address indexed signer, uint256 tokenId, string signerOpinionHash);\\n\\n  event AssetBondCollateralized(\\n    address indexed account,\\n    uint256 tokenId,\\n    uint256 borrowAmount,\\n    uint256 interestRate\\n  );\\n\\n  event AssetBondReleased(address indexed borrower, uint256 tokenId);\\n\\n  event AssetBondLiquidated(address indexed liquidator, uint256 tokenId);\\n\\n  function mintAssetBond(address account, uint256 id) external;\\n\\n  function collateralizeAssetBond(\\n    address collateralServiceProvider,\\n    uint256 tokenId,\\n    uint256 borrowAmount,\\n    uint256 borrowAPY\\n  ) external;\\n\\n  function releaseAssetBond(address account, uint256 tokenId) external;\\n\\n  function liquidateAssetBond(address account, uint256 tokenId) external;\\n\\n  function getAssetBondIdData(uint256 tokenId)\\n    external\\n    view\\n    returns (DataStruct.AssetBondIdData memory);\\n\\n  function getAssetBondData(uint256 tokenId)\\n    external\\n    view\\n    returns (DataStruct.AssetBondData memory);\\n\\n  function getAssetBondDebtData(uint256 tokenId) external view returns (uint256, uint256);\\n\\n  function getMinter(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xbf93496db22cbfc22baf0f49fe78bc97807d9139a9589191d8bef4fcb739d727\",\"license\":\"MIT\"},\"contracts/libraries/DataStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nlibrary DataStruct {\\n  /**\\n    @notice The main reserve data struct.\\n   */\\n  struct ReserveData {\\n    uint256 moneyPoolFactor;\\n    uint256 lTokenInterestIndex;\\n    uint256 borrowAPY;\\n    uint256 depositAPY;\\n    uint256 lastUpdateTimestamp;\\n    address lTokenAddress;\\n    address dTokenAddress;\\n    address interestModelAddress;\\n    address tokenizerAddress;\\n    uint8 id;\\n    bool isPaused;\\n    bool isActivated;\\n  }\\n\\n  /**\\n   * @notice The asset bond data struct.\\n   * @param ipfsHash The IPFS hash that contains the informations and contracts\\n   * between Collateral Service Provider and lender.\\n   * @param maturityTimestamp The amount of time measured in seconds that can elapse\\n   * before the NPL company liquidate the loan and seize the asset bond collateral.\\n   * @param borrower The address of the borrower.\\n   */\\n  struct AssetBondData {\\n    AssetBondState state;\\n    address borrower;\\n    address signer;\\n    address collateralServiceProvider;\\n    uint256 principal;\\n    uint256 debtCeiling;\\n    uint256 couponRate;\\n    uint256 interestRate;\\n    uint256 delinquencyRate;\\n    uint256 loanStartTimestamp;\\n    uint256 collateralizeTimestamp;\\n    uint256 maturityTimestamp;\\n    uint256 liquidationTimestamp;\\n    string ipfsHash; // refactor : gas\\n    string signerOpinionHash;\\n  }\\n\\n  struct AssetBondIdData {\\n    uint256 nonce;\\n    uint256 countryCode;\\n    uint256 collateralServiceProviderIdentificationNumber;\\n    uint256 collateralLatitude;\\n    uint256 collateralLatitudeSign;\\n    uint256 collateralLongitude;\\n    uint256 collateralLongitudeSign;\\n    uint256 collateralDetail;\\n    uint256 collateralCategory;\\n    uint256 productNumber;\\n  }\\n\\n  /**\\n    @notice The states of asset bond\\n    * EMPTY: After\\n    * SETTLED:\\n    * CONFIRMED:\\n    * COLLATERALIZED:\\n    * DELINQUENT:\\n    * REDEEMED:\\n    * LIQUIDATED:\\n   */\\n  enum AssetBondState {\\n    EMPTY,\\n    SETTLED,\\n    CONFIRMED,\\n    COLLATERALIZED,\\n    DELINQUENT,\\n    REDEEMED,\\n    LIQUIDATED\\n  }\\n}\\n\",\"keccak256\":\"0xfef0408a202a6814e92f396333b81c78b4fff0bb1a9411b64afe849ced4ea3b1\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport './WadRayMath.sol';\\n\\nlibrary Math {\\n  using WadRayMath for uint256;\\n\\n  uint256 internal constant SECONDSPERYEAR = 365 days;\\n\\n  function calculateLinearInterest(\\n    uint256 rate,\\n    uint256 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    uint256 timeDelta = currentTimestamp - uint256(lastUpdateTimestamp);\\n\\n    return ((rate * timeDelta) / SECONDSPERYEAR) + WadRayMath.ray();\\n  }\\n\\n  /**\\n   * @notice Author : AAVE\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n   *\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n   *\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate compounded during the timeDelta, in ray\\n   **/\\n  function calculateCompoundedInterest(\\n    uint256 rate,\\n    uint256 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 exp = currentTimestamp - lastUpdateTimestamp;\\n\\n    if (exp == 0) {\\n      return WadRayMath.ray();\\n    }\\n\\n    uint256 expMinusOne = exp - 1;\\n\\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n    // loss of precision is endurable\\n    // slither-disable-next-line divide-before-multiply\\n    uint256 ratePerSecond = rate / SECONDSPERYEAR;\\n\\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n    uint256 secondTerm = (exp * expMinusOne * basePowerTwo) / 2;\\n    uint256 thirdTerm = (exp * expMinusOne * expMinusTwo * basePowerThree) / 6;\\n\\n    return WadRayMath.ray() + (ratePerSecond * exp) + secondTerm + thirdTerm;\\n  }\\n\\n  function calculateRateInIncreasingBalance(\\n    uint256 averageRate,\\n    uint256 totalBalance,\\n    uint256 amountIn,\\n    uint256 rate\\n  ) internal pure returns (uint256, uint256) {\\n    uint256 weightedAverageRate = totalBalance.wadToRay().rayMul(averageRate);\\n    uint256 weightedAmountRate = amountIn.wadToRay().rayMul(rate);\\n\\n    uint256 newTotalBalance = totalBalance + amountIn;\\n    uint256 newAverageRate = (weightedAverageRate + weightedAmountRate).rayDiv(\\n      newTotalBalance.wadToRay()\\n    );\\n\\n    return (newTotalBalance, newAverageRate);\\n  }\\n\\n  function calculateRateInDecreasingBalance(\\n    uint256 averageRate,\\n    uint256 totalBalance,\\n    uint256 amountOut,\\n    uint256 rate\\n  ) internal pure returns (uint256, uint256) {\\n    // if decreasing amount exceeds totalBalance,\\n    // overall rate and balacne would be set 0\\n    if (totalBalance <= amountOut) {\\n      return (0, 0);\\n    }\\n\\n    uint256 weightedAverageRate = totalBalance.wadToRay().rayMul(averageRate);\\n    uint256 weightedAmountRate = amountOut.wadToRay().rayMul(rate);\\n\\n    if (weightedAverageRate <= weightedAmountRate) {\\n      return (0, 0);\\n    }\\n\\n    uint256 newTotalBalance = totalBalance - amountOut;\\n\\n    uint256 newAverageRate = (weightedAverageRate - weightedAmountRate).rayDiv(\\n      newTotalBalance.wadToRay()\\n    );\\n\\n    return (newTotalBalance, newAverageRate);\\n  }\\n}\\n\",\"keccak256\":\"0x8b72d69b39c8f545155657e365f56dc019a35cd65aecc49f039a99a27329e3d5\",\"license\":\"MIT\"},\"contracts/libraries/Role.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @title ELYFI Role\\n * @author ELYSIA\\n */\\nlibrary Role {\\n  bytes32 internal constant CollateralServiceProvider = 'CollateralServiceProvider';\\n  bytes32 internal constant COUNCIL = 'COUNCIL';\\n  bytes32 internal constant MONEYPOOL_ADMIN = 'MONEYPOOL_ADMIN';\\n}\\n\",\"keccak256\":\"0x1376c5a17ca76309119bd4f2d34217850e107067b9705b16a49829d7af0c530b\",\"license\":\"MIT\"},\"contracts/libraries/TimeConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @title Ethereum timestamp conversion library\\n * @author ethereum-datatime\\n */\\nlibrary TimeConverter {\\n  struct DateTime {\\n    uint16 year;\\n    uint8 month;\\n    uint8 day;\\n    uint8 hour;\\n    uint8 minute;\\n    uint8 second;\\n    uint8 weekday;\\n  }\\n\\n  uint256 constant DAY_IN_SECONDS = 86400;\\n  uint256 constant YEAR_IN_SECONDS = 31536000;\\n  uint256 constant LEAP_YEAR_IN_SECONDS = 31622400;\\n\\n  uint256 constant HOUR_IN_SECONDS = 3600;\\n  uint256 constant MINUTE_IN_SECONDS = 60;\\n\\n  uint16 constant ORIGIN_YEAR = 1970;\\n\\n  function isLeapYear(uint16 year) internal pure returns (bool) {\\n    if (year % 4 != 0) {\\n      return false;\\n    }\\n    if (year % 100 != 0) {\\n      return true;\\n    }\\n    if (year % 400 != 0) {\\n      return false;\\n    }\\n    return true;\\n  }\\n\\n  function leapYearsBefore(uint256 year) internal pure returns (uint256) {\\n    year -= 1;\\n    return year / 4 - year / 100 + year / 400;\\n  }\\n\\n  function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\\n    if (\\n      month == 1 ||\\n      month == 3 ||\\n      month == 5 ||\\n      month == 7 ||\\n      month == 8 ||\\n      month == 10 ||\\n      month == 12\\n    ) {\\n      return 31;\\n    } else if (month == 4 || month == 6 || month == 9 || month == 11) {\\n      return 30;\\n    } else if (isLeapYear(year)) {\\n      return 29;\\n    } else {\\n      return 28;\\n    }\\n  }\\n\\n  function parseTimestamp(uint256 timestamp) public pure returns (DateTime memory dateTime) {\\n    uint256 secondsAccountedFor = 0;\\n    uint256 buf;\\n    uint8 i;\\n\\n    // Year\\n    dateTime.year = getYear(timestamp);\\n    buf = leapYearsBefore(dateTime.year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (dateTime.year - ORIGIN_YEAR - buf);\\n\\n    // Month\\n    uint256 secondsInMonth;\\n    for (i = 1; i <= 12; i++) {\\n      secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dateTime.year);\\n      if (secondsInMonth + secondsAccountedFor > timestamp) {\\n        dateTime.month = i;\\n        break;\\n      }\\n      secondsAccountedFor += secondsInMonth;\\n    }\\n\\n    // Day\\n    for (i = 1; i <= getDaysInMonth(dateTime.month, dateTime.year); i++) {\\n      if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\\n        dateTime.day = i;\\n        break;\\n      }\\n      secondsAccountedFor += DAY_IN_SECONDS;\\n    }\\n\\n    // Hour\\n    dateTime.hour = getHour(timestamp);\\n    // Minute\\n    dateTime.minute = getMinute(timestamp);\\n    // Second\\n    dateTime.second = getSecond(timestamp);\\n    // Day of week.\\n    dateTime.weekday = getWeekday(timestamp);\\n  }\\n\\n  function getYear(uint256 timestamp) internal pure returns (uint16) {\\n    uint256 secondsAccountedFor = 0;\\n    uint16 year;\\n    uint256 numLeapYears;\\n\\n    // Year\\n    year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\n    numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n    secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\n    secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\\n\\n    while (secondsAccountedFor > timestamp) {\\n      if (isLeapYear(uint16(year - 1))) {\\n        secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        secondsAccountedFor -= YEAR_IN_SECONDS;\\n      }\\n      year -= 1;\\n    }\\n    return year;\\n  }\\n\\n  function getMonth(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).month;\\n  }\\n\\n  function getDay(uint256 timestamp) internal pure returns (uint8) {\\n    return parseTimestamp(timestamp).day;\\n  }\\n\\n  function getHour(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60 / 60) % 24);\\n  }\\n\\n  function getMinute(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / 60) % 60);\\n  }\\n\\n  function getSecond(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8(timestamp % 60);\\n  }\\n\\n  function getWeekday(uint256 timestamp) internal pure returns (uint8) {\\n    return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day\\n  ) public pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, 0, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour\\n  ) public pure returns (uint256 timestamp) {\\n    return toTimestamp(year, month, day, hour, 0, 0);\\n  }\\n\\n  function toTimestamp(\\n    uint16 year,\\n    uint8 month,\\n    uint8 day,\\n    uint8 hour,\\n    uint8 minute,\\n    uint8 second\\n  ) public pure returns (uint256 timestamp) {\\n    uint16 i;\\n\\n    // Year\\n    for (i = ORIGIN_YEAR; i < year; i++) {\\n      if (isLeapYear(i)) {\\n        timestamp += LEAP_YEAR_IN_SECONDS;\\n      } else {\\n        timestamp += YEAR_IN_SECONDS;\\n      }\\n    }\\n\\n    // Month\\n    uint8[12] memory monthDayCounts;\\n    monthDayCounts[0] = 31;\\n    if (isLeapYear(year)) {\\n      monthDayCounts[1] = 29;\\n    } else {\\n      monthDayCounts[1] = 28;\\n    }\\n    monthDayCounts[2] = 31;\\n    monthDayCounts[3] = 30;\\n    monthDayCounts[4] = 31;\\n    monthDayCounts[5] = 30;\\n    monthDayCounts[6] = 31;\\n    monthDayCounts[7] = 31;\\n    monthDayCounts[8] = 30;\\n    monthDayCounts[9] = 31;\\n    monthDayCounts[10] = 30;\\n    monthDayCounts[11] = 31;\\n\\n    for (i = 1; i < month; i++) {\\n      timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\n    }\\n\\n    // Day\\n    timestamp += DAY_IN_SECONDS * (day - 1);\\n    // Hour\\n    timestamp += HOUR_IN_SECONDS * (hour);\\n    // Minute\\n    timestamp += MINUTE_IN_SECONDS * (minute);\\n    // Second\\n    timestamp += second;\\n\\n    return timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x8e132343eeabd7d6423ba797a8fbbcce898a201c69b63201662dbb4e1e734cf0\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Division by Zero');\\n    uint256 halfB = b / 2;\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Division by Zero');\\n    uint256 halfB = b / 2;\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x219da6a5d0c7c597faad6e638a2f0174b75d2ae50ee97314fb4afbc244abf01f\",\"license\":\"MIT\"},\"contracts/logic/AssetBond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\nimport '../libraries/Math.sol';\\nimport '../libraries/WadRayMath.sol';\\nimport '../libraries/TimeConverter.sol';\\n\\nlibrary AssetBond {\\n  using WadRayMath for uint256;\\n  using AssetBond for DataStruct.AssetBondData;\\n\\n  uint256 constant NONCE = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC00;\\n  uint256 constant COUNTRY_CODE =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC003FF;\\n  uint256 constant COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000003FFFFF;\\n  uint256 constant COLLATERAL_LATITUDE =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000FFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_LATITUDE_SIGNS =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_LONGITUDE =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0000001FFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_LONGITUDE_SIGNS =\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_DETAILS =\\n    0xFFFFFFFFFFFFFFFFFFFFFC0000000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant COLLATERAL_CATEGORY =\\n    0xFFFFFFFFFFFFFFFFFFF003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n  uint256 constant PRODUCT_NUMBER =\\n    0xFFFFFFFFFFFFFFFFC00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  uint256 constant NONCE_START = 0;\\n  uint256 constant COUNTRY_CODE_START = 10;\\n  uint256 constant COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER_START = 22;\\n  uint256 constant COLLATERAL_LATITUDE_START = 72;\\n  uint256 constant COLLATERAL_LATITUDE_SIGNS_START = 100;\\n  uint256 constant COLLATERAL_LONGITUDE_START = 101;\\n  uint256 constant COLLATERAL_LONGITUDE_SIGNS_START = 129;\\n  uint256 constant COLLATERAL_DETAILS_START = 130;\\n  uint256 constant COLLATERAL_CATEGORY_START = 170;\\n  uint256 constant PRODUCT_NUMBER_START = 180;\\n\\n  function parseAssetBondId(uint256 tokenId)\\n    public\\n    pure\\n    returns (DataStruct.AssetBondIdData memory)\\n  {\\n    DataStruct.AssetBondIdData memory vars;\\n    vars.nonce = tokenId & ~NONCE;\\n    vars.countryCode = (tokenId & ~COUNTRY_CODE) >> COUNTRY_CODE_START;\\n    vars.collateralServiceProviderIdentificationNumber =\\n      (tokenId & ~COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER) >>\\n      COLLATERAL_SERVICE_PROVIDER_IDENTIFICATION_NUMBER_START;\\n    vars.collateralLatitude = (tokenId & ~COLLATERAL_LATITUDE) >> COLLATERAL_LATITUDE_START;\\n    vars.collateralLatitudeSign =\\n      (tokenId & ~COLLATERAL_LATITUDE_SIGNS) >>\\n      COLLATERAL_LATITUDE_SIGNS_START;\\n    vars.collateralLongitude = (tokenId & ~COLLATERAL_LONGITUDE) >> COLLATERAL_LONGITUDE_START;\\n    vars.collateralLongitudeSign =\\n      (tokenId & ~COLLATERAL_LONGITUDE_SIGNS) >>\\n      COLLATERAL_LONGITUDE_SIGNS_START;\\n    vars.collateralDetail = (tokenId & ~COLLATERAL_DETAILS) >> COLLATERAL_DETAILS_START;\\n    vars.collateralCategory = (tokenId & ~COLLATERAL_CATEGORY) >> COLLATERAL_CATEGORY_START;\\n    vars.productNumber = (tokenId & ~PRODUCT_NUMBER) >> PRODUCT_NUMBER_START;\\n\\n    return vars;\\n  }\\n\\n  function getAssetBondDebtData(DataStruct.AssetBondData memory assetBondData)\\n    public\\n    view\\n    returns (uint256, uint256)\\n  {\\n    if (assetBondData.state != DataStruct.AssetBondState.COLLATERALIZED) {\\n      return (0, 0);\\n    }\\n\\n    uint256 accruedDebtOnMoneyPool = Math\\n    .calculateCompoundedInterest(\\n      assetBondData.interestRate,\\n      assetBondData.collateralizeTimestamp,\\n      block.timestamp\\n    ).rayMul(assetBondData.principal);\\n\\n    uint256 feeOnCollateralServiceProvider = calculateFeeOnRepayment(\\n      assetBondData,\\n      block.timestamp\\n    );\\n\\n    return (accruedDebtOnMoneyPool, feeOnCollateralServiceProvider);\\n  }\\n\\n  struct CalculateFeeOnRepaymentLocalVars {\\n    TimeConverter.DateTime paymentDateTimeStruct;\\n    uint256 paymentDate;\\n    uint256 firstTermRate;\\n    uint256 secondTermRate;\\n    uint256 secondTermOverdueRate;\\n    uint256 thirdTermRate;\\n    uint256 totalRate;\\n  }\\n\\n  function calculateFeeOnRepayment(\\n    DataStruct.AssetBondData memory assetBondData,\\n    uint256 paymentTimestamp\\n  ) internal pure returns (uint256) {\\n    CalculateFeeOnRepaymentLocalVars memory vars;\\n\\n    vars.firstTermRate = Math.calculateCompoundedInterest(\\n      assetBondData.couponRate,\\n      assetBondData.loanStartTimestamp,\\n      assetBondData.collateralizeTimestamp\\n    );\\n\\n    vars.paymentDateTimeStruct = TimeConverter.parseTimestamp(paymentTimestamp);\\n    vars.paymentDate = TimeConverter.toTimestamp(\\n      vars.paymentDateTimeStruct.year,\\n      vars.paymentDateTimeStruct.month,\\n      vars.paymentDateTimeStruct.day + 1\\n    );\\n\\n    if (paymentTimestamp <= assetBondData.liquidationTimestamp) {\\n      vars.secondTermRate =\\n        Math.calculateCompoundedInterest(\\n          assetBondData.couponRate - assetBondData.interestRate,\\n          assetBondData.collateralizeTimestamp,\\n          paymentTimestamp\\n        ) -\\n        WadRayMath.ray();\\n      vars.thirdTermRate =\\n        Math.calculateCompoundedInterest(\\n          assetBondData.couponRate,\\n          paymentTimestamp,\\n          vars.paymentDate\\n        ) -\\n        WadRayMath.ray();\\n\\n      vars.totalRate = vars.firstTermRate + vars.secondTermRate + vars.thirdTermRate;\\n\\n      return assetBondData.principal.rayMul(vars.totalRate) - assetBondData.principal;\\n    }\\n\\n    vars.secondTermRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate - assetBondData.interestRate,\\n        assetBondData.collateralizeTimestamp,\\n        assetBondData.maturityTimestamp\\n      ) -\\n      WadRayMath.ray();\\n    vars.secondTermOverdueRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate + assetBondData.delinquencyRate - assetBondData.interestRate,\\n        assetBondData.maturityTimestamp,\\n        paymentTimestamp\\n      ) -\\n      WadRayMath.ray();\\n    vars.thirdTermRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate + assetBondData.delinquencyRate,\\n        paymentTimestamp,\\n        vars.paymentDate\\n      ) -\\n      WadRayMath.ray();\\n\\n    vars.totalRate =\\n      vars.firstTermRate +\\n      vars.secondTermRate +\\n      vars.secondTermOverdueRate +\\n      vars.thirdTermRate;\\n\\n    return assetBondData.principal.rayMul(vars.totalRate) - assetBondData.principal;\\n  }\\n\\n  function getAssetBondLiquidationData(DataStruct.AssetBondData memory assetBondData)\\n    internal\\n    view\\n    returns (uint256, uint256)\\n  {\\n    uint256 accruedDebtOnMoneyPool = Math\\n    .calculateCompoundedInterest(\\n      assetBondData.interestRate,\\n      assetBondData.collateralizeTimestamp,\\n      block.timestamp\\n    ).rayMul(assetBondData.principal);\\n\\n    uint256 feeOnCollateralServiceProvider = calculateDebtAmountToLiquidation(\\n      assetBondData,\\n      block.timestamp\\n    );\\n\\n    return (accruedDebtOnMoneyPool, feeOnCollateralServiceProvider);\\n  }\\n\\n  struct CalculateDebtAmountToLiquidationLocalVars {\\n    TimeConverter.DateTime paymentDateTimeStruct;\\n    uint256 paymentDate;\\n    uint256 firstTermRate;\\n    uint256 secondTermRate;\\n    uint256 totalRate;\\n  }\\n\\n  function calculateDebtAmountToLiquidation(\\n    DataStruct.AssetBondData memory assetBondData,\\n    uint256 paymentTimestamp\\n  ) internal pure returns (uint256) {\\n    CalculateDebtAmountToLiquidationLocalVars memory vars;\\n    vars.firstTermRate = Math.calculateCompoundedInterest(\\n      assetBondData.couponRate,\\n      assetBondData.loanStartTimestamp,\\n      assetBondData.maturityTimestamp\\n    );\\n\\n    vars.paymentDateTimeStruct = TimeConverter.parseTimestamp(paymentTimestamp);\\n    vars.paymentDate = TimeConverter.toTimestamp(\\n      vars.paymentDateTimeStruct.year,\\n      vars.paymentDateTimeStruct.month,\\n      vars.paymentDateTimeStruct.day + 1\\n    );\\n\\n    vars.secondTermRate =\\n      Math.calculateCompoundedInterest(\\n        assetBondData.couponRate + assetBondData.delinquencyRate,\\n        assetBondData.maturityTimestamp,\\n        vars.paymentDate\\n      ) -\\n      WadRayMath.ray();\\n    vars.totalRate = vars.firstTermRate + vars.secondTermRate;\\n\\n    return assetBondData.principal.rayMul(vars.totalRate) - assetBondData.principal;\\n  }\\n}\\n\",\"keccak256\":\"0xc38a82b90691ff0157320fa3524660e4580639cc6fb9a193228f756cd973c074\",\"license\":\"MIT\"},\"contracts/logic/Index.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\nimport '../libraries/Math.sol';\\n\\nlibrary Index {\\n  using WadRayMath for uint256;\\n  using Index for DataStruct.ReserveData;\\n\\n  event LTokenIndexUpdated(address indexed asset, uint256 lTokenIndex, uint256 lastUpdateTimestamp);\\n\\n  /**\\n   * @dev Returns the ongoing normalized income for the reserve\\n   * A value of 1e27 means there is no income. As time passes, the income is accrued\\n   * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n   * @param reserve The reserve object\\n   * @return the normalized income. expressed in ray\\n   **/\\n  function getLTokenInterestIndex(DataStruct.ReserveData storage reserve)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    uint256 lastUpdateTimestamp = reserve.lastUpdateTimestamp;\\n\\n    // strict equality is not dangerous here\\n    // divide-before-multiply dangerous-strict-equalities\\n    if (lastUpdateTimestamp == block.timestamp) {\\n      return reserve.lTokenInterestIndex;\\n    }\\n\\n    uint256 newIndex = Math\\n      .calculateLinearInterest(reserve.depositAPY, lastUpdateTimestamp, block.timestamp)\\n      .rayMul(reserve.lTokenInterestIndex);\\n\\n    return newIndex;\\n  }\\n\\n  /**\\n   * @dev Updates the reserve indexes and the timestamp\\n   * @param reserve The reserve to be updated\\n   **/\\n  function updateState(DataStruct.ReserveData storage reserve, address asset) internal {\\n    if (reserve.depositAPY == 0) {\\n      reserve.lastUpdateTimestamp = block.timestamp;\\n      return;\\n    }\\n\\n    reserve.lTokenInterestIndex = getLTokenInterestIndex(reserve);\\n    reserve.lastUpdateTimestamp = block.timestamp;\\n\\n    emit LTokenIndexUpdated(asset, reserve.lTokenInterestIndex, reserve.lastUpdateTimestamp);\\n  }\\n}\\n\",\"keccak256\":\"0x51eefb7271bd5fd47f63fc443638d2b2180970f7d0ee17764d9906b92afeebfd\",\"license\":\"MIT\"},\"contracts/logic/Validation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.3;\\n\\nimport '../libraries/DataStruct.sol';\\nimport '../libraries/Math.sol';\\n\\nimport '../interfaces/ILToken.sol';\\n\\nlibrary Validation {\\n  using WadRayMath for uint256;\\n  using Validation for DataStruct.ReserveData;\\n\\n  /**\\n   * @dev Validate Deposit\\n   * Check reserve state\\n   * @param reserve The reserve object\\n   * @param amount Deposit amount\\n   **/\\n  function validateDeposit(DataStruct.ReserveData storage reserve, uint256 amount) public view {\\n    require(amount != 0, 'InvalidAmount');\\n    require(!reserve.isPaused, 'ReservePaused');\\n    require(reserve.isActivated, 'ReserveInactivated');\\n  }\\n\\n  /**\\n   * @dev Validate Withdraw\\n   * Check reserve state\\n   * Check user amount\\n   * Check user total debt(later)\\n   * @param reserve The reserve object\\n   * @param amount Withdraw amount\\n   **/\\n  function validateWithdraw(\\n    DataStruct.ReserveData storage reserve,\\n    address asset,\\n    uint256 amount,\\n    uint256 userLTokenBalance\\n  ) public view {\\n    require(amount != 0, 'InvalidAmount');\\n    require(!reserve.isPaused, 'ReservePaused');\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(amount <= userLTokenBalance, 'InsufficientBalance');\\n    uint256 availableLiquidity = IERC20(asset).balanceOf(reserve.lTokenAddress);\\n    require(availableLiquidity >= amount, 'NotEnoughLiquidity');\\n  }\\n\\n  function validateBorrow(\\n    DataStruct.ReserveData storage reserve,\\n    DataStruct.AssetBondData memory assetBond,\\n    address asset,\\n    uint256 borrowAmount\\n  ) public view {\\n    require(!reserve.isPaused, 'ReservePaused');\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(assetBond.state == DataStruct.AssetBondState.CONFIRMED, 'OnlySignedTokenBorrowAllowed');\\n    require(msg.sender == assetBond.collateralServiceProvider, 'OnlyOwnerBorrowAllowed');\\n    uint256 availableLiquidity = IERC20(asset).balanceOf(reserve.lTokenAddress);\\n    require(availableLiquidity >= borrowAmount, 'NotEnoughLiquidity');\\n    require(block.timestamp >= assetBond.loanStartTimestamp, 'NotTimeForLoanStart');\\n    require(assetBond.loanStartTimestamp + 18 hours >= block.timestamp, 'TimeOutForCollateralize');\\n  }\\n\\n  function validateLTokenTrasfer() internal pure {}\\n\\n  function validateRepay(\\n    DataStruct.ReserveData storage reserve,\\n    DataStruct.AssetBondData memory assetBond\\n  ) public view {\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(block.timestamp < assetBond.liquidationTimestamp, 'LoanExpired');\\n    require(\\n      (assetBond.state == DataStruct.AssetBondState.COLLATERALIZED ||\\n        assetBond.state == DataStruct.AssetBondState.DELINQUENT),\\n      'NotRepayableState'\\n    );\\n  }\\n\\n  function validateLiquidation(\\n    DataStruct.ReserveData storage reserve,\\n    DataStruct.AssetBondData memory assetBond\\n  ) public view {\\n    require(reserve.isActivated, 'ReserveInactivated');\\n    require(assetBond.state == DataStruct.AssetBondState.LIQUIDATED, 'NotLiquidatbleState');\\n  }\\n\\n  function validateSignAssetBond(DataStruct.AssetBondData storage assetBond) public view {\\n    require(assetBond.state == DataStruct.AssetBondState.SETTLED, 'OnlySettledTokenSignAllowed');\\n    require(assetBond.signer == msg.sender, 'NotAllowedSigner');\\n  }\\n\\n  function validateSettleAssetBond(DataStruct.AssetBondData memory assetBond) public view {\\n    require(block.timestamp < assetBond.loanStartTimestamp, 'OnlySettledSigned');\\n    require(assetBond.loanStartTimestamp != assetBond.maturityTimestamp, 'LoanDurationInvalid');\\n  }\\n\\n  function validateTokenId(DataStruct.AssetBondIdData memory idData) internal pure {\\n    require(idData.collateralLatitude < 9000000, 'InvaildLatitude');\\n    require(idData.collateralLongitude < 18000000, 'InvaildLongitude');\\n  }\\n}\\n\",\"keccak256\":\"0x3786ce94f42a5af20df962cfe40a2c2d198e23db6f67b05a46aed8a45275abef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011d5760003560e01c806301ffc9a71461012257806306fdde031461014a578063081812fc1461015f578063095ea7b31461017f578063132cfab2146101945780631a4dbaf8146101a757806323b872dd146101cf57806342842e0e146101e257806354b0e57f146101f55780635b7121f8146102085780635cb45fea146102315780636352211e146102bd5780636899311a146102d05780636e593673146102e357806370a08231146102f65780638268b24e146103175780638d50c46f1461033757806395d89b411461034a578063a22cb46514610352578063b88d4fde14610365578063bfccc2e014610378578063c87b56dd1461038b578063e985e9c51461039e575b600080fd5b6101356101303660046126e9565b6103b1565b60405190151581526020015b60405180910390f35b610152610405565b604051610141919061291d565b61017261016d3660046127ab565b610497565b60405161014191906128cc565b61019261018d36600461266c565b610524565b005b6101926101a23660046127db565b610635565b6101ba6101b53660046127ab565b6107ca565b60408051928352602083019190915201610141565b6101926101dd3660046124af565b610a74565b6101926101f03660046124af565b610aa5565b61019261020336600461266c565b610ac0565b6101726102163660046127ab565b6000908152600360205260409020546001600160a01b031690565b61024461023f3660046127ab565b610b5e565b6040516101419190600061014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b6101726102cb3660046127ab565b610c38565b6101926102de366004612695565b610caf565b6101926102f136600461266c565b610d73565b610309610304366004612463565b610e14565b604051908152602001610141565b61032a6103253660046127ab565b610e9b565b6040516101419190612a31565b61019261034536600461266c565b61118c565b6101526113de565b610192610360366004612636565b6113ed565b6101926103733660046124ea565b6114bb565b610192610386366004612562565b6114f3565b6101526103993660046127ab565b611ad1565b6101356103ac36600461247d565b611ba9565b60006001600160e01b031982166380ac58cd60e01b14806103e257506001600160e01b03198216635b5e139f60e01b145b806103fd57506301ffc9a760e01b6001600160e01b03198316145b90505b919050565b60606006805461041490612c57565b80601f016020809104026020016040519081016040528092919081815260200182805461044090612c57565b801561048d5780601f106104625761010080835404028352916020019161048d565b820191906000526020600020905b81548152906001019060200180831161047057829003601f168201915b5050505050905090565b60006104a282611bd7565b6105085760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600a60205260409020546001600160a01b031690565b600061052f82610c38565b9050806001600160a01b0316836001600160a01b0316141561059d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104ff565b336001600160a01b03821614806105b957506105b981336103ac565b6106265760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016104ff565b6106308383611bf4565b505050565b6000546040516326a8d83b60e21b81526001600160a01b0390911690639aa360ec906106659033906004016128cc565b60206040518083038186803b15801561067d57600080fd5b505afa158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b591906126cd565b6106ef5760405162461bcd60e51b815260206004820152600b60248201526a13db9b1e50dbdd5b98da5b60aa1b60448201526064016104ff565b6000828152600560205260409081902090516309d3a6b760e11b81526004810182905273__$a034ea2d5e2156aee4d32ca102faa25bbf$__906313a74d6e9060240160006040518083038186803b15801561074957600080fd5b505af415801561075d573d6000803e3d6000fd5b5050825460ff191660021783555050815161078190600d830190602085019061231a565b50336001600160a01b03167fa8237d359de2b8e453986112528b8a3502579d8ff461908475522fc9fad3fd6584846040516107bd929190612b2b565b60405180910390a2505050565b60008181526005602052604080822081516101e0810190925280548392908290829060ff16600681111561080e57634e487b7160e01b600052602160045260246000fd5b600681111561082d57634e487b7160e01b600052602160045260246000fd5b815281546001600160a01b036101009182900481166020840152600184015481166040840152600284015416606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e083015260078301549082015260088201546101208201526009820154610140820152600a820154610160820152600b820154610180820152600c820180546101a0909201916108d190612c57565b80601f01602080910402602001604051908101604052809291908181526020018280546108fd90612c57565b801561094a5780601f1061091f5761010080835404028352916020019161094a565b820191906000526020600020905b81548152906001019060200180831161092d57829003601f168201915b50505050508152602001600d8201805461096390612c57565b80601f016020809104026020016040519081016040528092919081815260200182805461098f90612c57565b80156109dc5780601f106109b1576101008083540402835291602001916109dc565b820191906000526020600020905b8154815290600101906020018083116109bf57829003601f168201915b5050509190925250506040516367f0d33960e01b815273__$82c3638f3539fdc3511ed289aa50105dc3$__926367f0d3399250610a1b91600401612a31565b604080518083038186803b158015610a3257600080fd5b505af4158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a919061281f565b9250925050915091565b610a7e3382611c62565b610a9a5760405162461bcd60e51b81526004016104ff906129e0565b610630838383611d2c565b610630838383604051806020016040528060008152506114bb565b6001546001600160a01b0316336001600160a01b031614610af35760405162461bcd60e51b81526004016104ff906129b9565b6000818152600560205260409020805460ff19166006178155600154610b23906001600160a01b03168484610a74565b826001600160a01b03167fb523fc152d4fcd4c6af1d46b649c797ba53c00b102bc294c82a552c21d752007836040516107bd91815260200190565b610bb4604051806101400160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040516304cd216560e21b81526004810183905273__$82c3638f3539fdc3511ed289aa50105dc3$__906313348594906024016101406040518083038186803b158015610c0057600080fd5b505af4158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fd9190612721565b6000818152600860205260408120546001600160a01b0316806103fd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016104ff565b6001546001600160a01b0316336001600160a01b031614610ce25760405162461bcd60e51b81526004016104ff906129b9565b6000838152600560205260409020805460ff1916600317815560068101829055426009820155600154610d209086906001600160a01b031686610a74565b60408051858152602081018590529081018390526001600160a01b038616907f29401d855a91c37a599481c2a1f13bcf5ee36250ccb66cb4a936c281214bf38e9060600160405180910390a25050505050565b6001546001600160a01b0316336001600160a01b031614610da65760405162461bcd60e51b81526004016104ff906129b9565b6000818152600560208190526040909120805460ff19169091178155600154610dd9906001600160a01b03168484610a74565b826001600160a01b03167fb1834f73928b1cbce8667e8018c79613cbecb2a5f3b479bd9a7a8befb959e3a3836040516107bd91815260200190565b60006001600160a01b038216610e7f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016104ff565b506001600160a01b031660009081526009602052604090205490565b610f30604080516101e08101909152806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b60008281526005602052604080822081516101e081019092528054829060ff166006811115610f6f57634e487b7160e01b600052602160045260246000fd5b6006811115610f8e57634e487b7160e01b600052602160045260246000fd5b815281546001600160a01b036101009182900481166020840152600184015481166040840152600284015416606083015260038301546080830152600483015460a0830152600583015460c0830152600683015460e083015260078301549082015260088201546101208201526009820154610140820152600a820154610160820152600b820154610180820152600c820180546101a09092019161103290612c57565b80601f016020809104026020016040519081016040528092919081815260200182805461105e90612c57565b80156110ab5780601f10611080576101008083540402835291602001916110ab565b820191906000526020600020905b81548152906001019060200180831161108e57829003601f168201915b50505050508152602001600d820180546110c490612c57565b80601f01602080910402602001604051908101604052809291908181526020018280546110f090612c57565b801561113d5780601f106111125761010080835404028352916020019161113d565b820191906000526020600020905b81548152906001019060200180831161112057829003601f168201915b5050505050815250509050806101800151421015801561117d575060038151600681111561117b57634e487b7160e01b600052602160045260246000fd5b145b156103fd576006815292915050565b600054604051631fc6b2f960e11b81526001600160a01b0390911690633f8d65f2906111bc9033906004016128cc565b60206040518083038186803b1580156111d457600080fd5b505afa1580156111e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120c91906126cd565b6112285760405162461bcd60e51b81526004016104ff90612982565b600054604051631fc6b2f960e11b81526001600160a01b0390911690633f8d65f2906112589085906004016128cc565b60206040518083038186803b15801561127057600080fd5b505afa158015611284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a891906126cd565b6112e75760405162461bcd60e51b815260206004820152601060248201526f2737ba20b63637bbb2b226b4b73a32b960811b60448201526064016104ff565b6040516304cd216560e21b81526004810182905260009073__$82c3638f3539fdc3511ed289aa50105dc3$__906313348594906024016101406040518083038186803b15801561133657600080fd5b505af415801561134a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136e9190612721565b905061137981611eba565b6113838383611f4f565b6000828152600360205260409081902080546001600160a01b03191633179055516001600160a01b038416907f81eb994f88e94e83535c8ee16a6badf618255469bb0d72734eb3edcd824f105a906107bd9085815260200190565b60606007805461041490612c57565b6001600160a01b0382163314156114425760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016104ff565b336000818152600b602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114af911515815260200190565b60405180910390a35050565b6114c53383611c62565b6114e15760405162461bcd60e51b81526004016104ff906129e0565b6114ed84848484611f6d565b50505050565b600054604051631fc6b2f960e11b81526001600160a01b0390911690633f8d65f2906115239033906004016128cc565b60206040518083038186803b15801561153b57600080fd5b505afa15801561154f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157391906126cd565b61158f5760405162461bcd60e51b81526004016104ff90612982565b6115b360405180606001604052806000815260200160008152602001600081525090565b336115bd8c610c38565b6001600160a01b0316146116085760405162461bcd60e51b81526020600482015260126024820152714f6e6c794f6e77657243616e536574746c6560701b60448201526064016104ff565b60008b81526005602052604081205460ff16600681111561163957634e487b7160e01b600052602160045260246000fd5b146116775760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e54d95d1d1b195960921b60448201526064016104ff565b6000546040516326a8d83b60e21b81526001600160a01b0390911690639aa360ec906116a7908f906004016128cc565b60206040518083038186803b1580156116bf57600080fd5b505afa1580156116d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f791906126cd565b6117385760405162461bcd60e51b815260206004820152601260248201527114da59db995c925cd39bdd10dbdd5b98da5b60721b60448201526064016104ff565b600080825260208201819052604080830191909152516304646cc560e51b815261ffff8616600482015260ff80861660248301528416604482015273__$f064660449bb8f64614f18479211edbf10$__90638c8d98a09060640160206040518083038186803b1580156117aa57600080fd5b505af41580156117be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e291906127c3565b81526117f561ffff871662015180612bf5565b81516118019190612bc9565b6020820181905261181590620d2f00612bc9565b60408083019190915280516101e0810190915260009080600181526020018f6001600160a01b031681526020018e6001600160a01b03168152602001336001600160a01b031681526020018c81526020018981526020018b8152602001600081526020018a81526020018360000151815260200160008152602001836020015181526020018360400151815260200184815260200160405180602001604052806000815250815250905073__$a034ea2d5e2156aee4d32ca102faa25bbf$__632536dc16826040518263ffffffff1660e01b81526004016118f69190612a31565b60006040518083038186803b15801561190e57600080fd5b505af4158015611922573d6000803e3d6000fd5b50505060008d815260056020526040902082518154849350829060ff1916600183600681111561196257634e487b7160e01b600052602160045260246000fd5b021790555060208281015182546001600160a01b03918216610100908102610100600160a81b031990921691909117845560408501516001850180549184166001600160a01b03199283161790556060860151600286018054919094169116179091556080840151600384015560a0840151600484015560c0840151600584015560e08401516006840155830151600783015561012083015160088301556101408301516009830155610160830151600a830155610180830151600b8301556101a08301518051611a3992600c850192019061231a565b506101c08201518051611a5691600d84019160209091019061231a565b509050508c6001600160a01b03168e6001600160a01b03167f8b5ac4b5b53cc9ee641d8e3867949d01fa7afb75a350ded527721699a2ad54ae8e8e8e8e8e89602001518a604001518b600001518d604051611ab999989796959493929190612b44565b60405180910390a35050505050505050505050505050565b6060611adc82611bd7565b611b405760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016104ff565b6000611b5760408051602081019091526000815290565b90506000815111611b775760405180602001604052806000815250611ba2565b80611b8184611fa0565b604051602001611b9292919061289d565b6040516020818303038152906040525b9392505050565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b6000908152600860205260409020546001600160a01b0316151590565b6000818152600a6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611c2982610c38565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611c6d82611bd7565b611cce5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104ff565b6000611cd983610c38565b9050806001600160a01b0316846001600160a01b03161480611d145750836001600160a01b0316611d0984610497565b6001600160a01b0316145b80611d245750611d248185611ba9565b949350505050565b826001600160a01b0316611d3f82610c38565b6001600160a01b031614611da75760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016104ff565b6001600160a01b038216611e095760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104ff565b611e14600082611bf4565b6001600160a01b0383166000908152600960205260408120805460019290611e3d908490612c14565b90915550506001600160a01b0382166000908152600960205260408120805460019290611e6b908490612bc9565b909155505060008181526008602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020612d2883398151915291a4505050565b62895440816060015110611f025760405162461bcd60e51b815260206004820152600f60248201526e496e7661696c644c6174697475646560881b60448201526064016104ff565b630112a8808160a0015110611f4c5760405162461bcd60e51b815260206004820152601060248201526f496e7661696c644c6f6e67697475646560801b60448201526064016104ff565b50565b611f698282604051806020016040528060008152506120ba565b5050565b611f78848484611d2c565b611f84848484846120ed565b6114ed5760405162461bcd60e51b81526004016104ff90612930565b606081611fc557506040805180820190915260018152600360fc1b6020820152610400565b8160005b8115611fef5780611fd981612c92565b9150611fe89050600a83612be1565b9150611fc9565b6000816001600160401b0381111561201757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612041576020820181803683370190505b5090505b8415611d2457612056600183612c14565b9150612063600a86612cad565b61206e906030612bc9565b60f81b81838151811061209157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506120b3600a86612be1565b9450612045565b6120c483836121fa565b6120d160008484846120ed565b6106305760405162461bcd60e51b81526004016104ff90612930565b60006001600160a01b0384163b156121ef57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906121319033908990889088906004016128e0565b602060405180830381600087803b15801561214b57600080fd5b505af192505050801561217b575060408051601f3d908101601f1916820190925261217891810190612705565b60015b6121d5573d8080156121a9576040519150601f19603f3d011682016040523d82523d6000602084013e6121ae565b606091505b5080516121cd5760405162461bcd60e51b81526004016104ff90612930565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d24565b506001949350505050565b6001600160a01b0382166122505760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104ff565b61225981611bd7565b156122a55760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b60448201526064016104ff565b6001600160a01b03821660009081526009602052604081208054600192906122ce908490612bc9565b909155505060008181526008602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020612d28833981519152908290a45050565b82805461232690612c57565b90600052602060002090601f016020900481019282612348576000855561238e565b82601f1061236157805160ff191683800117855561238e565b8280016001018555821561238e579182015b8281111561238e578251825591602001919060010190612373565b5061239a92915061239e565b5090565b5b8082111561239a576000815560010161239f565b60006001600160401b038311156123cc576123cc612ced565b6123df601f8401601f1916602001612b99565b90508281528383830111156123f357600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461040057600080fd5b600082601f830112612431578081fd5b611ba2838335602085016123b3565b803561ffff8116811461040057600080fd5b803560ff8116811461040057600080fd5b600060208284031215612474578081fd5b611ba28261240a565b6000806040838503121561248f578081fd5b6124988361240a565b91506124a66020840161240a565b90509250929050565b6000806000606084860312156124c3578081fd5b6124cc8461240a565b92506124da6020850161240a565b9150604084013590509250925092565b600080600080608085870312156124ff578081fd5b6125088561240a565b93506125166020860161240a565b92506040850135915060608501356001600160401b03811115612537578182fd5b8501601f81018713612547578182fd5b612556878235602084016123b3565b91505092959194509250565b6000806000806000806000806000806000806101808d8f031215612584578788fd5b61258d8d61240a565b9b5061259b60208e0161240a565b9a5060408d0135995060608d0135985060808d0135975060a08d0135965060c08d013595506125cc60e08e01612440565b94506125db6101008e01612440565b93506125ea6101208e01612452565b92506125f96101408e01612452565b91506001600160401b036101608e01351115612613578081fd5b6126248e6101608f01358f01612421565b90509295989b509295989b509295989b565b60008060408385031215612648578182fd5b6126518361240a565b9150602083013561266181612d03565b809150509250929050565b6000806040838503121561267e578182fd5b6126878361240a565b946020939093013593505050565b600080600080608085870312156126aa578182fd5b6126b38561240a565b966020860135965060408601359560600135945092505050565b6000602082840312156126de578081fd5b8151611ba281612d03565b6000602082840312156126fa578081fd5b8135611ba281612d11565b600060208284031215612716578081fd5b8151611ba281612d11565b6000610140808385031215612734578182fd5b61273d81612b99565b9050825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152508091505092915050565b6000602082840312156127bc578081fd5b5035919050565b6000602082840312156127d4578081fd5b5051919050565b600080604083850312156127ed578182fd5b8235915060208301356001600160401b03811115612809578182fd5b61281585828601612421565b9150509250929050565b60008060408385031215612831578182fd5b505080516020909101519092909150565b6001600160a01b03169052565b60008151808452612867816020860160208601612c2b565b601f01601f19169290920160200192915050565b6007811061289957634e487b7160e01b600052602160045260246000fd5b9052565b600083516128af818460208801612c2b565b8351908301906128c3818360208801612c2b565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906129139083018461284f565b9695505050505050565b600060208252611ba2602083018461284f565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601d908201527f4f6e6c79436f6c6c61746572616c5365727669636550726f7669646572000000604082015260600190565b6020808252600d908201526c13db9b1e535bdb995e541bdbdb609a1b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600060208252612a4560208301845161287b565b6020830151612a576040840182612842565b506040830151612a6a6060840182612842565b506060830151612a7d6080840182612842565b50608083015160a08381019190915283015160c08084019190915283015160e08084019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015161016080840191909152830151610180808401919091528301516101a0808401919091528301516101e06101c0808501829052612b0f61020086018461284f565b90860151858203601f190183870152909250612913838261284f565b600083825260406020830152611d24604083018461284f565b60006101208b83528a60208401528960408401528860608401528760808401528660a08401528560c08401528460e084015280610100840152612b898184018561284f565b9c9b505050505050505050505050565b604051601f8201601f191681016001600160401b0381118282101715612bc157612bc1612ced565b604052919050565b60008219821115612bdc57612bdc612cc1565b500190565b600082612bf057612bf0612cd7565b500490565b6000816000190483118215151615612c0f57612c0f612cc1565b500290565b600082821015612c2657612c26612cc1565b500390565b60005b83811015612c46578181015183820152602001612c2e565b838111156114ed5750506000910152565b600181811c90821680612c6b57607f821691505b60208210811415612c8c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612ca657612ca6612cc1565b5060010190565b600082612cbc57612cbc612cd7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114611f4c57600080fd5b6001600160e01b031981168114611f4c57600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122097e04ad241b1256429c468a6df64fdc41ecf87c0cd6813712ea1c2725f915b8d64736f6c63430008030033",
  "libraries": {
    "AssetBond": "0xA139841E0D43BAb85DDD00469EeD93a5a000cA9e",
    "Validation": "0x08f7e687A90bbA01e8613827FD0D67e41949F9CC",
    "TimeConverter": "0x01d07C9FD2e3fbC493e0A2dE588CE1c1EaD137e4"
  },
  "devdoc": {
    "author": "ELYSIA",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "collateralizeAssetBond(address,uint256,uint256,uint256)": {
        "details": "The collateralizing asset bond token should be only from the MoneyPool.",
        "params": {
          "account": "The owner of asset bond token",
          "borrowAmount": "The borrow amount.",
          "interestRate": "The interest rate of the loan between MoneyPool and borrower.",
          "tokenId": "The token Id to collateralize"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getAssetBondData(uint256)": {
        "details": "The state of the asset bond is `LIQUIDATED` when the current timestamp is greater than liquidation timestamp.",
        "params": {
          "tokenId": "The asset bond tokenId"
        },
        "returns": {
          "_0": "The data struct of the asset bond*"
        }
      },
      "getAssetBondDebtData(uint256)": {
        "details": "Returns the state debt of the asset bond",
        "params": {
          "tokenId": "The id of the asset bond"
        },
        "returns": {
          "_0": "Accrued debt on the moneypool and the fee on the collateral service provider.*"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "liquidateAssetBond(address,uint256)": {
        "details": "The liquidating asset bond token should be only from the MoneyPool.",
        "params": {
          "account": "The liquidator",
          "tokenId": "The token Id to release"
        }
      },
      "mintAssetBond(address,uint256)": {
        "params": {
          "account": "CollateralServiceProvider address",
          "tokenId": "Unique identifier for asset bond."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "releaseAssetBond(address,uint256)": {
        "details": "The releasing asset bond token should be only from the MoneyPool.",
        "params": {
          "account": "The borrower",
          "tokenId": "The token Id to release"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "settleAssetBond(address,address,uint256,uint256,uint256,uint256,uint256,uint16,uint16,uint8,uint8,string)": {
        "params": {
          "borrower": "The address of the borrower who must repay and retrieve the asset bond",
          "couponRate": "The coupon rate of the bond",
          "debtCeiling": "DebtCeiling, the available value of collateral asset when liquidated",
          "delinquencyRate": "The overdue interest rate of the bond. After the loan duration, the borrower",
          "ipfsHash": "IpfsHash which contract and collateral data stored The interest rate paid on a bond by its issuer for the term of the security",
          "loanDuration": "LoanDuration",
          "loanStartTimeDay": "LoanStartTimeDay",
          "loanStartTimeMonth": "LoanStartTimeMonth",
          "loanStartTimeYear": "LoanStartTimeYear",
          "principal": "The borrow amount based on the contract between collateral service provider and borrower in reality",
          "signer": "A third-party agency address that reviews entities listed on the asset bond data",
          "tokenId": "Token id to settle"
        }
      },
      "signAssetBond(uint256,string)": {
        "params": {
          "signerOpinionHash": "The signer can upload their opinion as a form of official documents on IPFS server.",
          "tokenId": "The token Id to release"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "ELYFI Tokenizer",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AssetBondSettled(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,string)": {
        "notice": "Emitted when a collateral service provider mints an empty asset bond token.*"
      },
      "EmptyAssetBondMinted(address,uint256)": {
        "notice": "Emitted when a collateral service provider mints an empty asset bond token."
      }
    },
    "kind": "user",
    "methods": {
      "collateralizeAssetBond(address,uint256,uint256,uint256)": {
        "notice": "The collateral service provider can take out a loan of value equivalent to the collateral recored in asset bond tokens. The asset bond tokens are automatically transferred to the MoneyPool by internal function of `borrow` function."
      },
      "getAssetBondData(uint256)": {
        "notice": "Returns the state of the asset bond"
      },
      "getAssetBondDebtData(uint256)": {
        "notice": "When the borrower takes a loan, the repayment is the sum of two types of amounts: debt on the money pool and fee on the collateral service provider. The former is the amount to be repaid to the moneypool, and the latter is the amount to be paid to collateral service provider as a fee."
      },
      "liquidateAssetBond(address,uint256)": {
        "notice": "In the liquidation scenario, the dTokens are burned and the collateral of the locked up asset bond tokens in the MoneyPool is transferred to liquidator."
      },
      "mintAssetBond(address,uint256)": {
        "notice": "This function can be called by collateral service providers when they want to sign a contract. Borrowers who wants to take out a loan backed by real asset must enter into a contract with a collateral service provider to obtain a loan. Borrowers should submit various documents necessary for evaluating a loan secured by real assets to the collateral service provider."
      },
      "releaseAssetBond(address,uint256)": {
        "notice": "In the repayment scenario, the dTokens are destroyed and the collateral of the locked up asset bond tokens in the MoneyPool is unlocked. The asset bond tokens are transfered to the address of the borrower for terminating the collateral contract."
      },
      "settleAssetBond(address,address,uint256,uint256,uint256,uint256,uint256,uint16,uint16,uint8,uint8,string)": {
        "notice": "This function is called after collateral service provider based on the documents submitted by the loan applicant, risk analysis for the relevant asset is conducted, and the loan availability, maximum loanable amount and the interest rate between collateral service provider and borrower are calculated."
      },
      "signAssetBond(uint256,string)": {
        "notice": "When the collateral service provider settled the informations based on the real world contract in asset bond token, the third party connector such as lawfrim should review this and sign it. The object for this process is to build trust in the token issuance in ELYFI. This final verification process is carried out by reliable parties such as lawfirm. The review is following four items. Determination of the authenticity of collateral security details entered in real estate registration Determination of the authenticity of the contract between a real estate owner and a collateral service provider Determination of the value of principal and interest through certificates of seal impressions of real estate owners and lenders Determination of whether the important information entered in smart contracts match the contract content This allows the asset bond tokens to be recognized as collateral on the blockchain."
      }
    },
    "notice": "Asset bond token is a type of token that records information about real asset-backed bonds and acts as bonds on-chain. It complies with the NFT standard, ERC721 and this token can be deposited in the Money Pool to execute a loan contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6620,
        "contract": "contracts/Tokenizer.sol:Tokenizer",
        "label": "_connector",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IConnector)6684"
      },
      {
        "astId": 6623,
        "contract": "contracts/Tokenizer.sol:Tokenizer",
        "label": "_moneyPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMoneyPool)7140"
      },
      {
        "astId": 6627,
        "contract": "contracts/Tokenizer.sol:Tokenizer",
        "label": "_tokenType",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 6631,
        "contract": "contracts/Tokenizer.sol:Tokenizer",
        "label": "_minter",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6633,
        "contract": "contracts/Tokenizer.sol:Tokenizer",
        "label": "_underlyingAsset",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6638,
        "contract": "contracts/Tokenizer.sol:Tokenizer",
        "label": "_assetBondData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(AssetBondData)7332_storage)"
      },
      {
        "astId": 1002,
        "contract": "contracts/Tokenizer.sol:Tokenizer",
        "label": "_name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 1004,
        "contract": "contracts/Tokenizer.sol:Tokenizer",
        "label": "_symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 1008,
        "contract": "contracts/Tokenizer.sol:Tokenizer",
        "label": "_owners",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1012,
        "contract": "contracts/Tokenizer.sol:Tokenizer",
        "label": "_balances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1016,
        "contract": "contracts/Tokenizer.sol:Tokenizer",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1022,
        "contract": "contracts/Tokenizer.sol:Tokenizer",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IConnector)6684": {
        "encoding": "inplace",
        "label": "contract IConnector",
        "numberOfBytes": "20"
      },
      "t_contract(IMoneyPool)7140": {
        "encoding": "inplace",
        "label": "contract IMoneyPool",
        "numberOfBytes": "20"
      },
      "t_enum(AssetBondState)7361": {
        "encoding": "inplace",
        "label": "enum DataStruct.AssetBondState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(AssetBondData)7332_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataStruct.AssetBondData)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetBondData)7332_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AssetBondData)7332_storage": {
        "encoding": "inplace",
        "label": "struct DataStruct.AssetBondData",
        "members": [
          {
            "astId": 7303,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(AssetBondState)7361"
          },
          {
            "astId": 7305,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "borrower",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7307,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "signer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7309,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "collateralServiceProvider",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7311,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "principal",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7313,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "debtCeiling",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7315,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "couponRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7317,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "interestRate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7319,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "delinquencyRate",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 7321,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "loanStartTimestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 7323,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "collateralizeTimestamp",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 7325,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "maturityTimestamp",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 7327,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "liquidationTimestamp",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 7329,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          },
          {
            "astId": 7331,
            "contract": "contracts/Tokenizer.sol:Tokenizer",
            "label": "signerOpinionHash",
            "offset": 0,
            "slot": "13",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}